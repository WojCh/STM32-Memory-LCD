
memoryLcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001342c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b380  080135e0  080135e0  000235e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e960  0802e960  000402c8  2**0
                  CONTENTS
  4 .ARM          00000008  0802e960  0802e960  0003e960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e968  0802e968  000402c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e968  0802e968  0003e968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e96c  0802e96c  0003e96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0802e970  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000402c8  2**0
                  CONTENTS
 10 .bss          000059c4  200002c8  200002c8  000402c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005c8c  20005c8c  000402c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000402c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000294f0  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006835  00000000  00000000  000697e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002178  00000000  00000000  00070020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ec0  00000000  00000000  00072198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e02a  00000000  00000000  00074058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003070c  00000000  00000000  000a2082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f03e8  00000000  00000000  000d278e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c2b76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c98  00000000  00000000  001c2bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080135c4 	.word	0x080135c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	080135c4 	.word	0x080135c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <SD_logger>:
void Send_Uart (char *string)
{
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}

void SD_logger(char *msg){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	Create_Dir("logs");
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <SD_logger+0x24>)
 8000fb6:	f000 fa1d 	bl	80013f4 <Create_Dir>
	Create_File("logs/LOG.TXT");
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SD_logger+0x28>)
 8000fbc:	f000 f8da 	bl	8001174 <Create_File>
	Update_File("logs/LOG.TXT", msg);
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <SD_logger+0x28>)
 8000fc4:	f000 f962 	bl	800128c <Update_File>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080135e0 	.word	0x080135e0
 8000fd4:	080135e8 	.word	0x080135e8

08000fd8 <Mount_SD>:

uint8_t Mount_SD (const TCHAR* path)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <Mount_SD+0x30>)
 8000fe6:	f00d fd27 	bl	800ea38 <f_mount>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <Mount_SD+0x34>)
 8000ff0:	701a      	strb	r2, [r3, #0]
//	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
//	else Send_Uart("SD CARD mounted successfully...\n");
	if (fresult != FR_OK){
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <Mount_SD+0x34>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Mount_SD+0x26>
		return SD_ERROR;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <Mount_SD+0x28>
	} else{
		return SD_SUCCESS;
 8000ffe:	2301      	movs	r3, #1
	}
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200002e4 	.word	0x200002e4
 800100c:	20002360 	.word	0x20002360

08001010 <Read_File>:
	    return fresult;
	}
}

FRESULT Read_File (char *name, char *outputBuffer)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800101a:	494d      	ldr	r1, [pc, #308]	; (8001150 <Read_File+0x140>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f00e fab8 	bl	800f592 <f_stat>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <Read_File+0x144>)
 8001028:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800102a:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <Read_File+0x144>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <Read_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f00e fcaa 	bl	800f98c <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4946      	ldr	r1, [pc, #280]	; (8001158 <Read_File+0x148>)
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f00f fb7d 	bl	8010740 <siprintf>
//		Send_Uart (buf);
		free(buf);
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f00e fca8 	bl	800f99c <free>
	    return fresult;
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <Read_File+0x144>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	e07a      	b.n	8001148 <Read_File+0x138>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&fil, name, FA_READ);
 8001052:	2201      	movs	r2, #1
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <Read_File+0x14c>)
 8001058:	f00d fd34 	bl	800eac4 <f_open>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <Read_File+0x144>)
 8001062:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <Read_File+0x144>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <Read_File+0x82>
		{
			char *buf = malloc(100*sizeof(char));
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f00e fc8d 	bl	800f98c <malloc>
 8001072:	4603      	mov	r3, r0
 8001074:	60fb      	str	r3, [r7, #12]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Read_File+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4938      	ldr	r1, [pc, #224]	; (8001160 <Read_File+0x150>)
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f00f fb5d 	bl	8010740 <siprintf>
//		    Send_Uart(buf);
		    free(buf);
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f00e fc88 	bl	800f99c <free>
		    return fresult;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Read_File+0x144>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	e05a      	b.n	8001148 <Read_File+0x138>
		}

		/* Read data from the file
		* see the function details for the arguments */

		char *buffer = malloc(sizeof(f_size(&fil)));
 8001092:	2004      	movs	r0, #4
 8001094:	f00e fc7a 	bl	800f98c <malloc>
 8001098:	4603      	mov	r3, r0
 800109a:	61fb      	str	r3, [r7, #28]
		fresult = f_read (&fil, buffer, f_size(&fil), &br);
 800109c:	4b2f      	ldr	r3, [pc, #188]	; (800115c <Read_File+0x14c>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <Read_File+0x154>)
 80010a2:	69f9      	ldr	r1, [r7, #28]
 80010a4:	482d      	ldr	r0, [pc, #180]	; (800115c <Read_File+0x14c>)
 80010a6:	f00d fed9 	bl	800ee5c <f_read>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <Read_File+0x144>)
 80010b0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <Read_File+0x144>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d013      	beq.n	80010e2 <Read_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 80010ba:	2064      	movs	r0, #100	; 0x64
 80010bc:	f00e fc66 	bl	800f98c <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
			free(buffer);
 80010c4:	69f8      	ldr	r0, [r7, #28]
 80010c6:	f00e fc69 	bl	800f99c <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <Read_File+0x144>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <Read_File+0x158>)
 80010d4:	6938      	ldr	r0, [r7, #16]
 80010d6:	f00f fb33 	bl	8010740 <siprintf>
//		  	Send_Uart(buffer);
		  	free(buf);
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f00e fc5e 	bl	800f99c <free>
 80010e0:	e030      	b.n	8001144 <Read_File+0x134>
		}

		else
		{
//			Send_Uart(buffer);
			strncpy(outputBuffer, buffer, 49);
 80010e2:	2231      	movs	r2, #49	; 0x31
 80010e4:	69f9      	ldr	r1, [r7, #28]
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00f fb8d 	bl	8010806 <strncpy>
			free(buffer);
 80010ec:	69f8      	ldr	r0, [r7, #28]
 80010ee:	f00e fc55 	bl	800f99c <free>

			/* Close file */
			fresult = f_close(&fil);
 80010f2:	481a      	ldr	r0, [pc, #104]	; (800115c <Read_File+0x14c>)
 80010f4:	f00e fa23 	bl	800f53e <f_close>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Read_File+0x144>)
 80010fe:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <Read_File+0x144>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d010      	beq.n	800112a <Read_File+0x11a>
			{
				char *buf = malloc(100*sizeof(char));
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f00e fc3f 	bl	800f98c <malloc>
 800110e:	4603      	mov	r3, r0
 8001110:	617b      	str	r3, [r7, #20]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <Read_File+0x144>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4914      	ldr	r1, [pc, #80]	; (800116c <Read_File+0x15c>)
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f00f fb0f 	bl	8010740 <siprintf>
//				Send_Uart(buf);
				free(buf);
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f00e fc3a 	bl	800f99c <free>
 8001128:	e00c      	b.n	8001144 <Read_File+0x134>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 800112a:	2064      	movs	r0, #100	; 0x64
 800112c:	f00e fc2e 	bl	800f98c <malloc>
 8001130:	4603      	mov	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <Read_File+0x160>)
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f00f fb01 	bl	8010740 <siprintf>
//				Send_Uart(buf);
				free(buf);
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f00e fc2c 	bl	800f99c <free>
			}
		}
	    return fresult;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <Read_File+0x144>)
 8001146:	781b      	ldrb	r3, [r3, #0]
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20002348 	.word	0x20002348
 8001154:	20002360 	.word	0x20002360
 8001158:	0801371c 	.word	0x0801371c
 800115c:	20001318 	.word	0x20001318
 8001160:	08013658 	.word	0x08013658
 8001164:	20002364 	.word	0x20002364
 8001168:	08013740 	.word	0x08013740
 800116c:	08013768 	.word	0x08013768
 8001170:	08013790 	.word	0x08013790

08001174 <Create_File>:

FRESULT Create_File (char *name)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800117c:	493b      	ldr	r1, [pc, #236]	; (800126c <Create_File+0xf8>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f00e fa07 	bl	800f592 <f_stat>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <Create_File+0xfc>)
 800118a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <Create_File+0xfc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10f      	bne.n	80011b4 <Create_File+0x40>
	{
		char *buf = malloc(100*sizeof(char));
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f00e fbf9 	bl	800f98c <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4934      	ldr	r1, [pc, #208]	; (8001274 <Create_File+0x100>)
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f00f facc 	bl	8010740 <siprintf>
//		Send_Uart(buf);
		free(buf);
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f00e fbf7 	bl	800f99c <free>
	    return fresult;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <Create_File+0xfc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e057      	b.n	8001264 <Create_File+0xf0>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011b4:	220b      	movs	r2, #11
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	482f      	ldr	r0, [pc, #188]	; (8001278 <Create_File+0x104>)
 80011ba:	f00d fc83 	bl	800eac4 <f_open>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <Create_File+0xfc>)
 80011c4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Create_File+0xfc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d012      	beq.n	80011f4 <Create_File+0x80>
		{
			char *buf = malloc(100*sizeof(char));
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f00e fbdc 	bl	800f98c <malloc>
 80011d4:	4603      	mov	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <Create_File+0xfc>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4926      	ldr	r1, [pc, #152]	; (800127c <Create_File+0x108>)
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f00f faac 	bl	8010740 <siprintf>
//			Send_Uart(buf);
			free(buf);
 80011e8:	6938      	ldr	r0, [r7, #16]
 80011ea:	f00e fbd7 	bl	800f99c <free>
		    return fresult;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <Create_File+0xfc>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e037      	b.n	8001264 <Create_File+0xf0>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f00e fbc9 	bl	800f98c <malloc>
 80011fa:	4603      	mov	r3, r0
 80011fc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <Create_File+0x10c>)
 8001202:	69f8      	ldr	r0, [r7, #28]
 8001204:	f00f fa9c 	bl	8010740 <siprintf>
//			Send_Uart(buf);
			free(buf);
 8001208:	69f8      	ldr	r0, [r7, #28]
 800120a:	f00e fbc7 	bl	800f99c <free>
		}

		fresult = f_close(&fil);
 800120e:	481a      	ldr	r0, [pc, #104]	; (8001278 <Create_File+0x104>)
 8001210:	f00e f995 	bl	800f53e <f_close>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <Create_File+0xfc>)
 800121a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <Create_File+0xfc>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d010      	beq.n	8001246 <Create_File+0xd2>
		{
			char *buf = malloc(100*sizeof(char));
 8001224:	2064      	movs	r0, #100	; 0x64
 8001226:	f00e fbb1 	bl	800f98c <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <Create_File+0xfc>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4913      	ldr	r1, [pc, #76]	; (8001284 <Create_File+0x110>)
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f00f fa81 	bl	8010740 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f00e fbac 	bl	800f99c <free>
 8001244:	e00c      	b.n	8001260 <Create_File+0xec>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001246:	2064      	movs	r0, #100	; 0x64
 8001248:	f00e fba0 	bl	800f98c <malloc>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <Create_File+0x114>)
 8001254:	69b8      	ldr	r0, [r7, #24]
 8001256:	f00f fa73 	bl	8010740 <siprintf>
//			Send_Uart(buf);
			free(buf);
 800125a:	69b8      	ldr	r0, [r7, #24]
 800125c:	f00e fb9e 	bl	800f99c <free>
		}
	}
    return fresult;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <Create_File+0xfc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20002348 	.word	0x20002348
 8001270:	20002360 	.word	0x20002360
 8001274:	080137b0 	.word	0x080137b0
 8001278:	20001318 	.word	0x20001318
 800127c:	080137e8 	.word	0x080137e8
 8001280:	08013810 	.word	0x08013810
 8001284:	08013850 	.word	0x08013850
 8001288:	08013790 	.word	0x08013790

0800128c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001296:	494d      	ldr	r1, [pc, #308]	; (80013cc <Update_File+0x140>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f00e f97a 	bl	800f592 <f_stat>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <Update_File+0x144>)
 80012a4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012a6:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <Update_File+0x144>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00f      	beq.n	80012ce <Update_File+0x42>
	{
		char *buf = malloc(100*sizeof(char));
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f00e fb6c 	bl	800f98c <malloc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <Update_File+0x148>)
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f00f fa3f 	bl	8010740 <siprintf>
//		Send_Uart (buf);
		free(buf);
 80012c2:	68b8      	ldr	r0, [r7, #8]
 80012c4:	f00e fb6a 	bl	800f99c <free>
	    return fresult;
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <Update_File+0x144>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	e079      	b.n	80013c2 <Update_File+0x136>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012ce:	2232      	movs	r2, #50	; 0x32
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4841      	ldr	r0, [pc, #260]	; (80013d8 <Update_File+0x14c>)
 80012d4:	f00d fbf6 	bl	800eac4 <f_open>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Update_File+0x144>)
 80012de:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <Update_File+0x144>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <Update_File+0x82>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f00e fb4f 	bl	800f98c <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <Update_File+0x144>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <Update_File+0x150>)
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f00f fa1f 	bl	8010740 <siprintf>
//	    	Send_Uart(buf);
	        free(buf);
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f00e fb4a 	bl	800f99c <free>
	        return fresult;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <Update_File+0x144>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e059      	b.n	80013c2 <Update_File+0x136>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800130e:	6838      	ldr	r0, [r7, #0]
 8001310:	f7fe ff6e 	bl	80001f0 <strlen>
 8001314:	4602      	mov	r2, r0
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <Update_File+0x154>)
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	482f      	ldr	r0, [pc, #188]	; (80013d8 <Update_File+0x14c>)
 800131c:	f00d fefd 	bl	800f11a <f_write>
 8001320:	4603      	mov	r3, r0
 8001322:	461a      	mov	r2, r3
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <Update_File+0x144>)
 8001326:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <Update_File+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d010      	beq.n	8001352 <Update_File+0xc6>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001330:	2064      	movs	r0, #100	; 0x64
 8001332:	f00e fb2b 	bl	800f98c <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Update_File+0x144>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4928      	ldr	r1, [pc, #160]	; (80013e4 <Update_File+0x158>)
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	f00f f9fb 	bl	8010740 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800134a:	69b8      	ldr	r0, [r7, #24]
 800134c:	f00e fb26 	bl	800f99c <free>
 8001350:	e00c      	b.n	800136c <Update_File+0xe0>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f00e fb1a 	bl	800f98c <malloc>
 8001358:	4603      	mov	r3, r0
 800135a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4922      	ldr	r1, [pc, #136]	; (80013e8 <Update_File+0x15c>)
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f00f f9ed 	bl	8010740 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 8001366:	69f8      	ldr	r0, [r7, #28]
 8001368:	f00e fb18 	bl	800f99c <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <Update_File+0x14c>)
 800136e:	f00e f8e6 	bl	800f53e <f_close>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Update_File+0x144>)
 8001378:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <Update_File+0x144>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d010      	beq.n	80013a4 <Update_File+0x118>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001382:	2064      	movs	r0, #100	; 0x64
 8001384:	f00e fb02 	bl	800f98c <malloc>
 8001388:	4603      	mov	r3, r0
 800138a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <Update_File+0x144>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <Update_File+0x160>)
 8001396:	6938      	ldr	r0, [r7, #16]
 8001398:	f00f f9d2 	bl	8010740 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 800139c:	6938      	ldr	r0, [r7, #16]
 800139e:	f00e fafd 	bl	800f99c <free>
 80013a2:	e00c      	b.n	80013be <Update_File+0x132>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f00e faf1 	bl	800f98c <malloc>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	490f      	ldr	r1, [pc, #60]	; (80013f0 <Update_File+0x164>)
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f00f f9c4 	bl	8010740 <siprintf>
//	    	Send_Uart(buf);
	    	free(buf);
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f00e faef 	bl	800f99c <free>
	     }
	}
    return fresult;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Update_File+0x144>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20002348 	.word	0x20002348
 80013d0:	20002360 	.word	0x20002360
 80013d4:	08013638 	.word	0x08013638
 80013d8:	20001318 	.word	0x20001318
 80013dc:	08013658 	.word	0x08013658
 80013e0:	20002368 	.word	0x20002368
 80013e4:	08013874 	.word	0x08013874
 80013e8:	0801389c 	.word	0x0801389c
 80013ec:	08013768 	.word	0x08013768
 80013f0:	08013790 	.word	0x08013790

080013f4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f00e f901 	bl	800f604 <f_mkdir>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <Create_Dir+0x68>)
 8001408:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <Create_Dir+0x68>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <Create_Dir+0x3a>
    {
    	char *buf = malloc(100*sizeof(char));
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f00e faba 	bl	800f98c <malloc>
 8001418:	4603      	mov	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4910      	ldr	r1, [pc, #64]	; (8001460 <Create_Dir+0x6c>)
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f00f f98d 	bl	8010740 <siprintf>
//    	Send_Uart (buf);
    	free(buf);
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f00e fab8 	bl	800f99c <free>
 800142c:	e00f      	b.n	800144e <Create_Dir+0x5a>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800142e:	2064      	movs	r0, #100	; 0x64
 8001430:	f00e faac 	bl	800f98c <malloc>
 8001434:	4603      	mov	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <Create_Dir+0x68>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4908      	ldr	r1, [pc, #32]	; (8001464 <Create_Dir+0x70>)
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f00f f97c 	bl	8010740 <siprintf>
//    	Send_Uart(buf);
    	free(buf);
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f00e faa7 	bl	800f99c <free>
    }
    return fresult;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <Create_Dir+0x68>)
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20002360 	.word	0x20002360
 8001460:	080138fc 	.word	0x080138fc
 8001464:	08013920 	.word	0x08013920

08001468 <read_chip_id>:
*              and can be used to check whether communication is functioning.
* @param[in] - NONE.
* @return    - NO_ERR if chip_id is equal to 0x55, otherwise CHIP_ID_INVALID_ERR.
*/
static bmp_err_t read_chip_id (void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af04      	add	r7, sp, #16
	uint8_t out_buff = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t ret_val = NO_ERR;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CHIP_ID_REG, 1, &out_buff, 1, BMP_I2C_TIMEOUT);
 8001476:	2332      	movs	r3, #50	; 0x32
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	22d0      	movs	r2, #208	; 0xd0
 8001486:	21ef      	movs	r1, #239	; 0xef
 8001488:	4806      	ldr	r0, [pc, #24]	; (80014a4 <read_chip_id+0x3c>)
 800148a:	f005 ffaf 	bl	80073ec <HAL_I2C_Mem_Read>

	if (BMP_CHIP_ID_VAL != out_buff)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b55      	cmp	r3, #85	; 0x55
 8001492:	d001      	beq.n	8001498 <read_chip_id+0x30>
	{
		ret_val = CHIP_ID_INVALID_ERR;
 8001494:	2301      	movs	r3, #1
 8001496:	71fb      	strb	r3, [r7, #7]
	}

	return ret_val;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20002638 	.word	0x20002638

080014a8 <set_oss>:
* @param[in] - struct of type oss_t
* @param[in] - enum of type oss_ratio_t
* @return    - None
*/
static void set_oss (oss_t * oss, oss_ratio_t ratio)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
	uint8_t in_buff[2] = {0};
 80014b4:	2300      	movs	r3, #0
 80014b6:	81bb      	strh	r3, [r7, #12]

	switch (ratio)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d81a      	bhi.n	80014f4 <set_oss+0x4c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <set_oss+0x1c>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014ed 	.word	0x080014ed
	{
		case ULTRA_LOW_PWR_MODE:
		{
			oss->wait_time = BMP_OSS0_CONV_TIME;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2205      	movs	r2, #5
 80014d8:	705a      	strb	r2, [r3, #1]
			break;
 80014da:	e00f      	b.n	80014fc <set_oss+0x54>
		}
		case STANDARD_MODE:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	705a      	strb	r2, [r3, #1]
			break;
 80014e2:	e00b      	b.n	80014fc <set_oss+0x54>
		}
		case HIGH:
		{
			oss->wait_time = BMP_OSS2_CONV_TIME;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	220e      	movs	r2, #14
 80014e8:	705a      	strb	r2, [r3, #1]
			break;
 80014ea:	e007      	b.n	80014fc <set_oss+0x54>
		}
		case ULTRA_HIGH_RESOLUTION:
		{
			oss->wait_time = BMP_OSS3_CONV_TIME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	221a      	movs	r2, #26
 80014f0:	705a      	strb	r2, [r3, #1]
			break;
 80014f2:	e003      	b.n	80014fc <set_oss+0x54>
		}
		default:
		{
			oss->wait_time = BMP_OSS1_CONV_TIME;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2208      	movs	r2, #8
 80014f8:	705a      	strb	r2, [r3, #1]
			break;
 80014fa:	bf00      	nop
		}
	}

	oss->ratio = ratio;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	701a      	strb	r2, [r3, #0]
	BMP_SET_I2CRW_REG (in_buff[1], BMP_CTRL_OSS_MASK(ratio));
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	70fb      	strb	r3, [r7, #3]
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, in_buff, 2, BMP_I2C_TIMEOUT );
 800150c:	2332      	movs	r3, #50	; 0x32
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2302      	movs	r3, #2
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	22f4      	movs	r2, #244	; 0xf4
 800151e:	21ee      	movs	r1, #238	; 0xee
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <set_oss+0x88>)
 8001522:	f005 fe69 	bl	80071f8 <HAL_I2C_Mem_Write>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20002638 	.word	0x20002638

08001534 <read_calib_data>:
*              This is used to compensate offset, temperature dependence and other parameters of the sensor.
* @param[in] - struct of type bmp_calib_param_t
* @return    - NO_ERR if read calibration data are valid otherwise READ_CALIB_ERR.
*/
static bmp_err_t read_calib_data (short * calib_data)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
	bmp_err_t ret_val = NO_ERR;
 800153c:	2300      	movs	r3, #0
 800153e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_buff[BMP_CALIB_DATA_SIZE] = {0};
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	821a      	strh	r2, [r3, #16]
	uint8_t i = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t j = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_CALIB_ADDR, 1, out_buff, BMP_CALIB_DATA_SIZE, BMP_I2C_TIMEOUT);
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2316      	movs	r3, #22
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	22aa      	movs	r2, #170	; 0xaa
 8001574:	21ef      	movs	r1, #239	; 0xef
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <read_calib_data+0xe0>)
 8001578:	f005 ff38 	bl	80073ec <HAL_I2C_Mem_Read>

	// Store read calib data to bmp_calib struct.
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001582:	e03c      	b.n	80015fe <read_calib_data+0xca>
	{
		calib_data[i] = (out_buff[i * 2] << 8) | out_buff[j];
 8001584:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	3328      	adds	r3, #40	; 0x28
 800158c:	443b      	add	r3, r7
 800158e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b219      	sxth	r1, r3
 8001596:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800159a:	3328      	adds	r3, #40	; 0x28
 800159c:	443b      	add	r3, r7
 800159e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4403      	add	r3, r0
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b212      	sxth	r2, r2
 80015b2:	801a      	strh	r2, [r3, #0]

		// checking that none of the words has the value 0 or 0xFFFF.
		if ((0 == calib_data[i]) | (-1 == calib_data[i]))
 80015b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440b      	add	r3, r1
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <read_calib_data+0xc0>
		{
			ret_val = GET_CALIB_ERR;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (i = 0; i <= BMP_CALIB_DATA_SIZE / 2; i++, j+2)
 80015f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001602:	2b0b      	cmp	r3, #11
 8001604:	d9be      	bls.n	8001584 <read_calib_data+0x50>
		}
	}

	return ret_val;
 8001606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800160a:	4618      	mov	r0, r3
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20002638 	.word	0x20002638

08001618 <bmp_init>:
* @brief:    - Performe initial sequence of BMP sensor
* @param[in] - pointer to struct of type bmp_calib_param_t
* @return    - None.
*/
void bmp_init (bmp_t * bmp)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	memset(bmp, 0x00, sizeof(&bmp)); // clear bmp strut;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f00e f9ce 	bl	800f9c8 <memset>
	bmp->err = read_chip_id ();      // check chip validity and I2C communication.
 800162c:	687c      	ldr	r4, [r7, #4]
 800162e:	f7ff ff1b 	bl	8001468 <read_chip_id>
 8001632:	4603      	mov	r3, r0
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	bmp->err = read_calib_data ((short *)&bmp->calib);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	687c      	ldr	r4, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff79 	bl	8001534 <read_calib_data>
 8001642:	4603      	mov	r3, r0
 8001644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	set_oss (&bmp->oss, STANDARD_MODE);       // set oversampling settings
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3340      	adds	r3, #64	; 0x40
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff2a 	bl	80014a8 <set_oss>
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <get_ut>:
* @brief:    - Get uncompensated temperature value. UT = temperature data (16 bit)
* @param[in] - None.
* @return    - uncompensated temp.
*/
int32_t get_ut (void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af04      	add	r7, sp, #16
	uint8_t out_buff[2];

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_TEMP_CONV);
 8001662:	232e      	movs	r3, #46	; 0x2e
 8001664:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2301      	movs	r3, #1
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	22f4      	movs	r2, #244	; 0xf4
 8001676:	21ee      	movs	r1, #238	; 0xee
 8001678:	480c      	ldr	r0, [pc, #48]	; (80016ac <get_ut+0x50>)
 800167a:	f005 fdbd 	bl	80071f8 <HAL_I2C_Mem_Write>
	HAL_Delay (BMP_TEMP_CONV_TIME);
 800167e:	2005      	movs	r0, #5
 8001680:	f005 f89e 	bl	80067c0 <HAL_Delay>
	HAL_I2C_Mem_Read ( &hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 2, BMP_I2C_TIMEOUT );
 8001684:	2332      	movs	r3, #50	; 0x32
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2302      	movs	r3, #2
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	22f6      	movs	r2, #246	; 0xf6
 8001694:	21ef      	movs	r1, #239	; 0xef
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <get_ut+0x50>)
 8001698:	f005 fea8 	bl	80073ec <HAL_I2C_Mem_Read>

	return (out_buff[0] << BYTE_SHIFT) | out_buff[1];
 800169c:	793b      	ldrb	r3, [r7, #4]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	797a      	ldrb	r2, [r7, #5]
 80016a2:	4313      	orrs	r3, r2
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002638 	.word	0x20002638

080016b0 <get_temp>:
* @brief:    - Calc true temperature.
* @param[in] - pointer to struct of type bmp_t
* @return    - true temp.
*/
float get_temp(bmp_t * bmp)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	int32_t X1 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
	int32_t X2 = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
	float temp = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

	X1 = (((int32_t)bmp->uncomp.temp - bmp->calib.AC6) * bmp->calib.AC5) >> 15;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	895b      	ldrh	r3, [r3, #10]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	8912      	ldrh	r2, [r2, #8]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	13db      	asrs	r3, r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
	X2 = (bmp->calib.MC << 11) / (X1 + bmp->calib.MD);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016ec:	02da      	lsls	r2, r3, #11
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016f4:	4619      	mov	r1, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	440b      	add	r3, r1
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
	bmp->data.B5 = X1 + X2;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	635a      	str	r2, [r3, #52]	; 0x34
	temp = ((bmp->data.B5 + 8) >> 4) * 0.1f;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	3308      	adds	r3, #8
 8001710:	111b      	asrs	r3, r3, #4
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001768 <get_temp+0xb8>
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	edc7 7a03 	vstr	s15, [r7, #12]

	if ((temp <= BMP_MIN_TEMP_THRESHOLD) || (temp >= BMP_MAX_TEMP_THRESHOLD))
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800176c <get_temp+0xbc>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d908      	bls.n	800174a <get_temp+0x9a>
 8001738:	edd7 7a03 	vldr	s15, [r7, #12]
 800173c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001770 <get_temp+0xc0>
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	db03      	blt.n	8001752 <get_temp+0xa2>
	{
		bmp->err = GET_TEMP_ERR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return temp;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	3dcccccd 	.word	0x3dcccccd
 800176c:	c2200000 	.word	0xc2200000
 8001770:	42aa0000 	.word	0x42aa0000

08001774 <get_up>:
* @brief:    - Get uncompensated pressure value. UP = pressure data (16 to 19 bit)
* @param[in] - struct of type oss_t
* @return    - uncompensated pressure.
*/
int32_t get_up (oss_t oss)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af04      	add	r7, sp, #16
 800177a:	80b8      	strh	r0, [r7, #4]
	uint8_t out_buff[3] = {0};
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <get_up+0x7c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	2300      	movs	r3, #0
 8001784:	72bb      	strb	r3, [r7, #10]
	long up = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]

	BMP_SET_I2CRW_REG (out_buff[0], BMP_SET_PRESS_CONV);
 800178a:	2334      	movs	r3, #52	; 0x34
 800178c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( &hi2c1, BMP_WRITE_ADDR, BMP_CTRL_REG, 1, out_buff, 1, BMP_I2C_TIMEOUT );
 800178e:	2332      	movs	r3, #50	; 0x32
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	22f4      	movs	r2, #244	; 0xf4
 80017a0:	21ee      	movs	r1, #238	; 0xee
 80017a2:	4814      	ldr	r0, [pc, #80]	; (80017f4 <get_up+0x80>)
 80017a4:	f005 fd28 	bl	80071f8 <HAL_I2C_Mem_Write>
	HAL_Delay (oss.wait_time);
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f808 	bl	80067c0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_READ_ADDR, BMP_DATA_MSB_ADDR, 1, out_buff, 3, BMP_I2C_TIMEOUT);
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2303      	movs	r3, #3
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	22f6      	movs	r2, #246	; 0xf6
 80017c2:	21ef      	movs	r1, #239	; 0xef
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <get_up+0x80>)
 80017c6:	f005 fe11 	bl	80073ec <HAL_I2C_Mem_Read>

	up = ((out_buff[0] << SHORT_SHIFT) + (out_buff[1] << BYTE_SHIFT) + out_buff[2]) >> (8 - oss.ratio);
 80017ca:	7a3b      	ldrb	r3, [r7, #8]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	7a7b      	ldrb	r3, [r7, #9]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4413      	add	r3, r2
 80017d4:	7aba      	ldrb	r2, [r7, #10]
 80017d6:	441a      	add	r2, r3
 80017d8:	793b      	ldrb	r3, [r7, #4]
 80017da:	f1c3 0308 	rsb	r3, r3, #8
 80017de:	fa42 f303 	asr.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
	return up;
 80017e4:	68fb      	ldr	r3, [r7, #12]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08013990 	.word	0x08013990
 80017f4:	20002638 	.word	0x20002638

080017f8 <get_pressure>:
* @brief:    - Calc true pressure.
* @param[in] - struct of type bmp_t
* @return    - true pressure in Pa.
*/
int32_t get_pressure(bmp_t bmp)
{
 80017f8:	b084      	sub	sp, #16
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t X1, X2, X3, B3, B6, p = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
	uint32_t B4, B7 = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]

	B6 = bmp.data.B5 - 4000;
 8001810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001812:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001816:	617b      	str	r3, [r7, #20]
	X1 = (bmp.calib.B2 * (B6 * B6 / 0x1000)) / 0x800;
 8001818:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800181c:	461a      	mov	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fb03 f303 	mul.w	r3, r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da01      	bge.n	800182c <get_pressure+0x34>
 8001828:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800182c:	131b      	asrs	r3, r3, #12
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	da01      	bge.n	800183a <get_pressure+0x42>
 8001836:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183a:	12db      	asrs	r3, r3, #11
 800183c:	613b      	str	r3, [r7, #16]
	X2 = bmp.calib.AC2 * B6 / 0x800;
 800183e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001842:	461a      	mov	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	da01      	bge.n	8001852 <get_pressure+0x5a>
 800184e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001852:	12db      	asrs	r3, r3, #11
 8001854:	60fb      	str	r3, [r7, #12]
	X3 = X1 + X2;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
	B3 = (((bmp.calib.AC1 * 4 + X3) << bmp.oss.ratio) +2) / 4;
 800185e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001862:	009a      	lsls	r2, r3, #2
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4413      	add	r3, r2
 8001868:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800186c:	4093      	lsls	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	da00      	bge.n	8001876 <get_pressure+0x7e>
 8001874:	3303      	adds	r3, #3
 8001876:	109b      	asrs	r3, r3, #2
 8001878:	607b      	str	r3, [r7, #4]
	X1 = bmp.calib.AC3 * B6 / 0x2000;
 800187a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	da02      	bge.n	8001890 <get_pressure+0x98>
 800188a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800188e:	331f      	adds	r3, #31
 8001890:	135b      	asrs	r3, r3, #13
 8001892:	613b      	str	r3, [r7, #16]
	X2 = (bmp.calib.B1 * (B6 * B6 / 0x1000)) / 0x10000;
 8001894:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001898:	461a      	mov	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fb03 f303 	mul.w	r3, r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da01      	bge.n	80018a8 <get_pressure+0xb0>
 80018a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80018a8:	131b      	asrs	r3, r3, #12
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <get_pressure+0xc0>
 80018b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018b6:	33ff      	adds	r3, #255	; 0xff
 80018b8:	141b      	asrs	r3, r3, #16
 80018ba:	60fb      	str	r3, [r7, #12]
	X3 = ((X1 + X2) + 2) / 0x4;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	3302      	adds	r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da00      	bge.n	80018ca <get_pressure+0xd2>
 80018c8:	3303      	adds	r3, #3
 80018ca:	109b      	asrs	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
	B4 = bmp.calib.AC4 * (unsigned long)(X3 + 32768) / 0x8000;
 80018ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018d0:	461a      	mov	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	0bdb      	lsrs	r3, r3, #15
 80018de:	603b      	str	r3, [r7, #0]
	B7 = ((unsigned long)bmp.uncomp.press - B3) * (50000 >> bmp.oss.ratio);
 80018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80018ec:	4611      	mov	r1, r2
 80018ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80018f2:	410a      	asrs	r2, r1
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	61bb      	str	r3, [r7, #24]

	if (B7 < 0x80000000)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db06      	blt.n	800190e <get_pressure+0x116>
	{
		p = (B7 * 2) / B4;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	005a      	lsls	r2, r3, #1
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	e005      	b.n	800191a <get_pressure+0x122>
	}
	else
	{
		p = (B7 / B4) * 2;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	61fb      	str	r3, [r7, #28]
	}

	X1 = (p / 0x100 * (p / 0x100));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	da00      	bge.n	8001922 <get_pressure+0x12a>
 8001920:	33ff      	adds	r3, #255	; 0xff
 8001922:	121b      	asrs	r3, r3, #8
 8001924:	461a      	mov	r2, r3
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_pressure+0x136>
 800192c:	33ff      	adds	r3, #255	; 0xff
 800192e:	121b      	asrs	r3, r3, #8
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	613b      	str	r3, [r7, #16]
	X1 = (X1 * 3038) / 0x10000;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f640 32de 	movw	r2, #3038	; 0xbde
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	da02      	bge.n	800194a <get_pressure+0x152>
 8001944:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001948:	33ff      	adds	r3, #255	; 0xff
 800194a:	141b      	asrs	r3, r3, #16
 800194c:	613b      	str	r3, [r7, #16]
	X2 = (-7357 * p) / 0x10000;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <get_pressure+0x198>)
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	da02      	bge.n	8001960 <get_pressure+0x168>
 800195a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800195e:	33ff      	adds	r3, #255	; 0xff
 8001960:	141b      	asrs	r3, r3, #16
 8001962:	60fb      	str	r3, [r7, #12]
	p = p + (X1 + X2 + 3791) / 0x10;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <get_pressure+0x17c>
 8001972:	330f      	adds	r3, #15
 8001974:	111b      	asrs	r3, r3, #4
 8001976:	461a      	mov	r2, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	61fb      	str	r3, [r7, #28]

	return p;
 800197e:	69fb      	ldr	r3, [r7, #28]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	b004      	add	sp, #16
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	ffffe343 	.word	0xffffe343
 8001994:	00000000 	.word	0x00000000

08001998 <get_altitude>:
* @brief:    - Calc true altitude.
* @param[in] - struct of type bmp_t
* @return    - true pressure.
*/
float get_altitude (bmp_t * bmp)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	float altitude = 0;
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

	altitude = BMP_PRESS_CONST_COEFICIENT * (1.0f - pow((bmp->data.press / BMP_PRESS_CONST_SEA_LEVEL), (1/5.255)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <get_altitude+0xb8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019bc:	ee16 0a90 	vmov	r0, s13
 80019c0:	f7fe fdd2 	bl	8000568 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001a40 <get_altitude+0xa8>
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f010 feb2 	bl	8012738 <pow>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	491d      	ldr	r1, [pc, #116]	; (8001a54 <get_altitude+0xbc>)
 80019de:	f7fe fc63 	bl	80002a8 <__aeabi_dsub>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	a317      	add	r3, pc, #92	; (adr r3, 8001a48 <get_altitude+0xb0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe12 	bl	8000618 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f904 	bl	8000c08 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

	if ((altitude <= BMP_MIN_ALT_THRESHOLD) || (altitude >= BMP_MAX_ALT_THRESHOLD))
 8001a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001a58 <get_altitude+0xc0>
 8001a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a14:	d908      	bls.n	8001a28 <get_altitude+0x90>
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a5c <get_altitude+0xc4>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	db03      	blt.n	8001a30 <get_altitude+0x98>
	{
		bmp->err = GET_ALTITUDE_ERR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2205      	movs	r2, #5
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}

	return altitude;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	ee07 3a90 	vmov	s15, r3
}
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	ccd9456c 	.word	0xccd9456c
 8001a44:	3fc85b95 	.word	0x3fc85b95
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40e5a540 	.word	0x40e5a540
 8001a50:	20000000 	.word	0x20000000
 8001a54:	3ff00000 	.word	0x3ff00000
 8001a58:	c3fa0000 	.word	0xc3fa0000
 8001a5c:	460ca000 	.word	0x460ca000

08001a60 <get_slp>:
float get_slp (bmp_t * bmp)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	float slp = 0;
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

	slp = bmp->data.press/pow((1.0f - fixedAltitude/BMP_PRESS_CONST_COEFICIENT), 5.255);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd66 	bl	8000544 <__aeabi_i2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <get_slp+0x80>)
 8001a7e:	ed93 7a00 	vldr	s14, [r3]
 8001a82:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001ae4 <get_slp+0x84>
 8001a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001ad8 <get_slp+0x78>
 8001aa2:	ec43 2b10 	vmov	d0, r2, r3
 8001aa6:	f010 fe47 	bl	8012738 <pow>
 8001aaa:	ec53 2b10 	vmov	r2, r3, d0
 8001aae:	4620      	mov	r0, r4
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	f7fe fedb 	bl	800086c <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f8a3 	bl	8000c08 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]

	return slp;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	ee07 3a90 	vmov	s15, r3
}
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	b851eb85 	.word	0xb851eb85
 8001adc:	4015051e 	.word	0x4015051e
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	472d2a00 	.word	0x472d2a00

08001ae8 <getBmpData>:


bmp_t bmp180module;
baroDataSet bmpData;

baroDataSet getBmpData(bmp_t* bmp180){
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b095      	sub	sp, #84	; 0x54
 8001aec:	af0e      	add	r7, sp, #56	; 0x38
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	bmp180->uncomp.temp = get_ut ();
 8001af2:	f7ff fdb3 	bl	800165c <get_ut>
 8001af6:	ee07 0a90 	vmov	s15, r0
 8001afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a06 	vstr	s15, [r3, #24]
	bmp180->data.temp = get_temp(bmp180);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fdd3 	bl	80016b0 <get_temp>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	bmp180->uncomp.press = get_up(bmp180->oss);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001b18:	f7ff fe2c 	bl	8001774 <get_up>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	61da      	str	r2, [r3, #28]
	bmp180->data.press = get_pressure(*bmp180);
 8001b22:	683e      	ldr	r6, [r7, #0]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 0410 	add.w	r4, r6, #16
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b3e:	f7ff fe5b 	bl	80017f8 <get_pressure>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
	bmp180->data.slp = get_slp(bmp180);
 8001b48:	6838      	ldr	r0, [r7, #0]
 8001b4a:	f7ff ff89 	bl	8001a60 <get_slp>
 8001b4e:	eef0 7a40 	vmov.f32	s15, s0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	bmp180->data.altitude = get_altitude(bmp180);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff ff1d 	bl	8001998 <get_altitude>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	baroDataSet result;
	result.altitude = bmp180->data.altitude;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6c:	613b      	str	r3, [r7, #16]
	result.pressure = bmp180->data.press;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
	result.temperature = bmp180->data.temp;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	60bb      	str	r3, [r7, #8]
	result.slpress = bmp180->data.slp;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	617b      	str	r3, [r7, #20]
	return result;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	461c      	mov	r4, r3
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b98 <button_set_long_press_time>:
// Button states and handlers
Button_State button_states[NUM_BUTTONS];
Button_Handler button_handlers[NUM_BUTTONS];

// Set long press time for a button
void button_set_long_press_time(uint8_t button_num, uint32_t long_press_time) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
    if (button_num < NUM_BUTTONS) {
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d806      	bhi.n	8001bb8 <button_set_long_press_time+0x20>
        button_handlers[button_num].long_press_time = long_press_time;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <button_set_long_press_time+0x2c>)
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	601a      	str	r2, [r3, #0]
    }
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20002420 	.word	0x20002420

08001bc8 <button_set_hold_cycle_time>:
// Set cyclic time period for a button, when held
void button_set_hold_cycle_time(uint8_t button_num, uint32_t cycle_period) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
    if (button_num < NUM_BUTTONS) {
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d806      	bhi.n	8001be8 <button_set_hold_cycle_time+0x20>
        button_handlers[button_num].cycle_period = cycle_period;
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <button_set_hold_cycle_time+0x2c>)
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	330c      	adds	r3, #12
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]
    }
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20002420 	.word	0x20002420

08001bf8 <button_set_handler>:
        button_states[i].debounce_counter = 0;
    }
}

// Set button event handler
void button_set_handler(uint8_t button_num, Button_Callback callback, void* context) {
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	73fb      	strb	r3, [r7, #15]
    if (button_num < NUM_BUTTONS) {
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d80c      	bhi.n	8001c26 <button_set_handler+0x2e>
        button_handlers[button_num].callback = callback;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <button_set_handler+0x3c>)
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	601a      	str	r2, [r3, #0]
        button_handlers[button_num].context = context;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <button_set_handler+0x3c>)
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
    }
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20002420 	.word	0x20002420

08001c38 <button_task>:
 * @brief Scans and processes button states, detects button events, and triggers corresponding callbacks.
 *
 * This function should be called periodically in the main loop. It handles debouncing, press, release, short press,
 * long press, and double press events for a defined set of buttons, and triggers their respective callback functions.
 */
void button_task(void) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
    uint8_t debounce_threshold = 8; // Amount of HAL ticks to wait for button to stop bouncing
 8001c3e:	2308      	movs	r3, #8
 8001c40:	73bb      	strb	r3, [r7, #14]
    uint32_t double_press_timeout = 150; // Amount of HAL ticks to wait for a second press to be considered a double press
 8001c42:	2396      	movs	r3, #150	; 0x96
 8001c44:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e147      	b.n	8001edc <button_task+0x2a4>
    	if (button_handlers[i].callback == NULL) {
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	4aa8      	ldr	r2, [pc, #672]	; (8001ef0 <button_task+0x2b8>)
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 813c 	beq.w	8001ed4 <button_task+0x29c>
			continue;
		}
        // Read the current state of the button (pressed or not pressed)
        uint8_t current_state = HAL_GPIO_ReadPin(Button_Port[i], Button_Pin[i]) == GPIO_PIN_RESET;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	4aa5      	ldr	r2, [pc, #660]	; (8001ef4 <button_task+0x2bc>)
 8001c60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	49a4      	ldr	r1, [pc, #656]	; (8001ef8 <button_task+0x2c0>)
 8001c68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f005 f90e 	bl	8006e90 <HAL_GPIO_ReadPin>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	71fb      	strb	r3, [r7, #7]

        // Check if the button state has changed
        if (current_state != button_states[i].pressed) {
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	4a9d      	ldr	r2, [pc, #628]	; (8001efc <button_task+0x2c4>)
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f000 80c5 	beq.w	8001e1e <button_task+0x1e6>
            // Increment debounce counter
            button_states[i].debounce_counter++;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	4999      	ldr	r1, [pc, #612]	; (8001efc <button_task+0x2c4>)
 8001c98:	011a      	lsls	r2, r3, #4
 8001c9a:	440a      	add	r2, r1
 8001c9c:	320d      	adds	r2, #13
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	3201      	adds	r2, #1
 8001ca2:	b2d1      	uxtb	r1, r2
 8001ca4:	4a95      	ldr	r2, [pc, #596]	; (8001efc <button_task+0x2c4>)
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	330d      	adds	r3, #13
 8001cac:	460a      	mov	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]

            // Check if the debounce counter has reached the threshold
            if (button_states[i].debounce_counter >= debounce_threshold) {
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	4a92      	ldr	r2, [pc, #584]	; (8001efc <button_task+0x2c4>)
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	330d      	adds	r3, #13
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	7bba      	ldrb	r2, [r7, #14]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	f200 8109 	bhi.w	8001ed6 <button_task+0x29e>

                // If the button has been released (state changed from pressed to not pressed)
                if (button_states[i].pressed) {
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4a8d      	ldr	r2, [pc, #564]	; (8001efc <button_task+0x2c4>)
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d069      	beq.n	8001da6 <button_task+0x16e>
                    // Trigger the release event callback
                    button_handlers[i].callback(BUTTON_EVENT_RELEASE);
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	4a86      	ldr	r2, [pc, #536]	; (8001ef0 <button_task+0x2b8>)
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2002      	movs	r0, #2
 8001cde:	4798      	blx	r3

                    // Reset cycle elapsed period value
                    button_states[i].cycle_time = 0;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4a86      	ldr	r2, [pc, #536]	; (8001efc <button_task+0x2c4>)
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3308      	adds	r3, #8
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

                    // Calculate the time since the button was last pressed
                    uint32_t time_since_press = HAL_GetTick() - button_states[i].press_time;
 8001cee:	f004 fd5b 	bl	80067a8 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4981      	ldr	r1, [pc, #516]	; (8001efc <button_task+0x2c4>)
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	603b      	str	r3, [r7, #0]

                    // Check if the button was pressed once and held longer than the long press time
                    if (button_states[i].press_count == 1 && time_since_press > button_handlers[i].long_press_time) {
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	4a7d      	ldr	r2, [pc, #500]	; (8001efc <button_task+0x2c4>)
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d117      	bne.n	8001d44 <button_task+0x10c>
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4a76      	ldr	r2, [pc, #472]	; (8001ef0 <button_task+0x2b8>)
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3308      	adds	r3, #8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d90e      	bls.n	8001d44 <button_task+0x10c>
                        // Trigger the long press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_LONG_PRESS);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	4a71      	ldr	r2, [pc, #452]	; (8001ef0 <button_task+0x2b8>)
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2003      	movs	r0, #3
 8001d32:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	4a71      	ldr	r2, [pc, #452]	; (8001efc <button_task+0x2c4>)
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e030      	b.n	8001da6 <button_task+0x16e>
                    }
                    // Check if the button was pressed once and released within the double press timeout
                    else if (button_states[i].press_count == 1 && time_since_press > double_press_timeout) {
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	; (8001efc <button_task+0x2c4>)
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d112      	bne.n	8001d7a <button_task+0x142>
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d90e      	bls.n	8001d7a <button_task+0x142>
                        // Trigger the short press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_SHORT_PRESS);
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	4a64      	ldr	r2, [pc, #400]	; (8001ef0 <button_task+0x2b8>)
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2001      	movs	r0, #1
 8001d68:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	4a63      	ldr	r2, [pc, #396]	; (8001efc <button_task+0x2c4>)
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	330c      	adds	r3, #12
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e015      	b.n	8001da6 <button_task+0x16e>
                    }
                    // Check if the button was pressed twice or more
                    else if (button_states[i].press_count >= 2) {
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	4a5f      	ldr	r2, [pc, #380]	; (8001efc <button_task+0x2c4>)
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	330c      	adds	r3, #12
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d90d      	bls.n	8001da6 <button_task+0x16e>
                        // Trigger the double press event callback and reset the press count
                        button_handlers[i].callback(BUTTON_EVENT_DOUBLE_PRESS);
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <button_task+0x2b8>)
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2004      	movs	r0, #4
 8001d96:	4798      	blx	r3
                        button_states[i].press_count = 0;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <button_task+0x2c4>)
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	330c      	adds	r3, #12
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
                    }
                }

                // Update button state and reset debounce counter
                button_states[i].pressed = current_state;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	4a54      	ldr	r2, [pc, #336]	; (8001efc <button_task+0x2c4>)
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	701a      	strb	r2, [r3, #0]
                button_states[i].debounce_counter = 0;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	4a51      	ldr	r2, [pc, #324]	; (8001efc <button_task+0x2c4>)
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	330d      	adds	r3, #13
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]

                // If the button has been pressed
                if (current_state) {
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <button_task+0x29e>
                    // Update press time, trigger the press event callback, and increment the press count
                    button_states[i].press_time = HAL_GetTick();
 8001dc8:	7bfc      	ldrb	r4, [r7, #15]
 8001dca:	f004 fced 	bl	80067a8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <button_task+0x2c4>)
 8001dd2:	0123      	lsls	r3, r4, #4
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	601a      	str	r2, [r3, #0]
                    button_handlers[i].callback(BUTTON_EVENT_DOWN);
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	4a44      	ldr	r2, [pc, #272]	; (8001ef0 <button_task+0x2b8>)
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2000      	movs	r0, #0
 8001de6:	4798      	blx	r3
                    button_states[i].press_count++;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	4944      	ldr	r1, [pc, #272]	; (8001efc <button_task+0x2c4>)
 8001dec:	011a      	lsls	r2, r3, #4
 8001dee:	440a      	add	r2, r1
 8001df0:	320c      	adds	r2, #12
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	3201      	adds	r2, #1
 8001df6:	b2d1      	uxtb	r1, r2
 8001df8:	4a40      	ldr	r2, [pc, #256]	; (8001efc <button_task+0x2c4>)
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	4413      	add	r3, r2
 8001dfe:	330c      	adds	r3, #12
 8001e00:	460a      	mov	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
                    // Save time of first cycle start
                    button_states[i].cycle_time = button_states[i].press_time;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	493c      	ldr	r1, [pc, #240]	; (8001efc <button_task+0x2c4>)
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	440a      	add	r2, r1
 8001e0e:	3204      	adds	r2, #4
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	493a      	ldr	r1, [pc, #232]	; (8001efc <button_task+0x2c4>)
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	3308      	adds	r3, #8
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e05b      	b.n	8001ed6 <button_task+0x29e>
                }
            }
        } else {
            // If the button was released after one press and double_press_timeout elapsed without press, trigger short_single_press
            if (!button_states[i].pressed && button_states[i].press_count == 1 && HAL_GetTick() - button_states[i].press_time > double_press_timeout) {
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	4a36      	ldr	r2, [pc, #216]	; (8001efc <button_task+0x2c4>)
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d122      	bne.n	8001e72 <button_task+0x23a>
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	; (8001efc <button_task+0x2c4>)
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	330c      	adds	r3, #12
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11a      	bne.n	8001e72 <button_task+0x23a>
 8001e3c:	f004 fcb4 	bl	80067a8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	492d      	ldr	r1, [pc, #180]	; (8001efc <button_task+0x2c4>)
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	440b      	add	r3, r1
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20d      	bcs.n	8001e72 <button_task+0x23a>
                // Trigger the short press event and reset the press count
                button_handlers[i].callback(BUTTON_EVENT_SHORT_PRESS);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <button_task+0x2b8>)
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2001      	movs	r0, #1
 8001e62:	4798      	blx	r3
                button_states[i].press_count = 0;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <button_task+0x2c4>)
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
            }
            // If the button is pressed and cycle period elapsed
            if (button_states[i].pressed && HAL_GetTick() - button_states[i].cycle_time >= button_handlers[i].cycle_period){
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <button_task+0x2c4>)
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d021      	beq.n	8001ec4 <button_task+0x28c>
 8001e80:	f004 fc92 	bl	80067a8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	491c      	ldr	r1, [pc, #112]	; (8001efc <button_task+0x2c4>)
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3308      	adds	r3, #8
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4916      	ldr	r1, [pc, #88]	; (8001ef0 <button_task+0x2b8>)
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d30f      	bcc.n	8001ec4 <button_task+0x28c>
            	// Trigger the cyclic hold event and reset the counter
                button_handlers[i].callback(BUTTON_EVENT_HOLD_CYCLIC);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <button_task+0x2b8>)
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2005      	movs	r0, #5
 8001eb0:	4798      	blx	r3
                button_states[i].cycle_time = HAL_GetTick();
 8001eb2:	7bfc      	ldrb	r4, [r7, #15]
 8001eb4:	f004 fc78 	bl	80067a8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	4910      	ldr	r1, [pc, #64]	; (8001efc <button_task+0x2c4>)
 8001ebc:	0123      	lsls	r3, r4, #4
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	601a      	str	r2, [r3, #0]
            }

            // Reset the debounce counter if the button state hasn't changed
            button_states[i].debounce_counter = 0;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <button_task+0x2c4>)
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	330d      	adds	r3, #13
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e000      	b.n	8001ed6 <button_task+0x29e>
			continue;
 8001ed4:	bf00      	nop
    for (uint8_t i = 0; i < NUM_BUTTONS; i++) {
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	f67f aeb4 	bls.w	8001c4c <button_task+0x14>
        }
    }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd90      	pop	{r4, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20002420 	.word	0x20002420
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000020 	.word	0x20000020
 8001efc:	200023c0 	.word	0x200023c0

08001f00 <initButtons>:
// initialization of all buttons
Button btn_BA, btn_BB, btn_BC, btn_B1, btn_B2, btn_B3;
GPIO_TypeDef* ports[BTN_NUMBER] = {BA_GPIO_Port, BB_GPIO_Port, BC_GPIO_Port, B1_GPIO_Port, B2_GPIO_Port, B3_GPIO_Port};
uint16_t pins[BTN_NUMBER] = {BA_Pin, BB_Pin, BC_Pin, B1_Pin, B2_Pin, B3_Pin};
Button* btnsPtrs[BTN_NUMBER] = {&btn_BA, &btn_BB, &btn_BC, &btn_B1, &btn_B2, &btn_B3};
void initButtons(Button* btns[BTN_NUMBER]){
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 8001f0c:	e0ad      	b.n	800206a <initButtons+0x16a>
		btns[i]->pin = pins[i];
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	440b      	add	r3, r1
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4959      	ldr	r1, [pc, #356]	; (8002080 <initButtons+0x180>)
 8001f1c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001f20:	809a      	strh	r2, [r3, #4]
		btns[i]->port = ports[i];
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	440b      	add	r3, r1
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4955      	ldr	r1, [pc, #340]	; (8002084 <initButtons+0x184>)
 8001f30:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f34:	601a      	str	r2, [r3, #0]
		btns[i]->prevStatus = 0;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	7993      	ldrb	r3, [r2, #6]
 8001f42:	f36f 0300 	bfc	r3, #0, #1
 8001f46:	7193      	strb	r3, [r2, #6]
		btns[i]->currStatus = 0;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	7993      	ldrb	r3, [r2, #6]
 8001f54:	f36f 0341 	bfc	r3, #1, #1
 8001f58:	7193      	strb	r3, [r2, #6]
		// flags & counters
		btns[i]->shortSingleOn = 0;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	71da      	strb	r2, [r3, #7]
		btns[i]->shortSingleOff = 0;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	721a      	strb	r2, [r3, #8]
		btns[i]->longSingleOn = 0;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2200      	movs	r2, #0
 8001f82:	725a      	strb	r2, [r3, #9]
		btns[i]->shortContinuous = 0;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	729a      	strb	r2, [r3, #10]
		btns[i]->longContinuous = 0;
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	72da      	strb	r2, [r3, #11]
		btns[i]->shortSingleHandled = 0;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	731a      	strb	r2, [r3, #12]
		btns[i]->longSingleHandled = 0;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	735a      	strb	r2, [r3, #13]
		btns[i]->releaseHandled = 0;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	739a      	strb	r2, [r3, #14]
		// handlers
		btns[i]->onSinglePressHandler = NULL;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
		btns[i]->onSingleLongPressHandler = NULL;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
		btns[i]->onContinuousShortPressHandler = NULL;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
		btns[i]->onContinuousLongPressHandler = NULL;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
		btns[i]->onReleaseHandler = NULL;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
		// new handlers
		btns[i]->onPress = NULL;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
		btns[i]->onRelease = NULL;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
		btns[i]->onShortPress = NULL;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
		btns[i]->onLongPress = NULL;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	639a      	str	r2, [r3, #56]	; 0x38
		btns[i]->onContinuousPress = NULL;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
		btns[i]->onRepeatedPress = NULL;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
		//
		i++;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	3301      	adds	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
	while(i < BTN_NUMBER){
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b05      	cmp	r3, #5
 800206e:	f67f af4e 	bls.w	8001f0e <initButtons+0xe>
	}
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000044 	.word	0x20000044
 8002084:	2000002c 	.word	0x2000002c

08002088 <resetButtonHandlers>:

void resetButtonHandlers(void){
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 8002092:	e044      	b.n	800211e <resetButtonHandlers+0x96>
		btnsPtrs[i]->onSinglePressHandler = NULL;
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4a27      	ldr	r2, [pc, #156]	; (8002134 <resetButtonHandlers+0xac>)
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
		btnsPtrs[i]->onSingleLongPressHandler = NULL;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <resetButtonHandlers+0xac>)
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
		btnsPtrs[i]->onContinuousShortPressHandler = NULL;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <resetButtonHandlers+0xac>)
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
		btnsPtrs[i]->onContinuousLongPressHandler = NULL;
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <resetButtonHandlers+0xac>)
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
		btnsPtrs[i]->onReleaseHandler = NULL;
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <resetButtonHandlers+0xac>)
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
		// new handlers
		btnsPtrs[i]->onPress = NULL;
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <resetButtonHandlers+0xac>)
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	2200      	movs	r2, #0
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
		btnsPtrs[i]->onRelease = NULL;
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <resetButtonHandlers+0xac>)
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
		btnsPtrs[i]->onShortPress = NULL;
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <resetButtonHandlers+0xac>)
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	2200      	movs	r2, #0
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
		btnsPtrs[i]->onLongPress = NULL;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4a0f      	ldr	r2, [pc, #60]	; (8002134 <resetButtonHandlers+0xac>)
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	2200      	movs	r2, #0
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
		btnsPtrs[i]->onContinuousPress = NULL;
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <resetButtonHandlers+0xac>)
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	2200      	movs	r2, #0
 800210a:	63da      	str	r2, [r3, #60]	; 0x3c
		btnsPtrs[i]->onRepeatedPress = NULL;
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <resetButtonHandlers+0xac>)
 8002110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

		i++;
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	3301      	adds	r3, #1
 800211c:	71fb      	strb	r3, [r7, #7]
	while(i < BTN_NUMBER){
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d9b7      	bls.n	8002094 <resetButtonHandlers+0xc>
	}
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000050 	.word	0x20000050

08002138 <readButton>:
void setPressSetting(uint16_t shortPress, uint16_t longPressPulse){
	pressSetting.shortTreshold = shortPress;
	pressSetting.longPulseTreshold = longPressPulse;
}

uint8_t readButton(Button* btn){
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	return ((HAL_GPIO_ReadPin(btn->port, btn->pin) == 0));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	889b      	ldrh	r3, [r3, #4]
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f004 fea0 	bl	8006e90 <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <scanButton>:

void scanButton(Button* btn){
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	uint8_t prevStatus = btn->currStatus;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	799b      	ldrb	r3, [r3, #6]
 8002170:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	73fb      	strb	r3, [r7, #15]
	btn->prevStatus = prevStatus;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	b2d9      	uxtb	r1, r3
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	7993      	ldrb	r3, [r2, #6]
 8002184:	f361 0300 	bfi	r3, r1, #0, #1
 8002188:	7193      	strb	r3, [r2, #6]
	uint8_t currStatus = readButton(btn);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffd4 	bl	8002138 <readButton>
 8002190:	4603      	mov	r3, r0
 8002192:	73bb      	strb	r3, [r7, #14]
	btn->currStatus = currStatus;
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	b2d9      	uxtb	r1, r3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	7993      	ldrb	r3, [r2, #6]
 80021a0:	f361 0341 	bfi	r3, r1, #1, #1
 80021a4:	7193      	strb	r3, [r2, #6]
	if(currStatus == prevStatus){
 80021a6:	7bba      	ldrb	r2, [r7, #14]
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d158      	bne.n	8002260 <scanButton+0xfc>
		// stable state pressed or released
		if(currStatus == 1){
 80021ae:	7bbb      	ldrb	r3, [r7, #14]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d14e      	bne.n	8002252 <scanButton+0xee>
			// stable pressed state
			btn->pressedFor++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ba:	3301      	adds	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			btn->shortContinuous++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7a9b      	ldrb	r3, [r3, #10]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	729a      	strb	r2, [r3, #10]
			if(btn->shortContinuous >= 10000) btn->shortContinuous = pressSetting.shortTreshold;
			// short continuous press handler
			// ... 																<------ continuous press handler
			if(btn->onContinuousShortPressHandler != NULL){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <scanButton+0x7c>
				btn->onContinuousShortPressHandler(NULL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2000      	movs	r0, #0
 80021de:	4798      	blx	r3
			}
			// press longer then threshold
			if(btn->shortContinuous >= pressSetting.shortTreshold){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7a9b      	ldrb	r3, [r3, #10]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <scanButton+0x17c>)
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d32d      	bcc.n	800224a <scanButton+0xe6>
				// single long press handler
				if(btn->longSingleHandled == 0){
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7b5b      	ldrb	r3, [r3, #13]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d110      	bne.n	8002218 <scanButton+0xb4>
					// stuff to do once when long pressed						<------ single hold handler
					if(btn->onSingleLongPressHandler != NULL){
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <scanButton+0xa2>
						btn->onSingleLongPressHandler(NULL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2000      	movs	r0, #0
 8002204:	4798      	blx	r3
					}
					btn->longSingleOn++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7a5b      	ldrb	r3, [r3, #9]
 800220a:	3301      	adds	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	725a      	strb	r2, [r3, #9]
					// set handled flag up
					btn->longSingleHandled = 1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	735a      	strb	r2, [r3, #13]
				}
				if(btn->shortContinuous%pressSetting.longPulseTreshold == 0){
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7a9b      	ldrb	r3, [r3, #10]
 800221c:	4a30      	ldr	r2, [pc, #192]	; (80022e0 <scanButton+0x17c>)
 800221e:	8852      	ldrh	r2, [r2, #2]
 8002220:	fb93 f1f2 	sdiv	r1, r3, r2
 8002224:	fb01 f202 	mul.w	r2, r1, r2
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <scanButton+0xe6>
					//continuous long action handler							<------ continuous hold handler
					if(btn->onContinuousLongPressHandler != NULL){
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <scanButton+0xda>
						btn->onContinuousLongPressHandler(NULL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2000      	movs	r0, #0
 800223c:	4798      	blx	r3
					}
					btn->longContinuous++;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7adb      	ldrb	r3, [r3, #11]
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	72da      	strb	r2, [r3, #11]
					if(btn->longContinuous >= 1000) btn->longContinuous = 1;
				}
			}
			// clear release handled flag: new release action will be possible
			btn->releaseHandled = 0;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	739a      	strb	r2, [r3, #14]
				// set handled flag
				btn->releaseHandled = 1;
			}
		}
	}
}
 8002250:	e042      	b.n	80022d8 <scanButton+0x174>
			btn->shortSingleHandled = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	731a      	strb	r2, [r3, #12]
			btn->longSingleHandled = 0;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	735a      	strb	r2, [r3, #13]
}
 800225e:	e03b      	b.n	80022d8 <scanButton+0x174>
		if(currStatus == 1){
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d11f      	bne.n	80022a6 <scanButton+0x142>
			btn->shortContinuous = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	729a      	strb	r2, [r3, #10]
			btn->longContinuous = 0;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	72da      	strb	r2, [r3, #11]
			if(btn->shortSingleHandled == 0){
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7b1b      	ldrb	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d12e      	bne.n	80022d8 <scanButton+0x174>
				if(btn->onSinglePressHandler != NULL){
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <scanButton+0x12e>
					pulseVib(5, 75);
 8002282:	214b      	movs	r1, #75	; 0x4b
 8002284:	2005      	movs	r0, #5
 8002286:	f003 f88d 	bl	80053a4 <pulseVib>
					btn->onSinglePressHandler(NULL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2000      	movs	r0, #0
 8002290:	4798      	blx	r3
				btn->shortSingleOn++;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	79db      	ldrb	r3, [r3, #7]
 8002296:	3301      	adds	r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	71da      	strb	r2, [r3, #7]
				btn->shortSingleHandled = 1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	731a      	strb	r2, [r3, #12]
}
 80022a4:	e018      	b.n	80022d8 <scanButton+0x174>
			if(btn->releaseHandled == 0){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7b9b      	ldrb	r3, [r3, #14]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d114      	bne.n	80022d8 <scanButton+0x174>
				if(btn->onReleaseHandler != NULL){
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <scanButton+0x15a>
					btn->onReleaseHandler(NULL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2000      	movs	r0, #0
 80022bc:	4798      	blx	r3
				btn->pressedFor = 0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				btn->shortSingleOff++;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7a1b      	ldrb	r3, [r3, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	721a      	strb	r2, [r3, #8]
				btn->releaseHandled = 1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	739a      	strb	r2, [r3, #14]
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000068 	.word	0x20000068

080022e4 <scanButtons>:


void scanButtons(Button* btns[6]){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 80022f0:	e00a      	b.n	8002308 <scanButtons+0x24>
		scanButton(btns[i]);
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <scanButton>
		i++;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
	while(i < 6){
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d9f1      	bls.n	80022f2 <scanButtons+0xe>
	}
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <isTimerRunning>:
 *      Author: wojch
 */

#include "countdownTimer.h"

uint8_t isTimerRunning(countdown_t *cnt){
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	return cnt->isRunning;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	791b      	ldrb	r3, [r3, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <pauseTimer>:
	cnt->remainingSec = seconds;
}
void startTimer(countdown_t *cnt){
	cnt->isRunning = 1;
}
void pauseTimer(countdown_t *cnt){
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	cnt->isRunning = 0;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	711a      	strb	r2, [r3, #4]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	4b72      	ldr	r3, [pc, #456]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a71      	ldr	r2, [pc, #452]	; (8002530 <MX_GPIO_Init+0x1e4>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	4b6b      	ldr	r3, [pc, #428]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a6a      	ldr	r2, [pc, #424]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b68      	ldr	r3, [pc, #416]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	4b64      	ldr	r3, [pc, #400]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a63      	ldr	r2, [pc, #396]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b61      	ldr	r3, [pc, #388]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b56      	ldr	r3, [pc, #344]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a55      	ldr	r2, [pc, #340]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a4e      	ldr	r2, [pc, #312]	; (8002530 <MX_GPIO_Init+0x1e4>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b48      	ldr	r3, [pc, #288]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a47      	ldr	r2, [pc, #284]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <MX_GPIO_Init+0x1e4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b41      	ldr	r3, [pc, #260]	; (8002530 <MX_GPIO_Init+0x1e4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <MX_GPIO_Init+0x1e4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	483b      	ldr	r0, [pc, #236]	; (8002534 <MX_GPIO_Init+0x1e8>)
 8002448:	f004 fd3a 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002452:	4839      	ldr	r0, [pc, #228]	; (8002538 <MX_GPIO_Init+0x1ec>)
 8002454:	f004 fd34 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	4837      	ldr	r0, [pc, #220]	; (800253c <MX_GPIO_Init+0x1f0>)
 800245e:	f004 fd2f 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002468:	4835      	ldr	r0, [pc, #212]	; (8002540 <MX_GPIO_Init+0x1f4>)
 800246a:	f004 fd29 	bl	8006ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <MX_GPIO_Init+0x1e8>)
 8002486:	f004 fb57 	bl	8006b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800248a:	f244 0381 	movw	r3, #16513	; 0x4081
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	4825      	ldr	r0, [pc, #148]	; (8002538 <MX_GPIO_Init+0x1ec>)
 80024a4:	f004 fb48 	bl	8006b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = BA_Pin|BB_Pin|B1_Pin|BC_Pin
 80024a8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024ae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	4619      	mov	r1, r3
 80024be:	4821      	ldr	r0, [pc, #132]	; (8002544 <MX_GPIO_Init+0x1f8>)
 80024c0:	f004 fb3a 	bl	8006b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d8:	4619      	mov	r1, r3
 80024da:	4818      	ldr	r0, [pc, #96]	; (800253c <MX_GPIO_Init+0x1f0>)
 80024dc:	f004 fb2c 	bl	8006b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4812      	ldr	r0, [pc, #72]	; (800253c <MX_GPIO_Init+0x1f0>)
 80024f4:	f004 fb20 	bl	8006b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80024f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250e:	4619      	mov	r1, r3
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <MX_GPIO_Init+0x1f4>)
 8002512:	f004 fb11 	bl	8006b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2028      	movs	r0, #40	; 0x28
 800251c:	f004 fa4f 	bl	80069be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002520:	2028      	movs	r0, #40	; 0x28
 8002522:	f004 fa68 	bl	80069f6 <HAL_NVIC_EnableIRQ>

}
 8002526:	bf00      	nop
 8002528:	3738      	adds	r7, #56	; 0x38
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40021800 	.word	0x40021800
 8002540:	40020800 	.word	0x40020800
 8002544:	40021000 	.word	0x40021000

08002548 <getDataFromUart>:
#include <string.h>
#include "gps2.h"

char gpsBuffer[GPS_BUFFER_SIZE] = {0};

void getDataFromUart(gpsDevice_t* gps){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
//	  HAL_UART_Receive(&huart6, &gps->buffer, GPS_BUFFER_SIZE, 1000);
////	  HAL_UART_Receive(&huart6, &gpsModule.buffer, 600, 1000);
	HAL_UART_Receive_DMA(&huart6, &gps->buffer, GPS_BUFFER_SIZE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002558:	4619      	mov	r1, r3
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <getDataFromUart+0x20>)
 800255c:	f009 f87f 	bl	800b65e <HAL_UART_Receive_DMA>

}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20005bc4 	.word	0x20005bc4

0800256c <initGps>:

gpsDevice_t initGps(UART_HandleTypeDef* uartPort){
 800256c:	b580      	push	{r7, lr}
 800256e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002572:	af00      	add	r7, sp, #0
 8002574:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002578:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800257c:	6018      	str	r0, [r3, #0]
 800257e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002582:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002586:	6019      	str	r1, [r3, #0]
	gpsDevice_t gpsModule;
	gpsModule.uartPort = uartPort;
 8002588:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800258c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002590:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8002594:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	601a      	str	r2, [r3, #0]
	strncpy(&gpsModule.buffer, 0, GPS_BUFFER_SIZE);
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	3304      	adds	r3, #4
 80025a2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00e f92c 	bl	8010806 <strncpy>
	gpsModule.getData = &getDataFromUart;
 80025ae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <initGps+0x90>)
 80025b8:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	gpsModule.isReady = 1;
 80025bc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
	return(gpsModule);
 80025ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025ce:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f44f 7319 	mov.w	r3, #612	; 0x264
 80025e4:	461a      	mov	r2, r3
 80025e6:	f00d f9e1 	bl	800f9ac <memcpy>
}
 80025ea:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80025ee:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08002549 	.word	0x08002549

08002600 <tickTimAAB>:

uint8_t isModuleSet = 0;

uint8_t isScrollbarEnabled = 0;
timer_T* scrollerTimer = NULL;
void tickTimAAB(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	tickTimer(scrollerTimer);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <tickTimAAB+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f004 f81e 	bl	800664a <tickTimer>
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20002634 	.word	0x20002634

08002618 <showScrollbar>:
void showScrollbar(void){
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af04      	add	r7, sp, #16
	uint16_t x = 390;
 800261e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002622:	81fb      	strh	r3, [r7, #14]
	uint8_t y = 20;
 8002624:	2314      	movs	r3, #20
 8002626:	737b      	strb	r3, [r7, #13]
	uint8_t h_margin = 2;
 8002628:	2302      	movs	r3, #2
 800262a:	733b      	strb	r3, [r7, #12]
	uint8_t v_margin = 2;
 800262c:	2302      	movs	r3, #2
 800262e:	72fb      	strb	r3, [r7, #11]
	uint8_t b_margin = 4;
 8002630:	2304      	movs	r3, #4
 8002632:	72bb      	strb	r3, [r7, #10]
	uint8_t width = 9;
 8002634:	2309      	movs	r3, #9
 8002636:	727b      	strb	r3, [r7, #9]
	uint8_t height = 200;
 8002638:	23c8      	movs	r3, #200	; 0xc8
 800263a:	723b      	strb	r3, [r7, #8]
	uint8_t b_height = (height-2*v_margin-(MENU_ITEM_NUM-1)*b_margin)/MENU_ITEM_NUM;
 800263c:	7a3a      	ldrb	r2, [r7, #8]
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	7abb      	ldrb	r3, [r7, #10]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	4a30      	ldr	r2, [pc, #192]	; (800270c <showScrollbar+0xf4>)
 800264c:	fb82 1203 	smull	r1, r2, r2, r3
 8002650:	17db      	asrs	r3, r3, #31
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	71fb      	strb	r3, [r7, #7]

	lcdRoundedRect2(x, x+width-1, y, y+height, 0, LCD_RECT_PATTERN_FILL, 0,3);
 8002656:	89f8      	ldrh	r0, [r7, #14]
 8002658:	89fa      	ldrh	r2, [r7, #14]
 800265a:	7a7b      	ldrb	r3, [r7, #9]
 800265c:	4413      	add	r3, r2
 800265e:	1e59      	subs	r1, r3, #1
 8002660:	7b7c      	ldrb	r4, [r7, #13]
 8002662:	7b7a      	ldrb	r2, [r7, #13]
 8002664:	7a3b      	ldrb	r3, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	2203      	movs	r2, #3
 800266a:	9203      	str	r2, [sp, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	9202      	str	r2, [sp, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	9201      	str	r2, [sp, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	9200      	str	r2, [sp, #0]
 8002678:	4622      	mov	r2, r4
 800267a:	f001 f998 	bl	80039ae <lcdRoundedRect2>
	lcdRoundedRect2(x, x+width-1, y, y+height, 1, LCD_RECT_PATTERN_CLEAR, 1, 3);
 800267e:	89f8      	ldrh	r0, [r7, #14]
 8002680:	89fa      	ldrh	r2, [r7, #14]
 8002682:	7a7b      	ldrb	r3, [r7, #9]
 8002684:	4413      	add	r3, r2
 8002686:	1e59      	subs	r1, r3, #1
 8002688:	7b7c      	ldrb	r4, [r7, #13]
 800268a:	7b7a      	ldrb	r2, [r7, #13]
 800268c:	7a3b      	ldrb	r3, [r7, #8]
 800268e:	4413      	add	r3, r2
 8002690:	2203      	movs	r2, #3
 8002692:	9203      	str	r2, [sp, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	9202      	str	r2, [sp, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	9200      	str	r2, [sp, #0]
 80026a0:	4622      	mov	r2, r4
 80026a2:	f001 f984 	bl	80039ae <lcdRoundedRect2>
	lcdRoundedRect2(x+h_margin, x+width-1-h_margin, y+1+v_margin+(b_height+b_margin)*position, y+1+v_margin+b_height+(b_height+b_margin)*position, 1, LCD_RECT_PATTERN_FILL, 1, 1);
 80026a6:	89fa      	ldrh	r2, [r7, #14]
 80026a8:	7b3b      	ldrb	r3, [r7, #12]
 80026aa:	18d0      	adds	r0, r2, r3
 80026ac:	89fa      	ldrh	r2, [r7, #14]
 80026ae:	7a7b      	ldrb	r3, [r7, #9]
 80026b0:	4413      	add	r3, r2
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	7b3b      	ldrb	r3, [r7, #12]
 80026b6:	1ad4      	subs	r4, r2, r3
 80026b8:	7b7b      	ldrb	r3, [r7, #13]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	441a      	add	r2, r3
 80026c0:	79f9      	ldrb	r1, [r7, #7]
 80026c2:	7abb      	ldrb	r3, [r7, #10]
 80026c4:	440b      	add	r3, r1
 80026c6:	4912      	ldr	r1, [pc, #72]	; (8002710 <showScrollbar+0xf8>)
 80026c8:	7809      	ldrb	r1, [r1, #0]
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	18d5      	adds	r5, r2, r3
 80026d0:	7b7b      	ldrb	r3, [r7, #13]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	441a      	add	r2, r3
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	441a      	add	r2, r3
 80026dc:	79f9      	ldrb	r1, [r7, #7]
 80026de:	7abb      	ldrb	r3, [r7, #10]
 80026e0:	440b      	add	r3, r1
 80026e2:	490b      	ldr	r1, [pc, #44]	; (8002710 <showScrollbar+0xf8>)
 80026e4:	7809      	ldrb	r1, [r1, #0]
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	2201      	movs	r2, #1
 80026ee:	9203      	str	r2, [sp, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	2201      	movs	r2, #1
 80026f6:	9201      	str	r2, [sp, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	9200      	str	r2, [sp, #0]
 80026fc:	462a      	mov	r2, r5
 80026fe:	4621      	mov	r1, r4
 8002700:	f001 f955 	bl	80039ae <lcdRoundedRect2>
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*0, y+1+v_margin+b_height+(b_height+b_margin)*0, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*1, y+1+v_margin+b_height+(b_height+b_margin)*1, 1, LCD_RECT_PATTERN_FILL, 0, 1);
//	lcdRoundedRect2(x+h_margin, x+width-h_margin, y+1+v_margin+(b_height+b_margin)*2, y+1+v_margin+b_height+(b_height+b_margin)*2, 1, LCD_RECT_PATTERN_FILL, 0, 1);
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	55555556 	.word	0x55555556
 8002710:	20002630 	.word	0x20002630

08002714 <disableScrollbar>:
void disableScrollbar(void){
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	isScrollbarEnabled = 0;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <disableScrollbar+0x14>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	20002632 	.word	0x20002632

0800272c <enableScrollbar>:
void enableScrollbar(void){
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	scrollerTimer = createTimer();
 8002730:	f003 ff4b 	bl	80065ca <createTimer>
 8002734:	4603      	mov	r3, r0
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <enableScrollbar+0x30>)
 8002738:	6013      	str	r3, [r2, #0]
	setTimerAAA(scrollerTimer, 2, &disableScrollbar);
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <enableScrollbar+0x30>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <enableScrollbar+0x34>)
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 ff51 	bl	80065ea <setTimerAAA>
	runTimerAAA(scrollerTimer);
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <enableScrollbar+0x30>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 ff66 	bl	800661e <runTimerAAA>
	isScrollbarEnabled = 1;
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <enableScrollbar+0x38>)
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20002634 	.word	0x20002634
 8002760:	08002715 	.word	0x08002715
 8002764:	20002632 	.word	0x20002632

08002768 <prevPos>:

void prevPos(void){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	enableScrollbar();
 800276c:	f7ff ffde 	bl	800272c <enableScrollbar>
	if(position>0){
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <prevPos+0x28>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <prevPos+0x1e>
		position--;
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <prevPos+0x28>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <prevPos+0x28>)
 8002782:	701a      	strb	r2, [r3, #0]
	} else {
		position=MENU_ITEM_NUM-1;
	}
}
 8002784:	e002      	b.n	800278c <prevPos+0x24>
		position=MENU_ITEM_NUM-1;
 8002786:	4b02      	ldr	r3, [pc, #8]	; (8002790 <prevPos+0x28>)
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20002630 	.word	0x20002630

08002794 <nextPos>:

void nextPos(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	enableScrollbar();
 8002798:	f7ff ffc8 	bl	800272c <enableScrollbar>
	if(position<(MENU_ITEM_NUM-1)){
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <nextPos+0x28>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d806      	bhi.n	80027b2 <nextPos+0x1e>
		position++;
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <nextPos+0x28>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <nextPos+0x28>)
 80027ae:	701a      	strb	r2, [r3, #0]
	} else {
		position=0;
	}
}
 80027b0:	e002      	b.n	80027b8 <nextPos+0x24>
		position=0;
 80027b2:	4b02      	ldr	r3, [pc, #8]	; (80027bc <nextPos+0x28>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20002630 	.word	0x20002630

080027c0 <nextScreen>:

void nextScreen(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	nextPos();
 80027c4:	f7ff ffe6 	bl	8002794 <nextPos>
	applySelectedScreen();
 80027c8:	f000 f816 	bl	80027f8 <applySelectedScreen>
}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <prevScreen>:
void prevScreen(void){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	prevPos();
 80027d4:	f7ff ffc8 	bl	8002768 <prevPos>
	applySelectedScreen();
 80027d8:	f000 f80e 	bl	80027f8 <applySelectedScreen>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <resetPos>:
void resetPos(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	position=0;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <resetPos+0x14>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
	applySelectedScreen();
 80027ea:	f000 f805 	bl	80027f8 <applySelectedScreen>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20002630 	.word	0x20002630

080027f8 <applySelectedScreen>:
	moduleSetupPtr = module->setup;
	moduleMainPtr = module->main;
	selectScreen();
}

void applySelectedScreen(void){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
//	moduleDescPtr = menuItems[position].description;
	moduleSetupPtr = menuItems[position].setup;
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <applySelectedScreen+0x40>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	4a0e      	ldr	r2, [pc, #56]	; (800283c <applySelectedScreen+0x44>)
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	3320      	adds	r3, #32
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <applySelectedScreen+0x48>)
 8002814:	6013      	str	r3, [r2, #0]
	moduleMainPtr = menuItems[position].main;
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <applySelectedScreen+0x40>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <applySelectedScreen+0x44>)
 800281e:	460b      	mov	r3, r1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	3324      	adds	r3, #36	; 0x24
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a05      	ldr	r2, [pc, #20]	; (8002844 <applySelectedScreen+0x4c>)
 800282e:	6013      	str	r3, [r2, #0]
	selectScreen();
 8002830:	f000 f80a 	bl	8002848 <selectScreen>
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20002630 	.word	0x20002630
 800283c:	08013ec4 	.word	0x08013ec4
 8002840:	20000070 	.word	0x20000070
 8002844:	2000006c 	.word	0x2000006c

08002848 <selectScreen>:

void selectScreen(void){
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
//	lcdClearBuffer();
	resetButtonHandlers();
 800284c:	f7ff fc1c 	bl	8002088 <resetButtonHandlers>
	isModuleSet = 0;
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <selectScreen+0x1c>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
	currentModulePtr = moduleMainPtr;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <selectScreen+0x20>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <selectScreen+0x24>)
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20002631 	.word	0x20002631
 8002868:	2000006c 	.word	0x2000006c
 800286c:	20000074 	.word	0x20000074

08002870 <showGui>:
// function to display alert message over current gui
//void showAlert(){
//
//}

void showGui(void){
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	if(isModuleSet == 0){
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <showGui+0x38>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <showGui+0x18>
		moduleSetupPtr();
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <showGui+0x3c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4798      	blx	r3
		isModuleSet = 1;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <showGui+0x38>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
	}
	if(currentModulePtr != NULL) currentModulePtr();
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <showGui+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <showGui+0x26>
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <showGui+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4798      	blx	r3
	if(isScrollbarEnabled) showScrollbar();
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <showGui+0x44>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <showGui+0x32>
 800289e:	f7ff febb 	bl	8002618 <showScrollbar>
//	lcdRefresh();
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20002631 	.word	0x20002631
 80028ac:	20000070 	.word	0x20000070
 80028b0:	20000074 	.word	0x20000074
 80028b4:	20002632 	.word	0x20002632

080028b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <MX_I2C1_Init+0x74>)
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <MX_I2C1_Init+0x78>)
 80028c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <MX_I2C1_Init+0x74>)
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <MX_I2C1_Init+0x7c>)
 80028c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <MX_I2C1_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <MX_I2C1_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <MX_I2C1_Init+0x74>)
 80028d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <MX_I2C1_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <MX_I2C1_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_I2C1_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <MX_I2C1_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028f4:	480d      	ldr	r0, [pc, #52]	; (800292c <MX_I2C1_Init+0x74>)
 80028f6:	f004 fb3b 	bl	8006f70 <HAL_I2C_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002900:	f001 fd86 	bl	8004410 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002904:	2100      	movs	r1, #0
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <MX_I2C1_Init+0x74>)
 8002908:	f005 faf1 	bl	8007eee <HAL_I2CEx_ConfigAnalogFilter>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002912:	f001 fd7d 	bl	8004410 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002916:	2100      	movs	r1, #0
 8002918:	4804      	ldr	r0, [pc, #16]	; (800292c <MX_I2C1_Init+0x74>)
 800291a:	f005 fb24 	bl	8007f66 <HAL_I2CEx_ConfigDigitalFilter>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002924:	f001 fd74 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20002638 	.word	0x20002638
 8002930:	40005400 	.word	0x40005400
 8002934:	000186a0 	.word	0x000186a0

08002938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_I2C_MspInit+0x84>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12c      	bne.n	80029b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002976:	f44f 7340 	mov.w	r3, #768	; 0x300
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800297c:	2312      	movs	r3, #18
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002988:	2304      	movs	r3, #4
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <HAL_I2C_MspInit+0x8c>)
 8002994:	f004 f8d0 	bl	8006b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 80029a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_I2C_MspInit+0x88>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40005400 	.word	0x40005400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020400 	.word	0x40020400

080029c8 <reverse_uint8>:
void lcdClear(void){
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_SET);
  HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)clearCmd, 2, 150);
  HAL_GPIO_WritePin(SMLCD_SCS_PORT, SMLCD_SCS_PIN, GPIO_PIN_RESET);
}
uint8_t reverse_uint8(uint8_t re){
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
//	return(uint8_t)(__RBIT(re) >> 24);
	uint8_t times = 7;
 80029d2:	2307      	movs	r3, #7
 80029d4:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	737b      	strb	r3, [r7, #13]
	uint8_t result = re & 1;
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	73bb      	strb	r3, [r7, #14]
	while(times > 0){
 80029e2:	e010      	b.n	8002a06 <reverse_uint8+0x3e>
		result = result << 1;
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	73bb      	strb	r3, [r7, #14]
		re = re >> 1;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	71fb      	strb	r3, [r7, #7]
		tmp = re & 1;
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	737b      	strb	r3, [r7, #13]
		result |= tmp;
 80029f8:	7bba      	ldrb	r2, [r7, #14]
 80029fa:	7b7b      	ldrb	r3, [r7, #13]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	73bb      	strb	r3, [r7, #14]
		times--;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
	while(times > 0){
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1eb      	bne.n	80029e4 <reverse_uint8+0x1c>
	}
	return((uint8_t)result);
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <lcdClearBuffer>:

static uint8_t lcdBuffer[(SCR_W * SCR_H) >> 3] = {0x00};
static uint8_t allowUpdate = 1;
uint8_t lineAddress1[2] = {0x80, 0x00};

void lcdClearBuffer(){
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
	updateSetting(0);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 f824 	bl	8002a70 <updateSetting>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	e014      	b.n	8002a58 <lcdClearBuffer+0x3c>
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002a2e:	2300      	movs	r3, #0
 8002a30:	80bb      	strh	r3, [r7, #4]
 8002a32:	e00b      	b.n	8002a4c <lcdClearBuffer+0x30>
			lcdBuffer[i*SCR_W/8+j] = 0xFF;
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2232      	movs	r2, #50	; 0x32
 8002a38:	fb03 f202 	mul.w	r2, r3, r2
 8002a3c:	88bb      	ldrh	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <lcdClearBuffer+0x50>)
 8002a42:	21ff      	movs	r1, #255	; 0xff
 8002a44:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < SCR_W/8; j++){
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	80bb      	strh	r3, [r7, #4]
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	2b31      	cmp	r3, #49	; 0x31
 8002a50:	d9f0      	bls.n	8002a34 <lcdClearBuffer+0x18>
	for(uint8_t i = 0; i < SCR_H; i++){
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	3301      	adds	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2bef      	cmp	r3, #239	; 0xef
 8002a5c:	d9e7      	bls.n	8002a2e <lcdClearBuffer+0x12>
//			} else {
//				lcdBuffer[i*SCR_W/8+j] = 0x55;
//			}
		}
	}
	updateSetting(1);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f000 f806 	bl	8002a70 <updateSetting>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20002690 	.word	0x20002690

08002a70 <updateSetting>:

void updateSetting(uint8_t state){
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	allowUpdate = state;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <updateSetting+0x1c>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	7013      	strb	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	20000078 	.word	0x20000078

08002a90 <lcdPutChar>:
		break;
	}
	lcdBuffer[y*SCR_W/8 + xBlock] = finalVal;
}

void lcdPutChar(uint16_t x, uint8_t y, char chr, const Font_TypeDef *font){
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4603      	mov	r3, r0
 8002a9a:	80fb      	strh	r3, [r7, #6]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	717b      	strb	r3, [r7, #5]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	713b      	strb	r3, [r7, #4]
	// If the specified character code is out of bounds should substitute the code of the "unknown" character
	if ((chr < font->font_MinChar) || (chr > font->font_MaxChar)) {
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	795b      	ldrb	r3, [r3, #5]
 8002aa8:	793a      	ldrb	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d304      	bcc.n	8002ab8 <lcdPutChar+0x28>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	799b      	ldrb	r3, [r3, #6]
 8002ab2:	793a      	ldrb	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d902      	bls.n	8002abe <lcdPutChar+0x2e>
		chr = font->font_UnknownChar;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	79db      	ldrb	r3, [r3, #7]
 8002abc:	713b      	strb	r3, [r7, #4]
	}
	uint8_t offset = x % 8;
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	753b      	strb	r3, [r7, #20]
	uint8_t xBlock = x >> 3;
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	08db      	lsrs	r3, r3, #3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	74fb      	strb	r3, [r7, #19]
	uint8_t bytesInLine = (font->font_BPC/font->font_Height);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	885b      	ldrh	r3, [r3, #2]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ade:	74bb      	strb	r3, [r7, #18]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]
 8002ae4:	e09b      	b.n	8002c1e <lcdPutChar+0x18e>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002ae6:	797a      	ldrb	r2, [r7, #5]
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4413      	add	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	0091      	lsls	r1, r2, #2
 8002af8:	461a      	mov	r2, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	4413      	add	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	823b      	strh	r3, [r7, #16]
		uint32_t characterLoc = (chr-(font->font_MinChar))*(font->font_BPC)+j*bytesInLine;
 8002b0a:	793b      	ldrb	r3, [r7, #4]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	7952      	ldrb	r2, [r2, #5]
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	8852      	ldrh	r2, [r2, #2]
 8002b16:	fb03 f202 	mul.w	r2, r3, r2
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	7cb9      	ldrb	r1, [r7, #18]
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
		uint8_t dataBlock = (font->font_Data[characterLoc]) >> offset;
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	7d3b      	ldrb	r3, [r7, #20]
 8002b34:	fa42 f303 	asr.w	r3, r2, r3
 8002b38:	75bb      	strb	r3, [r7, #22]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002b3a:	8a3b      	ldrh	r3, [r7, #16]
 8002b3c:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <lcdPutChar+0x1a8>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	b25a      	sxtb	r2, r3
 8002b42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	b25a      	sxtb	r2, r3
 8002b4e:	8a3b      	ldrh	r3, [r7, #16]
 8002b50:	b2d1      	uxtb	r1, r2
 8002b52:	4a39      	ldr	r2, [pc, #228]	; (8002c38 <lcdPutChar+0x1a8>)
 8002b54:	54d1      	strb	r1, [r2, r3]
		dataBlock = (font->font_Data[characterLoc] & (0xFF >> (8 - offset)));
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	7d3b      	ldrb	r3, [r7, #20]
 8002b64:	f1c3 0308 	rsb	r3, r3, #8
 8002b68:	21ff      	movs	r1, #255	; 0xff
 8002b6a:	fa41 f303 	asr.w	r3, r1, r3
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	4013      	ands	r3, r2
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002b76:	2301      	movs	r3, #1
 8002b78:	757b      	strb	r3, [r7, #21]
 8002b7a:	e029      	b.n	8002bd0 <lcdPutChar+0x140>
			uint8_t newDataBlock = font->font_Data[characterLoc + i];
 8002b7c:	7d7a      	ldrb	r2, [r7, #21]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	7a1b      	ldrb	r3, [r3, #8]
 8002b88:	72fb      	strb	r3, [r7, #11]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002b8a:	8a3a      	ldrh	r2, [r7, #16]
 8002b8c:	7d7b      	ldrb	r3, [r7, #21]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <lcdPutChar+0x1a8>)
 8002b92:	5cd3      	ldrb	r3, [r2, r3]
 8002b94:	b25a      	sxtb	r2, r3
 8002b96:	7db9      	ldrb	r1, [r7, #22]
 8002b98:	7d3b      	ldrb	r3, [r7, #20]
 8002b9a:	f1c3 0308 	rsb	r3, r3, #8
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	b259      	sxtb	r1, r3
 8002ba4:	7af8      	ldrb	r0, [r7, #11]
 8002ba6:	7d3b      	ldrb	r3, [r7, #20]
 8002ba8:	fa40 f303 	asr.w	r3, r0, r3
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	b259      	sxtb	r1, r3
 8002bba:	8a3a      	ldrh	r2, [r7, #16]
 8002bbc:	7d7b      	ldrb	r3, [r7, #21]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2c9      	uxtb	r1, r1
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <lcdPutChar+0x1a8>)
 8002bc4:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (font->font_Width + 7)>>3; i++){
 8002bca:	7d7b      	ldrb	r3, [r7, #21]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	757b      	strb	r3, [r7, #21]
 8002bd0:	7d7a      	ldrb	r2, [r7, #21]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3307      	adds	r3, #7
 8002bd8:	10db      	asrs	r3, r3, #3
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbce      	blt.n	8002b7c <lcdPutChar+0xec>
		}
		lcdBuffer[bufferLoc + ((font->font_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002bde:	8a3a      	ldrh	r2, [r7, #16]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	3307      	adds	r3, #7
 8002be6:	10db      	asrs	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <lcdPutChar+0x1a8>)
 8002bec:	5cd3      	ldrb	r3, [r2, r3]
 8002bee:	b25a      	sxtb	r2, r3
 8002bf0:	7db9      	ldrb	r1, [r7, #22]
 8002bf2:	7d3b      	ldrb	r3, [r7, #20]
 8002bf4:	f1c3 0308 	rsb	r3, r3, #8
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	b25b      	sxtb	r3, r3
 8002c02:	4013      	ands	r3, r2
 8002c04:	b259      	sxtb	r1, r3
 8002c06:	8a3a      	ldrh	r2, [r7, #16]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3307      	adds	r3, #7
 8002c0e:	10db      	asrs	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	b2c9      	uxtb	r1, r1
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <lcdPutChar+0x1a8>)
 8002c16:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (font->font_Height); j++){
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	7dfa      	ldrb	r2, [r7, #23]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f4ff af5e 	bcc.w	8002ae6 <lcdPutChar+0x56>
	}
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20002690 	.word	0x20002690

08002c3c <lcdPutIcon>:

void lcdPutIcon(uint16_t x, uint8_t y, const Icon_TypeDef *icon){
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	603a      	str	r2, [r7, #0]
 8002c46:	80fb      	strh	r3, [r7, #6]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	717b      	strb	r3, [r7, #5]
	uint8_t icon_Width = icon->icon_Width;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	773b      	strb	r3, [r7, #28]
	uint8_t icon_Height = icon->icon_Height;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	76fb      	strb	r3, [r7, #27]
	uint8_t* icon_Data = &icon->icon_Data;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3305      	adds	r3, #5
 8002c5c:	617b      	str	r3, [r7, #20]
	uint8_t offset = x % 8;
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	74fb      	strb	r3, [r7, #19]
	uint8_t xBlock = x >> 3;
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	74bb      	strb	r3, [r7, #18]
	uint8_t bytesInLine = (icon->icon_BPC/icon_Height);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	885b      	ldrh	r3, [r3, #2]
 8002c74:	461a      	mov	r2, r3
 8002c76:	7efb      	ldrb	r3, [r7, #27]
 8002c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c7c:	747b      	strb	r3, [r7, #17]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	77fb      	strb	r3, [r7, #31]
 8002c82:	e094      	b.n	8002dae <lcdPutIcon+0x172>
		uint16_t bufferLoc = (y+j)*SCR_W/8+xBlock;
 8002c84:	797a      	ldrb	r2, [r7, #5]
 8002c86:	7ffb      	ldrb	r3, [r7, #31]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	461a      	mov	r2, r3
 8002c94:	0091      	lsls	r1, r2, #2
 8002c96:	461a      	mov	r2, r3
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	7cbb      	ldrb	r3, [r7, #18]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	81fb      	strh	r3, [r7, #14]
		uint8_t dataBlock = icon_Data[j*bytesInLine] >> offset;
 8002ca8:	7ffb      	ldrb	r3, [r7, #31]
 8002caa:	7c7a      	ldrb	r2, [r7, #17]
 8002cac:	fb02 f303 	mul.w	r3, r2, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	fa42 f303 	asr.w	r3, r2, r3
 8002cc0:	77bb      	strb	r3, [r7, #30]
		lcdBuffer[bufferLoc] &= ~dataBlock;
 8002cc2:	89fb      	ldrh	r3, [r7, #14]
 8002cc4:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002cc6:	5cd3      	ldrb	r3, [r2, r3]
 8002cc8:	b25a      	sxtb	r2, r3
 8002cca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b25a      	sxtb	r2, r3
 8002cd6:	89fb      	ldrh	r3, [r7, #14]
 8002cd8:	b2d1      	uxtb	r1, r2
 8002cda:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002cdc:	54d1      	strb	r1, [r2, r3]
		dataBlock = (icon_Data[j*bytesInLine] & (0xFF >> (8 - offset)));
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
 8002ce0:	7c7a      	ldrb	r2, [r7, #17]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	f1c3 0308 	rsb	r3, r3, #8
 8002cf6:	21ff      	movs	r1, #255	; 0xff
 8002cf8:	fa41 f303 	asr.w	r3, r1, r3
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002d04:	2301      	movs	r3, #1
 8002d06:	777b      	strb	r3, [r7, #29]
 8002d08:	e02d      	b.n	8002d66 <lcdPutIcon+0x12a>
			uint8_t newDataBlock = icon_Data[j*bytesInLine + i];
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	7c7a      	ldrb	r2, [r7, #17]
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	7f7b      	ldrb	r3, [r7, #29]
 8002d14:	4413      	add	r3, r2
 8002d16:	461a      	mov	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	737b      	strb	r3, [r7, #13]
			lcdBuffer[bufferLoc + i] &= ~((dataBlock << (8 - offset)) | (newDataBlock >> offset));
 8002d20:	89fa      	ldrh	r2, [r7, #14]
 8002d22:	7f7b      	ldrb	r3, [r7, #29]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002d28:	5cd3      	ldrb	r3, [r2, r3]
 8002d2a:	b25a      	sxtb	r2, r3
 8002d2c:	7fb9      	ldrb	r1, [r7, #30]
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	f1c3 0308 	rsb	r3, r3, #8
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	b259      	sxtb	r1, r3
 8002d3a:	7b78      	ldrb	r0, [r7, #13]
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	fa40 f303 	asr.w	r3, r0, r3
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	430b      	orrs	r3, r1
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	b25b      	sxtb	r3, r3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	b259      	sxtb	r1, r3
 8002d50:	89fa      	ldrh	r2, [r7, #14]
 8002d52:	7f7b      	ldrb	r3, [r7, #29]
 8002d54:	4413      	add	r3, r2
 8002d56:	b2c9      	uxtb	r1, r1
 8002d58:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002d5a:	54d1      	strb	r1, [r2, r3]
			dataBlock = newDataBlock;
 8002d5c:	7b7b      	ldrb	r3, [r7, #13]
 8002d5e:	77bb      	strb	r3, [r7, #30]
		for(uint8_t i = 1; i <= (icon_Width)>>3; i++){
 8002d60:	7f7b      	ldrb	r3, [r7, #29]
 8002d62:	3301      	adds	r3, #1
 8002d64:	777b      	strb	r3, [r7, #29]
 8002d66:	7f3b      	ldrb	r3, [r7, #28]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	7f7a      	ldrb	r2, [r7, #29]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d9cb      	bls.n	8002d0a <lcdPutIcon+0xce>
		}
		lcdBuffer[bufferLoc + ((icon_Width+7)>>3)] &= ~(dataBlock << (8-offset));
 8002d72:	89fa      	ldrh	r2, [r7, #14]
 8002d74:	7f3b      	ldrb	r3, [r7, #28]
 8002d76:	3307      	adds	r3, #7
 8002d78:	10db      	asrs	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	b25a      	sxtb	r2, r3
 8002d82:	7fb9      	ldrb	r1, [r7, #30]
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	f1c3 0308 	rsb	r3, r3, #8
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	b25b      	sxtb	r3, r3
 8002d94:	4013      	ands	r3, r2
 8002d96:	b259      	sxtb	r1, r3
 8002d98:	89fa      	ldrh	r2, [r7, #14]
 8002d9a:	7f3b      	ldrb	r3, [r7, #28]
 8002d9c:	3307      	adds	r3, #7
 8002d9e:	10db      	asrs	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	b2c9      	uxtb	r1, r1
 8002da4:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <lcdPutIcon+0x18c>)
 8002da6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t j = 0; j < (icon_Height); j++){
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	3301      	adds	r3, #1
 8002dac:	77fb      	strb	r3, [r7, #31]
 8002dae:	7ffa      	ldrb	r2, [r7, #31]
 8002db0:	7efb      	ldrb	r3, [r7, #27]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	f4ff af66 	bcc.w	8002c84 <lcdPutIcon+0x48>
	}
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20002690 	.word	0x20002690

08002dcc <lcdPutStr>:

void lcdPutStr(uint16_t x, uint8_t y, const char *chr, const Font_TypeDef *font){
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60ba      	str	r2, [r7, #8]
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	81fb      	strh	r3, [r7, #14]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]
 8002de2:	e015      	b.n	8002e10 <lcdPutStr+0x44>
		// version with y meaning lcd row
		  lcdPutChar(x+font->font_Width*i, y, chr[i], font);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	fb12 f303 	smulbb	r3, r2, r3
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	89fb      	ldrh	r3, [r7, #14]
 8002df6:	4413      	add	r3, r2
 8002df8:	b298      	uxth	r0, r3
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	7b79      	ldrb	r1, [r7, #13]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f7ff fe43 	bl	8002a90 <lcdPutChar>
	for(uint8_t i = 0; i < strlen(chr); i++){
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
 8002e10:	7dfc      	ldrb	r4, [r7, #23]
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f7fd f9ec 	bl	80001f0 <strlen>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	d3e2      	bcc.n	8002de4 <lcdPutStr+0x18>
		  // version with Y meaning line number
//		  lcdPutChar(x+font->font_Width*i, y*font->font_Height, chr[i], font);
//		  HAL_Delay(1);
		  }
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <lcdVLine>:
		}

	}
}

void lcdVLine(uint16_t x, uint16_t y1, uint8_t y2, uint8_t mode){
 8002e28:	b490      	push	{r4, r7}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4623      	mov	r3, r4
 8002e38:	80fb      	strh	r3, [r7, #6]
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80bb      	strh	r3, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
 8002e42:	4613      	mov	r3, r2
 8002e44:	70bb      	strb	r3, [r7, #2]
	uint8_t block = x/8;
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	737b      	strb	r3, [r7, #13]
	uint8_t offset = x%8;
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	733b      	strb	r3, [r7, #12]
	if(y1 > y2){
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	88ba      	ldrh	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d905      	bls.n	8002e6e <lcdVLine+0x46>
		uint8_t temp = y1;
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	72fb      	strb	r3, [r7, #11]
		y1 = y2;
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	80bb      	strh	r3, [r7, #4]
		y2 = temp;
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	70fb      	strb	r3, [r7, #3]
	}
	for(uint8_t y = y1; y <= y2; y++){
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e04e      	b.n	8002f12 <lcdVLine+0xea>
		uint8_t content = lcdBuffer[y*SCR_W/8+block];
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2232      	movs	r2, #50	; 0x32
 8002e78:	fb03 f202 	mul.w	r2, r3, r2
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <lcdVLine+0x100>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	73bb      	strb	r3, [r7, #14]
		switch(mode){
 8002e86:	78bb      	ldrb	r3, [r7, #2]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d01e      	beq.n	8002eca <lcdVLine+0xa2>
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	dc27      	bgt.n	8002ee0 <lcdVLine+0xb8>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <lcdVLine+0x72>
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d00b      	beq.n	8002eb0 <lcdVLine+0x88>
 8002e98:	e022      	b.n	8002ee0 <lcdVLine+0xb8>
			// clear
			case 0:
				content |= (0b10000000 >> offset);
 8002e9a:	7b3b      	ldrb	r3, [r7, #12]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	fa42 f303 	asr.w	r3, r2, r3
 8002ea2:	b25a      	sxtb	r2, r3
 8002ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	73bb      	strb	r3, [r7, #14]
				break;
 8002eae:	e024      	b.n	8002efa <lcdVLine+0xd2>
			// fill
			case 1:
				content &= ~(0b10000000 >> offset);
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	fa42 f303 	asr.w	r3, r2, r3
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	b25a      	sxtb	r2, r3
 8002ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	73bb      	strb	r3, [r7, #14]
				break;
 8002ec8:	e017      	b.n	8002efa <lcdVLine+0xd2>
			// revert
			case 2:
				content ^= (0b10000000 >> offset);
 8002eca:	7b3b      	ldrb	r3, [r7, #12]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	fa42 f303 	asr.w	r3, r2, r3
 8002ed2:	b25a      	sxtb	r2, r3
 8002ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ed8:	4053      	eors	r3, r2
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	73bb      	strb	r3, [r7, #14]
				break;
 8002ede:	e00c      	b.n	8002efa <lcdVLine+0xd2>
			default:
				content &= ~(0b10000000 >> offset);
 8002ee0:	7b3b      	ldrb	r3, [r7, #12]
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	fa42 f303 	asr.w	r3, r2, r3
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	b25a      	sxtb	r2, r3
 8002eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	73bb      	strb	r3, [r7, #14]
				break;
 8002ef8:	bf00      	nop
		}
			lcdBuffer[y*SCR_W/8+block] = content;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2232      	movs	r2, #50	; 0x32
 8002efe:	fb03 f202 	mul.w	r2, r3, r2
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	4413      	add	r3, r2
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <lcdVLine+0x100>)
 8002f08:	7bba      	ldrb	r2, [r7, #14]
 8002f0a:	54ca      	strb	r2, [r1, r3]
	for(uint8_t y = y1; y <= y2; y++){
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d9ac      	bls.n	8002e74 <lcdVLine+0x4c>
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc90      	pop	{r4, r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20002690 	.word	0x20002690

08002f2c <lcdHLine2>:

void lcdHLine2(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode, uint8_t fill){
 8002f2c:	b490      	push	{r4, r7}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4604      	mov	r4, r0
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
 8002f46:	4613      	mov	r3, r2
 8002f48:	70bb      	strb	r3, [r7, #2]
		uint8_t pattern = 0xFF;
 8002f4a:	23ff      	movs	r3, #255	; 0xff
 8002f4c:	75fb      	strb	r3, [r7, #23]
		switch(fill){
 8002f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f52:	2b14      	cmp	r3, #20
 8002f54:	f200 8208 	bhi.w	8003368 <lcdHLine2+0x43c>
 8002f58:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <lcdHLine2+0x34>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002fbb 	.word	0x08002fbb
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fc7 	.word	0x08002fc7
 8002f70:	08002fdf 	.word	0x08002fdf
 8002f74:	08002ff7 	.word	0x08002ff7
 8002f78:	0800300f 	.word	0x0800300f
 8002f7c:	08003059 	.word	0x08003059
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	080030e1 	.word	0x080030e1
 8002f88:	0800311f 	.word	0x0800311f
 8002f8c:	08003145 	.word	0x08003145
 8002f90:	0800316f 	.word	0x0800316f
 8002f94:	080031a5 	.word	0x080031a5
 8002f98:	080031bd 	.word	0x080031bd
 8002f9c:	080031e3 	.word	0x080031e3
 8002fa0:	08003219 	.word	0x08003219
 8002fa4:	0800324f 	.word	0x0800324f
 8002fa8:	08003291 	.word	0x08003291
 8002fac:	080032eb 	.word	0x080032eb
 8002fb0:	08003327 	.word	0x08003327
		case 0:	// clear
			pattern = 0x00;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	75fb      	strb	r3, [r7, #23]
			break;
 8002fb8:	e1ea      	b.n	8003390 <lcdHLine2+0x464>
		case 1:	// fill
			pattern = 0xFF;
 8002fba:	23ff      	movs	r3, #255	; 0xff
 8002fbc:	75fb      	strb	r3, [r7, #23]
			break;
 8002fbe:	e1e7      	b.n	8003390 <lcdHLine2+0x464>
		case 2:	// vertical lines
			pattern = 0x55;
 8002fc0:	2355      	movs	r3, #85	; 0x55
 8002fc2:	75fb      	strb	r3, [r7, #23]
			break;
 8002fc4:	e1e4      	b.n	8003390 <lcdHLine2+0x464>
		case 3:	// horizontal lines
			if(y%2) pattern = 0x00;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <lcdHLine2+0xac>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
			else pattern = 0xFF;
			break;
 8002fd6:	e1db      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0xFF;
 8002fd8:	23ff      	movs	r3, #255	; 0xff
 8002fda:	75fb      	strb	r3, [r7, #23]
			break;
 8002fdc:	e1d8      	b.n	8003390 <lcdHLine2+0x464>
		case 4:	//  checker pattern
			if(y%2) pattern = 0xAA;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <lcdHLine2+0xc4>
 8002fea:	23aa      	movs	r3, #170	; 0xaa
 8002fec:	75fb      	strb	r3, [r7, #23]
			else pattern = 0x55;
			break;
 8002fee:	e1cf      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x55;
 8002ff0:	2355      	movs	r3, #85	; 0x55
 8002ff2:	75fb      	strb	r3, [r7, #23]
			break;
 8002ff4:	e1cc      	b.n	8003390 <lcdHLine2+0x464>
		case 5:	// shifted dots
			if(y%2) pattern = 0b10001000;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <lcdHLine2+0xdc>
 8003002:	2388      	movs	r3, #136	; 0x88
 8003004:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b00100010;
			break;
 8003006:	e1c3      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0b00100010;
 8003008:	2322      	movs	r3, #34	; 0x22
 800300a:	75fb      	strb	r3, [r7, #23]
			break;
 800300c:	e1c0      	b.n	8003390 <lcdHLine2+0x464>
		case 6: // diagonal lines
			if(y%4==0) pattern = 0b10001000;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <lcdHLine2+0xf4>
 800301a:	2388      	movs	r3, #136	; 0x88
 800301c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else if(y%4==2) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800301e:	e1a6      	b.n	800336e <lcdHLine2+0x442>
			else if(y%4==1) pattern = 0b01000100;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d102      	bne.n	8003032 <lcdHLine2+0x106>
 800302c:	2344      	movs	r3, #68	; 0x44
 800302e:	75fb      	strb	r3, [r7, #23]
			break;
 8003030:	e19d      	b.n	800336e <lcdHLine2+0x442>
			else if(y%4==2) pattern = 0b00100010;
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d102      	bne.n	8003044 <lcdHLine2+0x118>
 800303e:	2322      	movs	r3, #34	; 0x22
 8003040:	75fb      	strb	r3, [r7, #23]
			break;
 8003042:	e194      	b.n	800336e <lcdHLine2+0x442>
			else if(y%4==3) pattern = 0b00010001;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b03      	cmp	r3, #3
 800304e:	f040 818e 	bne.w	800336e <lcdHLine2+0x442>
 8003052:	2311      	movs	r3, #17
 8003054:	75fb      	strb	r3, [r7, #23]
			break;
 8003056:	e18a      	b.n	800336e <lcdHLine2+0x442>
		case 7: // vertical rain
			if((y%4==0) || (y%4==2)) pattern = 0b10101010;
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <lcdHLine2+0x144>
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d102      	bne.n	8003076 <lcdHLine2+0x14a>
 8003070:	23aa      	movs	r3, #170	; 0xaa
 8003072:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b00100010;
			else if(y%4==3) pattern = 0b00100010<<2;
			break;
 8003074:	e17d      	b.n	8003372 <lcdHLine2+0x446>
			else if(y%4==1) pattern = 0b00100010;
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <lcdHLine2+0x15c>
 8003082:	2322      	movs	r3, #34	; 0x22
 8003084:	75fb      	strb	r3, [r7, #23]
			break;
 8003086:	e174      	b.n	8003372 <lcdHLine2+0x446>
			else if(y%4==3) pattern = 0b00100010<<2;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b03      	cmp	r3, #3
 8003092:	f040 816e 	bne.w	8003372 <lcdHLine2+0x446>
 8003096:	2388      	movs	r3, #136	; 0x88
 8003098:	75fb      	strb	r3, [r7, #23]
			break;
 800309a:	e16a      	b.n	8003372 <lcdHLine2+0x446>
		case 8: // diagonal crosses
			if((y%4==1) || (y%4==3)) pattern = 0b01010101;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d005      	beq.n	80030b4 <lcdHLine2+0x188>
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d102      	bne.n	80030ba <lcdHLine2+0x18e>
 80030b4:	2355      	movs	r3, #85	; 0x55
 80030b6:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b10001000;
			else if(y%4==2) pattern = 0b00100010;
			break;
 80030b8:	e15d      	b.n	8003376 <lcdHLine2+0x44a>
			else if(y%4==0) pattern = 0b10001000;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <lcdHLine2+0x1a0>
 80030c6:	2388      	movs	r3, #136	; 0x88
 80030c8:	75fb      	strb	r3, [r7, #23]
			break;
 80030ca:	e154      	b.n	8003376 <lcdHLine2+0x44a>
			else if(y%4==2) pattern = 0b00100010;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	f040 814e 	bne.w	8003376 <lcdHLine2+0x44a>
 80030da:	2322      	movs	r3, #34	; 0x22
 80030dc:	75fb      	strb	r3, [r7, #23]
			break;
 80030de:	e14a      	b.n	8003376 <lcdHLine2+0x44a>
		case 9: // big checkerboard
			if((y%4==0) || (y%4==1)) pattern = 0b11001100;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <lcdHLine2+0x1cc>
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d102      	bne.n	80030fe <lcdHLine2+0x1d2>
 80030f8:	23cc      	movs	r3, #204	; 0xcc
 80030fa:	75fb      	strb	r3, [r7, #23]
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
			break;
 80030fc:	e13d      	b.n	800337a <lcdHLine2+0x44e>
			else if(y%4==2 || y%4==3) pattern = 0b00110011;
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d006      	beq.n	8003118 <lcdHLine2+0x1ec>
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b03      	cmp	r3, #3
 8003114:	f040 8131 	bne.w	800337a <lcdHLine2+0x44e>
 8003118:	2333      	movs	r3, #51	; 0x33
 800311a:	75fb      	strb	r3, [r7, #23]
			break;
 800311c:	e12d      	b.n	800337a <lcdHLine2+0x44e>
		case 10: // vertical crosshatch
			if(y%2==0) pattern = 0b01010101;
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <lcdHLine2+0x204>
 800312a:	2355      	movs	r3, #85	; 0x55
 800312c:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = 0b11111111;
			break;
 800312e:	e126      	b.n	800337e <lcdHLine2+0x452>
			else if(y%2==1) pattern = 0b11111111;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8120 	beq.w	800337e <lcdHLine2+0x452>
 800313e:	23ff      	movs	r3, #255	; 0xff
 8003140:	75fb      	strb	r3, [r7, #23]
			break;
 8003142:	e11c      	b.n	800337e <lcdHLine2+0x452>
		case 11: // corners
			if(y%4==0) pattern = 0b11001100;
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <lcdHLine2+0x22a>
 8003150:	23cc      	movs	r3, #204	; 0xcc
 8003152:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 8003154:	e11c      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <lcdHLine2+0x23c>
 8003162:	2344      	movs	r3, #68	; 0x44
 8003164:	75fb      	strb	r3, [r7, #23]
			break;
 8003166:	e113      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]
			break;
 800316c:	e110      	b.n	8003390 <lcdHLine2+0x464>
		case 12: // big corners
			if(y%4==0) pattern = 0b11101110;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <lcdHLine2+0x254>
 800317a:	23ee      	movs	r3, #238	; 0xee
 800317c:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
			else pattern = 0x00;
			break;
 800317e:	e107      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==1 || y%4==2) pattern = 0b00100010;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d005      	beq.n	8003198 <lcdHLine2+0x26c>
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d102      	bne.n	800319e <lcdHLine2+0x272>
 8003198:	2322      	movs	r3, #34	; 0x22
 800319a:	75fb      	strb	r3, [r7, #23]
			break;
 800319c:	e0f8      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
			break;
 80031a2:	e0f5      	b.n	8003390 <lcdHLine2+0x464>
		case 13: // big vertical crosshatch
			if(y%4==0) pattern = 0b11111111;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <lcdHLine2+0x28a>
 80031b0:	23ff      	movs	r3, #255	; 0xff
 80031b2:	75fb      	strb	r3, [r7, #23]
			else pattern = 0b10001000;
			break;
 80031b4:	e0ec      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0b10001000;
 80031b6:	2388      	movs	r3, #136	; 0x88
 80031b8:	75fb      	strb	r3, [r7, #23]
			break;
 80031ba:	e0e9      	b.n	8003390 <lcdHLine2+0x464>
		case 14: // points
			if(y%2==0) pattern = ~0b01010101;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d102      	bne.n	80031ce <lcdHLine2+0x2a2>
 80031c8:	23aa      	movs	r3, #170	; 0xaa
 80031ca:	75fb      	strb	r3, [r7, #23]
			else if(y%2==1) pattern = ~0b11111111;
			break;
 80031cc:	e0d9      	b.n	8003382 <lcdHLine2+0x456>
			else if(y%2==1) pattern = ~0b11111111;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 80d3 	beq.w	8003382 <lcdHLine2+0x456>
 80031dc:	2300      	movs	r3, #0
 80031de:	75fb      	strb	r3, [r7, #23]
			break;
 80031e0:	e0cf      	b.n	8003382 <lcdHLine2+0x456>
		case 15: // crosses
			if(y%4==0 || y%4==2) pattern = 0b10101010;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <lcdHLine2+0x2ce>
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d102      	bne.n	8003200 <lcdHLine2+0x2d4>
 80031fa:	23aa      	movs	r3, #170	; 0xaa
 80031fc:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01000100;
			else pattern = 0x00;
			break;
 80031fe:	e0c7      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01000100;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d102      	bne.n	8003212 <lcdHLine2+0x2e6>
 800320c:	2344      	movs	r3, #68	; 0x44
 800320e:	75fb      	strb	r3, [r7, #23]
			break;
 8003210:	e0be      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
			break;
 8003216:	e0bb      	b.n	8003390 <lcdHLine2+0x464>
		case 16: // boxes
			if(y%4==0 || y%4==2) pattern = 0b11101110;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <lcdHLine2+0x304>
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d102      	bne.n	8003236 <lcdHLine2+0x30a>
 8003230:	23ee      	movs	r3, #238	; 0xee
 8003232:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else pattern = 0x00;
			break;
 8003234:	e0ac      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b10101010;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <lcdHLine2+0x31c>
 8003242:	23aa      	movs	r3, #170	; 0xaa
 8003244:	75fb      	strb	r3, [r7, #23]
			break;
 8003246:	e0a3      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003248:	2300      	movs	r3, #0
 800324a:	75fb      	strb	r3, [r7, #23]
			break;
 800324c:	e0a0      	b.n	8003390 <lcdHLine2+0x464>
		case 17: // diamonds
			if(y%4==0 || y%4==2) pattern = 0b01000100;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <lcdHLine2+0x33a>
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d102      	bne.n	800326c <lcdHLine2+0x340>
 8003266:	2344      	movs	r3, #68	; 0x44
 8003268:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b10101010;
			else if(y%4==3) pattern = 0b00010001;
			break;
 800326a:	e08c      	b.n	8003386 <lcdHLine2+0x45a>
			else if(y%4==1) pattern = 0b10101010;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d102      	bne.n	800327e <lcdHLine2+0x352>
 8003278:	23aa      	movs	r3, #170	; 0xaa
 800327a:	75fb      	strb	r3, [r7, #23]
			break;
 800327c:	e083      	b.n	8003386 <lcdHLine2+0x45a>
			else if(y%4==3) pattern = 0b00010001;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b03      	cmp	r3, #3
 8003288:	d17d      	bne.n	8003386 <lcdHLine2+0x45a>
 800328a:	2311      	movs	r3, #17
 800328c:	75fb      	strb	r3, [r7, #23]
			break;
 800328e:	e07a      	b.n	8003386 <lcdHLine2+0x45a>
		case 18: // waves
			if(y%3==0) pattern = 0b01010101;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4baf      	ldr	r3, [pc, #700]	; (8003550 <lcdHLine2+0x624>)
 8003294:	fba3 1302 	umull	r1, r3, r3, r2
 8003298:	0859      	lsrs	r1, r3, #1
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <lcdHLine2+0x382>
 80032a8:	2355      	movs	r3, #85	; 0x55
 80032aa:	75fb      	strb	r3, [r7, #23]
			else if(y%3==1) pattern = 0b10101010;
			else if(y%3==2) pattern = 0b00000000;
			break;
 80032ac:	e06d      	b.n	800338a <lcdHLine2+0x45e>
			else if(y%3==1) pattern = 0b10101010;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4ba7      	ldr	r3, [pc, #668]	; (8003550 <lcdHLine2+0x624>)
 80032b2:	fba3 1302 	umull	r1, r3, r3, r2
 80032b6:	0859      	lsrs	r1, r3, #1
 80032b8:	460b      	mov	r3, r1
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	440b      	add	r3, r1
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <lcdHLine2+0x3a0>
 80032c6:	23aa      	movs	r3, #170	; 0xaa
 80032c8:	75fb      	strb	r3, [r7, #23]
			break;
 80032ca:	e05e      	b.n	800338a <lcdHLine2+0x45e>
			else if(y%3==2) pattern = 0b00000000;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	4ba0      	ldr	r3, [pc, #640]	; (8003550 <lcdHLine2+0x624>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	0859      	lsrs	r1, r3, #1
 80032d6:	460b      	mov	r3, r1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d152      	bne.n	800338a <lcdHLine2+0x45e>
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
			break;
 80032e8:	e04f      	b.n	800338a <lcdHLine2+0x45e>
		case 19: // big waves
			if(y%4==0) pattern = 0b00100010;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <lcdHLine2+0x3d0>
 80032f6:	2322      	movs	r3, #34	; 0x22
 80032f8:	75fb      	strb	r3, [r7, #23]
			else if(y%4==1) pattern = 0b01010101;
			else if(y%4==2) pattern = 0b10001000;
			else pattern = 0x00;
			break;
 80032fa:	e049      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==1) pattern = 0b01010101;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d102      	bne.n	800330e <lcdHLine2+0x3e2>
 8003308:	2355      	movs	r3, #85	; 0x55
 800330a:	75fb      	strb	r3, [r7, #23]
			break;
 800330c:	e040      	b.n	8003390 <lcdHLine2+0x464>
			else if(y%4==2) pattern = 0b10001000;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d102      	bne.n	8003320 <lcdHLine2+0x3f4>
 800331a:	2388      	movs	r3, #136	; 0x88
 800331c:	75fb      	strb	r3, [r7, #23]
			break;
 800331e:	e037      	b.n	8003390 <lcdHLine2+0x464>
			else pattern = 0x00;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]
			break;
 8003324:	e034      	b.n	8003390 <lcdHLine2+0x464>
		case 20: // circles
			if(y%4==1 || y%4==3) pattern = 0b10001000;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d005      	beq.n	800333e <lcdHLine2+0x412>
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b03      	cmp	r3, #3
 800333c:	d102      	bne.n	8003344 <lcdHLine2+0x418>
 800333e:	2388      	movs	r3, #136	; 0x88
 8003340:	75fb      	strb	r3, [r7, #23]
			else if(y%4==0) pattern = 0b01110111;
			else if(y%4==2) pattern = 0b10101010;
			break;
 8003342:	e024      	b.n	800338e <lcdHLine2+0x462>
			else if(y%4==0) pattern = 0b01110111;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <lcdHLine2+0x42a>
 8003350:	2377      	movs	r3, #119	; 0x77
 8003352:	75fb      	strb	r3, [r7, #23]
			break;
 8003354:	e01b      	b.n	800338e <lcdHLine2+0x462>
			else if(y%4==2) pattern = 0b10101010;
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d115      	bne.n	800338e <lcdHLine2+0x462>
 8003362:	23aa      	movs	r3, #170	; 0xaa
 8003364:	75fb      	strb	r3, [r7, #23]
			break;
 8003366:	e012      	b.n	800338e <lcdHLine2+0x462>
		default:
			pattern = 0x00;
 8003368:	2300      	movs	r3, #0
 800336a:	75fb      	strb	r3, [r7, #23]
			break;
 800336c:	e010      	b.n	8003390 <lcdHLine2+0x464>
			break;
 800336e:	bf00      	nop
 8003370:	e00e      	b.n	8003390 <lcdHLine2+0x464>
			break;
 8003372:	bf00      	nop
 8003374:	e00c      	b.n	8003390 <lcdHLine2+0x464>
			break;
 8003376:	bf00      	nop
 8003378:	e00a      	b.n	8003390 <lcdHLine2+0x464>
			break;
 800337a:	bf00      	nop
 800337c:	e008      	b.n	8003390 <lcdHLine2+0x464>
			break;
 800337e:	bf00      	nop
 8003380:	e006      	b.n	8003390 <lcdHLine2+0x464>
			break;
 8003382:	bf00      	nop
 8003384:	e004      	b.n	8003390 <lcdHLine2+0x464>
			break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <lcdHLine2+0x464>
			break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <lcdHLine2+0x464>
			break;
 800338e:	bf00      	nop
		}

		uint8_t x1block = x1/8;
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	b29b      	uxth	r3, r3
 8003396:	73fb      	strb	r3, [r7, #15]
		uint8_t offset1 = x1%8;
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	73bb      	strb	r3, [r7, #14]
		uint8_t x2block = x2/8;
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	737b      	strb	r3, [r7, #13]
		uint8_t offset2 = x2%8;
 80033aa:	88bb      	ldrh	r3, [r7, #4]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	733b      	strb	r3, [r7, #12]
		uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2232      	movs	r2, #50	; 0x32
 80033b8:	fb03 f202 	mul.w	r2, r3, r2
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4413      	add	r3, r2
 80033c0:	4a64      	ldr	r2, [pc, #400]	; (8003554 <lcdHLine2+0x628>)
 80033c2:	5cd3      	ldrb	r3, [r2, r3]
 80033c4:	75bb      	strb	r3, [r7, #22]
		uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x2block];
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a60      	ldr	r2, [pc, #384]	; (8003554 <lcdHLine2+0x628>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	757b      	strb	r3, [r7, #21]
		uint8_t fillBlock = 0xFF;
 80033d8:	23ff      	movs	r3, #255	; 0xff
 80033da:	753b      	strb	r3, [r7, #20]
		if((8-offset1)>(x2-x1+1)) fillBlock = (pattern & ((~(0xFF>>(x2-x1+1)))>>offset1));
 80033dc:	7bbb      	ldrb	r3, [r7, #14]
 80033de:	f1c3 0208 	rsb	r2, r3, #8
 80033e2:	88b9      	ldrh	r1, [r7, #4]
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	1acb      	subs	r3, r1, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	429a      	cmp	r2, r3
 80033ec:	dd11      	ble.n	8003412 <lcdHLine2+0x4e6>
 80033ee:	88ba      	ldrh	r2, [r7, #4]
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	22ff      	movs	r2, #255	; 0xff
 80033f8:	fa42 f303 	asr.w	r3, r2, r3
 80033fc:	43da      	mvns	r2, r3
 80033fe:	7bbb      	ldrb	r3, [r7, #14]
 8003400:	fa42 f303 	asr.w	r3, r2, r3
 8003404:	b25a      	sxtb	r2, r3
 8003406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340a:	4013      	ands	r3, r2
 800340c:	b25b      	sxtb	r3, r3
 800340e:	753b      	strb	r3, [r7, #20]
 8003410:	e001      	b.n	8003416 <lcdHLine2+0x4ea>
		else fillBlock = pattern;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	753b      	strb	r3, [r7, #20]
		switch(mode){
 8003416:	78bb      	ldrb	r3, [r7, #2]
 8003418:	2b03      	cmp	r3, #3
 800341a:	f200 8130 	bhi.w	800367e <lcdHLine2+0x752>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <lcdHLine2+0x4f8>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003435 	.word	0x08003435
 8003428:	080034b9 	.word	0x080034b9
 800342c:	08003559 	.word	0x08003559
 8003430:	080035dd 	.word	0x080035dd
		// clear
		case 0:
			firstBlock |= (fillBlock & (0xFF >> (offset1)));
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	fa42 f303 	asr.w	r3, r2, r3
 800343c:	b25a      	sxtb	r2, r3
 800343e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003442:	4013      	ands	r3, r2
 8003444:	b25a      	sxtb	r2, r3
 8003446:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800344a:	4313      	orrs	r3, r2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	75bb      	strb	r3, [r7, #22]
			lastBlock |= (pattern & (0xFF << (8-offset2-1)));
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	b25a      	sxtb	r2, r3
 800345e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003462:	4013      	ands	r3, r2
 8003464:	b25a      	sxtb	r2, r3
 8003466:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800346a:	4313      	orrs	r3, r2
 800346c:	b25b      	sxtb	r3, r3
 800346e:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003470:	2301      	movs	r3, #1
 8003472:	74fb      	strb	r3, [r7, #19]
 8003474:	e019      	b.n	80034aa <lcdHLine2+0x57e>
				lcdBuffer[y*SCR_W/8+x1block+i] |= pattern;
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	2232      	movs	r2, #50	; 0x32
 800347a:	fb03 f202 	mul.w	r2, r3, r2
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	441a      	add	r2, r3
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	4413      	add	r3, r2
 8003486:	4a33      	ldr	r2, [pc, #204]	; (8003554 <lcdHLine2+0x628>)
 8003488:	5cd1      	ldrb	r1, [r2, r3]
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	2232      	movs	r2, #50	; 0x32
 800348e:	fb03 f202 	mul.w	r2, r3, r2
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	441a      	add	r2, r3
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	4413      	add	r3, r2
 800349a:	7dfa      	ldrb	r2, [r7, #23]
 800349c:	430a      	orrs	r2, r1
 800349e:	b2d1      	uxtb	r1, r2
 80034a0:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <lcdHLine2+0x628>)
 80034a2:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	3301      	adds	r3, #1
 80034a8:	74fb      	strb	r3, [r7, #19]
 80034aa:	7cfa      	ldrb	r2, [r7, #19]
 80034ac:	7b79      	ldrb	r1, [r7, #13]
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	1acb      	subs	r3, r1, r3
 80034b2:	429a      	cmp	r2, r3
 80034b4:	dbdf      	blt.n	8003476 <lcdHLine2+0x54a>
			}
			break;
 80034b6:	e0e2      	b.n	800367e <lcdHLine2+0x752>
		// fill
		case 1:
			firstBlock &= ~(fillBlock & (0xFF >> (offset1)));
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	fa42 f303 	asr.w	r3, r2, r3
 80034c0:	b25a      	sxtb	r2, r3
 80034c2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	b25a      	sxtb	r2, r3
 80034ce:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	75bb      	strb	r3, [r7, #22]
			lastBlock &= ~(pattern & (0xFF << (8-offset2-1)));
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	b25a      	sxtb	r2, r3
 80034e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ea:	4013      	ands	r3, r2
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	b25a      	sxtb	r2, r3
 80034f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b25b      	sxtb	r3, r3
 80034fa:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80034fc:	2301      	movs	r3, #1
 80034fe:	74bb      	strb	r3, [r7, #18]
 8003500:	e01e      	b.n	8003540 <lcdHLine2+0x614>
				lcdBuffer[y*SCR_W/8+x1block+i] &= ~pattern;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	2232      	movs	r2, #50	; 0x32
 8003506:	fb03 f202 	mul.w	r2, r3, r2
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	441a      	add	r2, r3
 800350e:	7cbb      	ldrb	r3, [r7, #18]
 8003510:	4413      	add	r3, r2
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <lcdHLine2+0x628>)
 8003514:	5cd3      	ldrb	r3, [r2, r3]
 8003516:	b25a      	sxtb	r2, r3
 8003518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800351c:	43db      	mvns	r3, r3
 800351e:	b25b      	sxtb	r3, r3
 8003520:	4013      	ands	r3, r2
 8003522:	b259      	sxtb	r1, r3
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2232      	movs	r2, #50	; 0x32
 8003528:	fb03 f202 	mul.w	r2, r3, r2
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	441a      	add	r2, r3
 8003530:	7cbb      	ldrb	r3, [r7, #18]
 8003532:	4413      	add	r3, r2
 8003534:	b2c9      	uxtb	r1, r1
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <lcdHLine2+0x628>)
 8003538:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800353a:	7cbb      	ldrb	r3, [r7, #18]
 800353c:	3301      	adds	r3, #1
 800353e:	74bb      	strb	r3, [r7, #18]
 8003540:	7cba      	ldrb	r2, [r7, #18]
 8003542:	7b79      	ldrb	r1, [r7, #13]
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	429a      	cmp	r2, r3
 800354a:	dbda      	blt.n	8003502 <lcdHLine2+0x5d6>
			}
			break;
 800354c:	e097      	b.n	800367e <lcdHLine2+0x752>
 800354e:	bf00      	nop
 8003550:	aaaaaaab 	.word	0xaaaaaaab
 8003554:	20002690 	.word	0x20002690
		// revert
		case 2:
			firstBlock ^= (fillBlock & (0xFF >> (offset1)));
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	fa42 f303 	asr.w	r3, r2, r3
 8003560:	b25a      	sxtb	r2, r3
 8003562:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8003566:	4013      	ands	r3, r2
 8003568:	b25a      	sxtb	r2, r3
 800356a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800356e:	4053      	eors	r3, r2
 8003570:	b25b      	sxtb	r3, r3
 8003572:	75bb      	strb	r3, [r7, #22]
			lastBlock ^= (pattern & (0xFF << (8-offset2-1)));
 8003574:	7b3b      	ldrb	r3, [r7, #12]
 8003576:	f1c3 0307 	rsb	r3, r3, #7
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	b25a      	sxtb	r2, r3
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003586:	4013      	ands	r3, r2
 8003588:	b25a      	sxtb	r2, r3
 800358a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800358e:	4053      	eors	r3, r2
 8003590:	b25b      	sxtb	r3, r3
 8003592:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003594:	2301      	movs	r3, #1
 8003596:	747b      	strb	r3, [r7, #17]
 8003598:	e019      	b.n	80035ce <lcdHLine2+0x6a2>
				lcdBuffer[y*SCR_W/8+x1block+i] ^= pattern;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2232      	movs	r2, #50	; 0x32
 800359e:	fb03 f202 	mul.w	r2, r3, r2
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	441a      	add	r2, r3
 80035a6:	7c7b      	ldrb	r3, [r7, #17]
 80035a8:	4413      	add	r3, r2
 80035aa:	4a42      	ldr	r2, [pc, #264]	; (80036b4 <lcdHLine2+0x788>)
 80035ac:	5cd1      	ldrb	r1, [r2, r3]
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	2232      	movs	r2, #50	; 0x32
 80035b2:	fb03 f202 	mul.w	r2, r3, r2
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	441a      	add	r2, r3
 80035ba:	7c7b      	ldrb	r3, [r7, #17]
 80035bc:	4413      	add	r3, r2
 80035be:	7dfa      	ldrb	r2, [r7, #23]
 80035c0:	404a      	eors	r2, r1
 80035c2:	b2d1      	uxtb	r1, r2
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <lcdHLine2+0x788>)
 80035c6:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 80035c8:	7c7b      	ldrb	r3, [r7, #17]
 80035ca:	3301      	adds	r3, #1
 80035cc:	747b      	strb	r3, [r7, #17]
 80035ce:	7c7a      	ldrb	r2, [r7, #17]
 80035d0:	7b79      	ldrb	r1, [r7, #13]
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	1acb      	subs	r3, r1, r3
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dbdf      	blt.n	800359a <lcdHLine2+0x66e>
			}
			break;
 80035da:	e050      	b.n	800367e <lcdHLine2+0x752>
			// overwrite
		case 3:
			firstBlock = ~((fillBlock & (0xFF >> (offset1))) | (~firstBlock & (0xFF<<(8-offset1))));
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	fa42 f303 	asr.w	r3, r2, r3
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	b259      	sxtb	r1, r3
 80035f6:	7bbb      	ldrb	r3, [r7, #14]
 80035f8:	f1c3 0308 	rsb	r3, r3, #8
 80035fc:	20ff      	movs	r0, #255	; 0xff
 80035fe:	fa00 f303 	lsl.w	r3, r0, r3
 8003602:	b25b      	sxtb	r3, r3
 8003604:	400b      	ands	r3, r1
 8003606:	b25b      	sxtb	r3, r3
 8003608:	4313      	orrs	r3, r2
 800360a:	b25b      	sxtb	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	75bb      	strb	r3, [r7, #22]
			lastBlock = ~((pattern & (0xFF << (8-offset2-1))) | (~lastBlock & (0xFF>>(offset2+1))));
 8003612:	7b3b      	ldrb	r3, [r7, #12]
 8003614:	f1c3 0307 	rsb	r3, r3, #7
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	b25a      	sxtb	r2, r3
 8003620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003624:	4013      	ands	r3, r2
 8003626:	b25a      	sxtb	r2, r3
 8003628:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800362c:	43db      	mvns	r3, r3
 800362e:	b259      	sxtb	r1, r3
 8003630:	7b3b      	ldrb	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	20ff      	movs	r0, #255	; 0xff
 8003636:	fa40 f303 	asr.w	r3, r0, r3
 800363a:	b25b      	sxtb	r3, r3
 800363c:	400b      	ands	r3, r1
 800363e:	b25b      	sxtb	r3, r3
 8003640:	4313      	orrs	r3, r2
 8003642:	b25b      	sxtb	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	757b      	strb	r3, [r7, #21]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800364a:	2301      	movs	r3, #1
 800364c:	743b      	strb	r3, [r7, #16]
 800364e:	e00f      	b.n	8003670 <lcdHLine2+0x744>
				lcdBuffer[y*SCR_W/8+x1block+i] = ~pattern;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	2232      	movs	r2, #50	; 0x32
 8003654:	fb03 f202 	mul.w	r2, r3, r2
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	441a      	add	r2, r3
 800365c:	7c3b      	ldrb	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	7dfa      	ldrb	r2, [r7, #23]
 8003662:	43d2      	mvns	r2, r2
 8003664:	b2d1      	uxtb	r1, r2
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <lcdHLine2+0x788>)
 8003668:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 1; i < (x2block-x1block); i++){
 800366a:	7c3b      	ldrb	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	743b      	strb	r3, [r7, #16]
 8003670:	7c3a      	ldrb	r2, [r7, #16]
 8003672:	7b79      	ldrb	r1, [r7, #13]
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	1acb      	subs	r3, r1, r3
 8003678:	429a      	cmp	r2, r3
 800367a:	dbe9      	blt.n	8003650 <lcdHLine2+0x724>
			}
			break;
 800367c:	bf00      	nop
		}
		lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	fb03 f202 	mul.w	r2, r3, r2
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	4413      	add	r3, r2
 800368a:	490a      	ldr	r1, [pc, #40]	; (80036b4 <lcdHLine2+0x788>)
 800368c:	7dba      	ldrb	r2, [r7, #22]
 800368e:	54ca      	strb	r2, [r1, r3]
		if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 8003690:	7b7a      	ldrb	r2, [r7, #13]
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	429a      	cmp	r2, r3
 8003696:	d908      	bls.n	80036aa <lcdHLine2+0x77e>
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	2232      	movs	r2, #50	; 0x32
 800369c:	fb03 f202 	mul.w	r2, r3, r2
 80036a0:	7b7b      	ldrb	r3, [r7, #13]
 80036a2:	4413      	add	r3, r2
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <lcdHLine2+0x788>)
 80036a6:	7d7a      	ldrb	r2, [r7, #21]
 80036a8:	54ca      	strb	r2, [r1, r3]
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc90      	pop	{r4, r7}
 80036b2:	4770      	bx	lr
 80036b4:	20002690 	.word	0x20002690

080036b8 <lcdHLine>:

// Draw horizontal line
// Should not be used, causes problems for lines shorter than 8px
// use lcdHLine2 instead
void lcdHLine(uint16_t x1, uint16_t x2, uint8_t y, uint8_t mode){
 80036b8:	b490      	push	{r4, r7}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4604      	mov	r4, r0
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	80fb      	strh	r3, [r7, #6]
 80036ca:	4603      	mov	r3, r0
 80036cc:	80bb      	strh	r3, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
 80036d2:	4613      	mov	r3, r2
 80036d4:	70bb      	strb	r3, [r7, #2]
	uint8_t x1block = x1/8;
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	08db      	lsrs	r3, r3, #3
 80036da:	b29b      	uxth	r3, r3
 80036dc:	747b      	strb	r3, [r7, #17]
	uint8_t offset1 = x1%8;
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	743b      	strb	r3, [r7, #16]
	uint8_t x2block = x2/8;
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	08db      	lsrs	r3, r3, #3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	73fb      	strb	r3, [r7, #15]
	uint8_t offset2 = x2%8;
 80036f0:	88bb      	ldrh	r3, [r7, #4]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	73bb      	strb	r3, [r7, #14]
	uint8_t firstBlock = lcdBuffer[y*SCR_W/8+x1block];
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2232      	movs	r2, #50	; 0x32
 80036fe:	fb03 f202 	mul.w	r2, r3, r2
 8003702:	7c7b      	ldrb	r3, [r7, #17]
 8003704:	4413      	add	r3, r2
 8003706:	4a71      	ldr	r2, [pc, #452]	; (80038cc <lcdHLine+0x214>)
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBlock = lcdBuffer[y*SCR_W/8+x1block+x2block];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2232      	movs	r2, #50	; 0x32
 8003710:	fb03 f202 	mul.w	r2, r3, r2
 8003714:	7c7b      	ldrb	r3, [r7, #17]
 8003716:	441a      	add	r2, r3
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4413      	add	r3, r2
 800371c:	4a6b      	ldr	r2, [pc, #428]	; (80038cc <lcdHLine+0x214>)
 800371e:	5cd3      	ldrb	r3, [r2, r3]
 8003720:	75bb      	strb	r3, [r7, #22]
	uint8_t fillBlock = 0xFF;
 8003722:	23ff      	movs	r3, #255	; 0xff
 8003724:	757b      	strb	r3, [r7, #21]
	if((8-offset1)>(x2-x1+1)) fillBlock = ~(0xFF>>(x2-x1+1));
 8003726:	7c3b      	ldrb	r3, [r7, #16]
 8003728:	f1c3 0208 	rsb	r2, r3, #8
 800372c:	88b9      	ldrh	r1, [r7, #4]
 800372e:	88fb      	ldrh	r3, [r7, #6]
 8003730:	1acb      	subs	r3, r1, r3
 8003732:	3301      	adds	r3, #1
 8003734:	429a      	cmp	r2, r3
 8003736:	dd09      	ble.n	800374c <lcdHLine+0x94>
 8003738:	88ba      	ldrh	r2, [r7, #4]
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	3301      	adds	r3, #1
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	fa42 f303 	asr.w	r3, r2, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	757b      	strb	r3, [r7, #21]
	switch(mode){
 800374c:	78bb      	ldrb	r3, [r7, #2]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d067      	beq.n	8003822 <lcdHLine+0x16a>
 8003752:	2b02      	cmp	r3, #2
 8003754:	f300 809e 	bgt.w	8003894 <lcdHLine+0x1dc>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <lcdHLine+0xaa>
 800375c:	2b01      	cmp	r3, #1
 800375e:	d02e      	beq.n	80037be <lcdHLine+0x106>
 8003760:	e098      	b.n	8003894 <lcdHLine+0x1dc>
	// clear
	case 0:
		firstBlock |= (fillBlock >> offset1);
 8003762:	7d7a      	ldrb	r2, [r7, #21]
 8003764:	7c3b      	ldrb	r3, [r7, #16]
 8003766:	fa42 f303 	asr.w	r3, r2, r3
 800376a:	b25a      	sxtb	r2, r3
 800376c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003770:	4313      	orrs	r3, r2
 8003772:	b25b      	sxtb	r3, r3
 8003774:	75fb      	strb	r3, [r7, #23]
		lastBlock |= (0xFF << (8-offset2-1));
 8003776:	7bbb      	ldrb	r3, [r7, #14]
 8003778:	f1c3 0307 	rsb	r3, r3, #7
 800377c:	22ff      	movs	r2, #255	; 0xff
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	b25a      	sxtb	r2, r3
 8003784:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003788:	4313      	orrs	r3, r2
 800378a:	b25b      	sxtb	r3, r3
 800378c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800378e:	2301      	movs	r3, #1
 8003790:	753b      	strb	r3, [r7, #20]
 8003792:	e00d      	b.n	80037b0 <lcdHLine+0xf8>
			lcdBuffer[y*SCR_W/8+x1block+i] |= 0xFF;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2232      	movs	r2, #50	; 0x32
 8003798:	fb03 f202 	mul.w	r2, r3, r2
 800379c:	7c7b      	ldrb	r3, [r7, #17]
 800379e:	441a      	add	r2, r3
 80037a0:	7d3b      	ldrb	r3, [r7, #20]
 80037a2:	4413      	add	r3, r2
 80037a4:	4a49      	ldr	r2, [pc, #292]	; (80038cc <lcdHLine+0x214>)
 80037a6:	21ff      	movs	r1, #255	; 0xff
 80037a8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80037aa:	7d3b      	ldrb	r3, [r7, #20]
 80037ac:	3301      	adds	r3, #1
 80037ae:	753b      	strb	r3, [r7, #20]
 80037b0:	7d3a      	ldrb	r2, [r7, #20]
 80037b2:	7bf9      	ldrb	r1, [r7, #15]
 80037b4:	7c7b      	ldrb	r3, [r7, #17]
 80037b6:	1acb      	subs	r3, r1, r3
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbeb      	blt.n	8003794 <lcdHLine+0xdc>
		}
		break;
 80037bc:	e06a      	b.n	8003894 <lcdHLine+0x1dc>
	// fill
	case 1:
		firstBlock &= ~(fillBlock >> offset1);
 80037be:	7d7a      	ldrb	r2, [r7, #21]
 80037c0:	7c3b      	ldrb	r3, [r7, #16]
 80037c2:	fa42 f303 	asr.w	r3, r2, r3
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	b25a      	sxtb	r2, r3
 80037cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037d0:	4013      	ands	r3, r2
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	75fb      	strb	r3, [r7, #23]
		lastBlock &= ~(0xFF << (8-offset2-1));
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	f1c3 0307 	rsb	r3, r3, #7
 80037dc:	22ff      	movs	r2, #255	; 0xff
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	b25b      	sxtb	r3, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	b25a      	sxtb	r2, r3
 80037e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037ec:	4013      	ands	r3, r2
 80037ee:	b25b      	sxtb	r3, r3
 80037f0:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 80037f2:	2301      	movs	r3, #1
 80037f4:	74fb      	strb	r3, [r7, #19]
 80037f6:	e00d      	b.n	8003814 <lcdHLine+0x15c>
			lcdBuffer[y*SCR_W/8+x1block+i] &= 0x00;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	2232      	movs	r2, #50	; 0x32
 80037fc:	fb03 f202 	mul.w	r2, r3, r2
 8003800:	7c7b      	ldrb	r3, [r7, #17]
 8003802:	441a      	add	r2, r3
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	4413      	add	r3, r2
 8003808:	4a30      	ldr	r2, [pc, #192]	; (80038cc <lcdHLine+0x214>)
 800380a:	2100      	movs	r1, #0
 800380c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800380e:	7cfb      	ldrb	r3, [r7, #19]
 8003810:	3301      	adds	r3, #1
 8003812:	74fb      	strb	r3, [r7, #19]
 8003814:	7cfa      	ldrb	r2, [r7, #19]
 8003816:	7bf9      	ldrb	r1, [r7, #15]
 8003818:	7c7b      	ldrb	r3, [r7, #17]
 800381a:	1acb      	subs	r3, r1, r3
 800381c:	429a      	cmp	r2, r3
 800381e:	dbeb      	blt.n	80037f8 <lcdHLine+0x140>
		}
		break;
 8003820:	e038      	b.n	8003894 <lcdHLine+0x1dc>
	// revert
	case 2:
		firstBlock ^= (fillBlock >> offset1);
 8003822:	7d7a      	ldrb	r2, [r7, #21]
 8003824:	7c3b      	ldrb	r3, [r7, #16]
 8003826:	fa42 f303 	asr.w	r3, r2, r3
 800382a:	b25a      	sxtb	r2, r3
 800382c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003830:	4053      	eors	r3, r2
 8003832:	b25b      	sxtb	r3, r3
 8003834:	75fb      	strb	r3, [r7, #23]
		lastBlock ^= (0xFF << (8-offset2-1));
 8003836:	7bbb      	ldrb	r3, [r7, #14]
 8003838:	f1c3 0307 	rsb	r3, r3, #7
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	b25a      	sxtb	r2, r3
 8003844:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003848:	4053      	eors	r3, r2
 800384a:	b25b      	sxtb	r3, r3
 800384c:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 800384e:	2301      	movs	r3, #1
 8003850:	74bb      	strb	r3, [r7, #18]
 8003852:	e018      	b.n	8003886 <lcdHLine+0x1ce>
			lcdBuffer[y*SCR_W/8+x1block+i] ^= 0xFF;
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	2232      	movs	r2, #50	; 0x32
 8003858:	fb03 f202 	mul.w	r2, r3, r2
 800385c:	7c7b      	ldrb	r3, [r7, #17]
 800385e:	441a      	add	r2, r3
 8003860:	7cbb      	ldrb	r3, [r7, #18]
 8003862:	4413      	add	r3, r2
 8003864:	4a19      	ldr	r2, [pc, #100]	; (80038cc <lcdHLine+0x214>)
 8003866:	5cd2      	ldrb	r2, [r2, r3]
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2132      	movs	r1, #50	; 0x32
 800386c:	fb03 f101 	mul.w	r1, r3, r1
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	4419      	add	r1, r3
 8003874:	7cbb      	ldrb	r3, [r7, #18]
 8003876:	440b      	add	r3, r1
 8003878:	43d2      	mvns	r2, r2
 800387a:	b2d1      	uxtb	r1, r2
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <lcdHLine+0x214>)
 800387e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 1; i < (x2block-x1block); i++){
 8003880:	7cbb      	ldrb	r3, [r7, #18]
 8003882:	3301      	adds	r3, #1
 8003884:	74bb      	strb	r3, [r7, #18]
 8003886:	7cba      	ldrb	r2, [r7, #18]
 8003888:	7bf9      	ldrb	r1, [r7, #15]
 800388a:	7c7b      	ldrb	r3, [r7, #17]
 800388c:	1acb      	subs	r3, r1, r3
 800388e:	429a      	cmp	r2, r3
 8003890:	dbe0      	blt.n	8003854 <lcdHLine+0x19c>
		}
		break;
 8003892:	bf00      	nop
	}
	lcdBuffer[y*SCR_W/8+x1block] = firstBlock;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2232      	movs	r2, #50	; 0x32
 8003898:	fb03 f202 	mul.w	r2, r3, r2
 800389c:	7c7b      	ldrb	r3, [r7, #17]
 800389e:	4413      	add	r3, r2
 80038a0:	490a      	ldr	r1, [pc, #40]	; (80038cc <lcdHLine+0x214>)
 80038a2:	7dfa      	ldrb	r2, [r7, #23]
 80038a4:	54ca      	strb	r2, [r1, r3]
	if(x2block>x1block)	lcdBuffer[y*SCR_W/8+x2block] = lastBlock;
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	7c7b      	ldrb	r3, [r7, #17]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d908      	bls.n	80038c0 <lcdHLine+0x208>
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	2232      	movs	r2, #50	; 0x32
 80038b2:	fb03 f202 	mul.w	r2, r3, r2
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	4413      	add	r3, r2
 80038ba:	4904      	ldr	r1, [pc, #16]	; (80038cc <lcdHLine+0x214>)
 80038bc:	7dba      	ldrb	r2, [r7, #22]
 80038be:	54ca      	strb	r2, [r1, r3]
}
 80038c0:	bf00      	nop
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc90      	pop	{r4, r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20002690 	.word	0x20002690

080038d0 <lcdRefresh>:

void lcdRefresh(void){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
	if(allowUpdate){
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <lcdRefresh+0x7c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d032      	beq.n	8003944 <lcdRefresh+0x74>
		SMLCD_SCS_H;
 80038de:	2201      	movs	r2, #1
 80038e0:	2140      	movs	r1, #64	; 0x40
 80038e2:	481b      	ldr	r0, [pc, #108]	; (8003950 <lcdRefresh+0x80>)
 80038e4:	f003 faec 	bl	8006ec0 <HAL_GPIO_WritePin>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 80038e8:	2301      	movs	r3, #1
 80038ea:	71fb      	strb	r3, [r7, #7]
 80038ec:	e01c      	b.n	8003928 <lcdRefresh+0x58>
			lineAddress1[1] = reverse_uint8(i);
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff f869 	bl	80029c8 <reverse_uint8>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <lcdRefresh+0x84>)
 80038fc:	705a      	strb	r2, [r3, #1]
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)lineAddress1, 2, 150);
 80038fe:	2396      	movs	r3, #150	; 0x96
 8003900:	2202      	movs	r2, #2
 8003902:	4914      	ldr	r1, [pc, #80]	; (8003954 <lcdRefresh+0x84>)
 8003904:	4814      	ldr	r0, [pc, #80]	; (8003958 <lcdRefresh+0x88>)
 8003906:	f006 fb9a 	bl	800a03e <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)(&lcdBuffer[(i-1)*50]), 50, 150);
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	3b01      	subs	r3, #1
 800390e:	2232      	movs	r2, #50	; 0x32
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	4a11      	ldr	r2, [pc, #68]	; (800395c <lcdRefresh+0x8c>)
 8003916:	1899      	adds	r1, r3, r2
 8003918:	2396      	movs	r3, #150	; 0x96
 800391a:	2232      	movs	r2, #50	; 0x32
 800391c:	480e      	ldr	r0, [pc, #56]	; (8003958 <lcdRefresh+0x88>)
 800391e:	f006 fb8e 	bl	800a03e <HAL_SPI_Transmit>
		for(uint8_t i = 1; i <= SCR_H+1; i++){
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	3301      	adds	r3, #1
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2bf1      	cmp	r3, #241	; 0xf1
 800392c:	d9df      	bls.n	80038ee <lcdRefresh+0x1e>
		}
		HAL_SPI_Transmit(&SMLCD_SPI_PORT, (uint8_t *)dummyBytes, 2, 150);
 800392e:	2396      	movs	r3, #150	; 0x96
 8003930:	2202      	movs	r2, #2
 8003932:	490b      	ldr	r1, [pc, #44]	; (8003960 <lcdRefresh+0x90>)
 8003934:	4808      	ldr	r0, [pc, #32]	; (8003958 <lcdRefresh+0x88>)
 8003936:	f006 fb82 	bl	800a03e <HAL_SPI_Transmit>
		SMLCD_SCS_L;
 800393a:	2200      	movs	r2, #0
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	4804      	ldr	r0, [pc, #16]	; (8003950 <lcdRefresh+0x80>)
 8003940:	f003 fabe 	bl	8006ec0 <HAL_GPIO_WritePin>
	}
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000078 	.word	0x20000078
 8003950:	40020000 	.word	0x40020000
 8003954:	2000007c 	.word	0x2000007c
 8003958:	200058c4 	.word	0x200058c4
 800395c:	20002690 	.word	0x20002690
 8003960:	2000268c 	.word	0x2000268c

08003964 <lcdRect>:

void lcdRect(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode){
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	4604      	mov	r4, r0
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	80fb      	strh	r3, [r7, #6]
 8003976:	4603      	mov	r3, r0
 8003978:	80bb      	strh	r3, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	70fb      	strb	r3, [r7, #3]
 800397e:	4613      	mov	r3, r2
 8003980:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = y1; i <= y2; i++){
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e009      	b.n	800399c <lcdRect+0x38>
		lcdHLine(x1, x2, i, mode);
 8003988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	88b9      	ldrh	r1, [r7, #4]
 8003990:	88f8      	ldrh	r0, [r7, #6]
 8003992:	f7ff fe91 	bl	80036b8 <lcdHLine>
	for(uint8_t i = y1; i <= y2; i++){
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	3301      	adds	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	78bb      	ldrb	r3, [r7, #2]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d9f1      	bls.n	8003988 <lcdRect+0x24>
	}
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}

080039ae <lcdRoundedRect2>:
		} else {
			lcdHLine(x1, x2, i, mode);
		}
	}
}
void lcdRoundedRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline, uint8_t r){
 80039ae:	b590      	push	{r4, r7, lr}
 80039b0:	b089      	sub	sp, #36	; 0x24
 80039b2:	af02      	add	r7, sp, #8
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	461a      	mov	r2, r3
 80039bc:	4623      	mov	r3, r4
 80039be:	80fb      	strh	r3, [r7, #6]
 80039c0:	4603      	mov	r3, r0
 80039c2:	80bb      	strh	r3, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	4613      	mov	r3, r2
 80039ca:	70bb      	strb	r3, [r7, #2]
	// check if radius not exceded
	if((2*r>(x2-x1))||(2*r>(y2-y1))) r = 0;
 80039cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039d0:	005a      	lsls	r2, r3, #1
 80039d2:	88b9      	ldrh	r1, [r7, #4]
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	1acb      	subs	r3, r1, r3
 80039d8:	429a      	cmp	r2, r3
 80039da:	dc07      	bgt.n	80039ec <lcdRoundedRect2+0x3e>
 80039dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80039e0:	005a      	lsls	r2, r3, #1
 80039e2:	78b9      	ldrb	r1, [r7, #2]
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	1acb      	subs	r3, r1, r3
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dd02      	ble.n	80039f2 <lcdRoundedRect2+0x44>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	if(x1!=x2 && y1!=y2){
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	88bb      	ldrh	r3, [r7, #4]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	f000 81d5 	beq.w	8003da6 <lcdRoundedRect2+0x3f8>
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	78bb      	ldrb	r3, [r7, #2]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f000 81d0 	beq.w	8003da6 <lcdRoundedRect2+0x3f8>
		for(uint8_t y = y1; y <= y2; y++){
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	75fb      	strb	r3, [r7, #23]
 8003a0a:	e0a3      	b.n	8003b54 <lcdRoundedRect2+0x1a6>
			if((y-y1)<r){
 8003a0c:	7dfa      	ldrb	r2, [r7, #23]
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a16:	429a      	cmp	r2, r3
 8003a18:	da43      	bge.n	8003aa2 <lcdRoundedRect2+0xf4>
				uint8_t off = (int)(sqrt(r*r-(r-y+y1)*(r-y+y1)));
 8003a1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a1e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003a22:	fb03 f202 	mul.w	r2, r3, r2
 8003a26:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	1ac9      	subs	r1, r1, r3
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	440b      	add	r3, r1
 8003a32:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003a36:	7df9      	ldrb	r1, [r7, #23]
 8003a38:	1a40      	subs	r0, r0, r1
 8003a3a:	78f9      	ldrb	r1, [r7, #3]
 8003a3c:	4401      	add	r1, r0
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fd7d 	bl	8000544 <__aeabi_i2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	ec43 2b10 	vmov	d0, r2, r3
 8003a52:	f00e fee1 	bl	8012818 <sqrt>
 8003a56:	ec53 2b10 	vmov	r2, r3, d0
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f88b 	bl	8000b78 <__aeabi_d2iz>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73bb      	strb	r3, [r7, #14]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003a66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	4413      	add	r3, r2
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b298      	uxth	r0, r3
 8003a7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	88ba      	ldrh	r2, [r7, #4]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	7bbb      	ldrb	r3, [r7, #14]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003a92:	7dfa      	ldrb	r2, [r7, #23]
 8003a94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7ff fa46 	bl	8002f2c <lcdHLine2>
 8003aa0:	e055      	b.n	8003b4e <lcdRoundedRect2+0x1a0>
			} else if((y2-y)<r){
 8003aa2:	78ba      	ldrb	r2, [r7, #2]
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003aac:	429a      	cmp	r2, r3
 8003aae:	da43      	bge.n	8003b38 <lcdRoundedRect2+0x18a>
				uint8_t off = (int)(sqrt(r*r-(r-y2+y)*(r-y2+y)));
 8003ab0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ab4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003ab8:	fb03 f202 	mul.w	r2, r3, r2
 8003abc:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003ac0:	78bb      	ldrb	r3, [r7, #2]
 8003ac2:	1ac9      	subs	r1, r1, r3
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003acc:	78b9      	ldrb	r1, [r7, #2]
 8003ace:	1a40      	subs	r0, r0, r1
 8003ad0:	7df9      	ldrb	r1, [r7, #23]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd32 	bl	8000544 <__aeabi_i2d>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	ec43 2b10 	vmov	d0, r2, r3
 8003ae8:	f00e fe96 	bl	8012818 <sqrt>
 8003aec:	ec53 2b10 	vmov	r2, r3, d0
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fd f840 	bl	8000b78 <__aeabi_d2iz>
 8003af8:	4603      	mov	r3, r0
 8003afa:	73fb      	strb	r3, [r7, #15]
				lcdHLine2(x1+r-off, x2-r+off, y, mode, fill);
 8003afc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4413      	add	r3, r2
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b298      	uxth	r0, r3
 8003b10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	88ba      	ldrh	r2, [r7, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	b299      	uxth	r1, r3
 8003b24:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003b28:	7dfa      	ldrb	r2, [r7, #23]
 8003b2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4623      	mov	r3, r4
 8003b32:	f7ff f9fb 	bl	8002f2c <lcdHLine2>
 8003b36:	e00a      	b.n	8003b4e <lcdRoundedRect2+0x1a0>
			} else {
				lcdHLine2(x1, x2, y, mode, fill);
 8003b38:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003b3c:	7dfa      	ldrb	r2, [r7, #23]
 8003b3e:	88b9      	ldrh	r1, [r7, #4]
 8003b40:	88f8      	ldrh	r0, [r7, #6]
 8003b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4623      	mov	r3, r4
 8003b4a:	f7ff f9ef 	bl	8002f2c <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	3301      	adds	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
 8003b54:	7dfa      	ldrb	r2, [r7, #23]
 8003b56:	78bb      	ldrb	r3, [r7, #2]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	f67f af57 	bls.w	8003a0c <lcdRoundedRect2+0x5e>
			}
		}
		if(outline){
 8003b5e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 811f 	beq.w	8003da6 <lcdRoundedRect2+0x3f8>
			lcdHLine2(x1+r, x2-r, y1, mode,1);
 8003b68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	4413      	add	r3, r2
 8003b72:	b298      	uxth	r0, r3
 8003b74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	88ba      	ldrh	r2, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	2401      	movs	r4, #1
 8003b88:	9400      	str	r4, [sp, #0]
 8003b8a:	f7ff f9cf 	bl	8002f2c <lcdHLine2>
			lcdHLine2(x1+r, x2-r, y2, mode,1);
 8003b8e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	4413      	add	r3, r2
 8003b98:	b298      	uxth	r0, r3
 8003b9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	88ba      	ldrh	r2, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	b299      	uxth	r1, r3
 8003ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003baa:	78ba      	ldrb	r2, [r7, #2]
 8003bac:	2401      	movs	r4, #1
 8003bae:	9400      	str	r4, [sp, #0]
 8003bb0:	f7ff f9bc 	bl	8002f2c <lcdHLine2>
			lcdVLine(x1, y1+r, y2-r, mode);
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	78ba      	ldrb	r2, [r7, #2]
 8003bc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bd0:	88f8      	ldrh	r0, [r7, #6]
 8003bd2:	f7ff f929 	bl	8002e28 <lcdVLine>
			lcdVLine(x2, y1+r, y2-r, mode);
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	b299      	uxth	r1, r3
 8003be4:	78ba      	ldrb	r2, [r7, #2]
 8003be6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bf2:	88b8      	ldrh	r0, [r7, #4]
 8003bf4:	f7ff f918 	bl	8002e28 <lcdVLine>
//			uint16_t nextOff = 0;
			for(uint16_t i = 0; i < (r-1); i++){
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	82bb      	strh	r3, [r7, #20]
 8003bfc:	e0cc      	b.n	8003d98 <lcdRoundedRect2+0x3ea>
				//corner line offsets from X of circle center
				uint16_t off = (uint16_t)(sqrt(r*r-(r-i)*(r-i)));
 8003bfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c02:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003c0e:	8abb      	ldrh	r3, [r7, #20]
 8003c10:	1acb      	subs	r3, r1, r3
 8003c12:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003c16:	8ab9      	ldrh	r1, [r7, #20]
 8003c18:	1a41      	subs	r1, r0, r1
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc8f 	bl	8000544 <__aeabi_i2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	ec43 2b10 	vmov	d0, r2, r3
 8003c2e:	f00e fdf3 	bl	8012818 <sqrt>
 8003c32:	ec53 2b10 	vmov	r2, r3, d0
 8003c36:	4610      	mov	r0, r2
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f7fc ffc5 	bl	8000bc8 <__aeabi_d2uiz>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	827b      	strh	r3, [r7, #18]
				uint16_t nextOff = (uint16_t)(sqrt(r*r-(r-i-1)*(r-i-1)));
 8003c42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c46:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003c4a:	fb03 f202 	mul.w	r2, r3, r2
 8003c4e:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8003c52:	8abb      	ldrh	r3, [r7, #20]
 8003c54:	1acb      	subs	r3, r1, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003c5c:	8ab9      	ldrh	r1, [r7, #20]
 8003c5e:	1a41      	subs	r1, r0, r1
 8003c60:	3901      	subs	r1, #1
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc6b 	bl	8000544 <__aeabi_i2d>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	ec43 2b10 	vmov	d0, r2, r3
 8003c76:	f00e fdcf 	bl	8012818 <sqrt>
 8003c7a:	ec53 2b10 	vmov	r2, r3, d0
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc ffa1 	bl	8000bc8 <__aeabi_d2uiz>
 8003c86:	4603      	mov	r3, r0
 8003c88:	823b      	strh	r3, [r7, #16]
				//reduce corner pixel-lines overlapping
				if((nextOff-off)>0) off++;
 8003c8a:	8a3a      	ldrh	r2, [r7, #16]
 8003c8c:	8a7b      	ldrh	r3, [r7, #18]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	dd02      	ble.n	8003c9a <lcdRoundedRect2+0x2ec>
 8003c94:	8a7b      	ldrh	r3, [r7, #18]
 8003c96:	3301      	adds	r3, #1
 8003c98:	827b      	strh	r3, [r7, #18]
				//left corners
				lcdHLine2(x1+r-nextOff, x1+r-off, y1+i+1, mode, 1);
 8003c9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	8a3b      	ldrh	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	b298      	uxth	r0, r3
 8003cac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	8a7b      	ldrh	r3, [r7, #18]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	b299      	uxth	r1, r3
 8003cbe:	8abb      	ldrh	r3, [r7, #20]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cd0:	2401      	movs	r4, #1
 8003cd2:	9400      	str	r4, [sp, #0]
 8003cd4:	f7ff f92a 	bl	8002f2c <lcdHLine2>
				lcdHLine2(x1+r-nextOff, x1+r-off, y2-i-1, mode, 1);
 8003cd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	8a3b      	ldrh	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	b298      	uxth	r0, r3
 8003cea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	8a7b      	ldrh	r3, [r7, #18]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	b299      	uxth	r1, r3
 8003cfc:	8abb      	ldrh	r3, [r7, #20]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	78ba      	ldrb	r2, [r7, #2]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d0e:	2401      	movs	r4, #1
 8003d10:	9400      	str	r4, [sp, #0]
 8003d12:	f7ff f90b 	bl	8002f2c <lcdHLine2>
				//right corners
				lcdHLine2(x2-r+off, x2-r+nextOff, y1+i+1, mode, 1);
 8003d16:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	88ba      	ldrh	r2, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	8a7b      	ldrh	r3, [r7, #18]
 8003d24:	4413      	add	r3, r2
 8003d26:	b298      	uxth	r0, r3
 8003d28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	88ba      	ldrh	r2, [r7, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	8a3b      	ldrh	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	b299      	uxth	r1, r3
 8003d3a:	8abb      	ldrh	r3, [r7, #20]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	4413      	add	r3, r2
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d4c:	2401      	movs	r4, #1
 8003d4e:	9400      	str	r4, [sp, #0]
 8003d50:	f7ff f8ec 	bl	8002f2c <lcdHLine2>
				lcdHLine2(x2-r+off, x2-r+nextOff, y2-i-1, mode, 1);
 8003d54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	88ba      	ldrh	r2, [r7, #4]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	8a7b      	ldrh	r3, [r7, #18]
 8003d62:	4413      	add	r3, r2
 8003d64:	b298      	uxth	r0, r3
 8003d66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	88ba      	ldrh	r2, [r7, #4]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	8a3b      	ldrh	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	b299      	uxth	r1, r3
 8003d78:	8abb      	ldrh	r3, [r7, #20]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	78ba      	ldrb	r2, [r7, #2]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d8a:	2401      	movs	r4, #1
 8003d8c:	9400      	str	r4, [sp, #0]
 8003d8e:	f7ff f8cd 	bl	8002f2c <lcdHLine2>
			for(uint16_t i = 0; i < (r-1); i++){
 8003d92:	8abb      	ldrh	r3, [r7, #20]
 8003d94:	3301      	adds	r3, #1
 8003d96:	82bb      	strh	r3, [r7, #20]
 8003d98:	8aba      	ldrh	r2, [r7, #20]
 8003d9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f6ff af2c 	blt.w	8003bfe <lcdRoundedRect2+0x250>
			}
		}
	}
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd90      	pop	{r4, r7, pc}

08003dae <lcdRect2>:


void lcdRect2(uint16_t x1, uint16_t x2, uint8_t y1, uint8_t y2, uint8_t mode, uint8_t fill, uint8_t outline){
 8003dae:	b590      	push	{r4, r7, lr}
 8003db0:	b087      	sub	sp, #28
 8003db2:	af02      	add	r7, sp, #8
 8003db4:	4604      	mov	r4, r0
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	80fb      	strh	r3, [r7, #6]
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	80bb      	strh	r3, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	70bb      	strb	r3, [r7, #2]
	if(x1!=x2 && y1!=y2){
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	88bb      	ldrh	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d046      	beq.n	8003e62 <lcdRect2+0xb4>
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	78bb      	ldrb	r3, [r7, #2]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d042      	beq.n	8003e62 <lcdRect2+0xb4>
		for(uint8_t y = y1; y <= y2; y++){
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	73fb      	strb	r3, [r7, #15]
 8003de0:	e00d      	b.n	8003dfe <lcdRect2+0x50>
			lcdHLine2(x1, x2, y, mode, fill);
 8003de2:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	88b9      	ldrh	r1, [r7, #4]
 8003dea:	88f8      	ldrh	r0, [r7, #6]
 8003dec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4623      	mov	r3, r4
 8003df4:	f7ff f89a 	bl	8002f2c <lcdHLine2>
		for(uint8_t y = y1; y <= y2; y++){
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	78bb      	ldrb	r3, [r7, #2]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d9ed      	bls.n	8003de2 <lcdRect2+0x34>
		}
		if(outline){
 8003e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d029      	beq.n	8003e62 <lcdRect2+0xb4>
			lcdHLine2(x1, x2, y1, mode,1);
 8003e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	88b9      	ldrh	r1, [r7, #4]
 8003e16:	88f8      	ldrh	r0, [r7, #6]
 8003e18:	2401      	movs	r4, #1
 8003e1a:	9400      	str	r4, [sp, #0]
 8003e1c:	f7ff f886 	bl	8002f2c <lcdHLine2>
			lcdHLine2(x1, x2, y2, mode,1);
 8003e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e24:	78ba      	ldrb	r2, [r7, #2]
 8003e26:	88b9      	ldrh	r1, [r7, #4]
 8003e28:	88f8      	ldrh	r0, [r7, #6]
 8003e2a:	2401      	movs	r4, #1
 8003e2c:	9400      	str	r4, [sp, #0]
 8003e2e:	f7ff f87d 	bl	8002f2c <lcdHLine2>
			lcdVLine(x1, y1+1, y2-1, mode);
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	b299      	uxth	r1, r3
 8003e3a:	78bb      	ldrb	r3, [r7, #2]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e44:	88f8      	ldrh	r0, [r7, #6]
 8003e46:	f7fe ffef 	bl	8002e28 <lcdVLine>
			lcdVLine(x2, y1+1, y2-1, mode);
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b299      	uxth	r1, r3
 8003e52:	78bb      	ldrb	r3, [r7, #2]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e5c:	88b8      	ldrh	r0, [r7, #4]
 8003e5e:	f7fe ffe3 	bl	8002e28 <lcdVLine>
		}
	}
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}

08003e6a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e72:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e76:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003e82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e86:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003e8a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003e92:	e000      	b.n	8003e96 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003e94:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003e96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f9      	beq.n	8003e94 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003ea0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003eaa:	687b      	ldr	r3, [r7, #4]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ffd1 	bl	8003e6a <ITM_SendChar>
	return(ch);
 8003ec8:	687b      	ldr	r3, [r7, #4]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <setTimeout>:

uint8_t timeoutState = 0;
uint16_t timeoutValue;
uint16_t timeoutSetpoint;
void (*timeoutClbkPtr)(void);
void setTimeout(uint16_t ms,  void (*callback)(void)){
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	80fb      	strh	r3, [r7, #6]
	// set timeout setpoint
	timeoutSetpoint = ms;
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <setTimeout+0x30>)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	8013      	strh	r3, [r2, #0]
	// reset timeout value
	timeoutValue = 0;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <setTimeout+0x34>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	801a      	strh	r2, [r3, #0]
	// set callback function
	timeoutClbkPtr = callback;
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <setTimeout+0x38>)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6013      	str	r3, [r2, #0]
	// flag timeout running
	timeoutState = 1;
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <setTimeout+0x3c>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20005814 	.word	0x20005814
 8003f08:	20005812 	.word	0x20005812
 8003f0c:	20005818 	.word	0x20005818
 8003f10:	20005811 	.word	0x20005811

08003f14 <showAlert>:

uint8_t alertFlag = 0;
void showAlert(void){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af04      	add	r7, sp, #16
	lcdRect2(50, 350, 50, 190, 3, 0, 1);
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2303      	movs	r3, #3
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	23be      	movs	r3, #190	; 0xbe
 8003f28:	2232      	movs	r2, #50	; 0x32
 8003f2a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003f2e:	2032      	movs	r0, #50	; 0x32
 8003f30:	f7ff ff3d 	bl	8003dae <lcdRect2>
	lcdPutStr(90, 90, "Alert!", zekton24font);
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <showAlert+0x34>)
 8003f36:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <showAlert+0x38>)
 8003f38:	215a      	movs	r1, #90	; 0x5a
 8003f3a:	205a      	movs	r0, #90	; 0x5a
 8003f3c:	f7fe ff46 	bl	8002dcc <lcdPutStr>
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	08013f3c 	.word	0x08013f3c
 8003f4c:	08013a4c 	.word	0x08013a4c

08003f50 <hideAlert>:
void hideAlert(void){
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	alertFlag = 0;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <hideAlert+0x14>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	2000581c 	.word	0x2000581c

08003f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
 8003f6e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f70:	f002 fbb4 	bl	80066dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f74:	f000 f906 	bl	8004184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f78:	f7fe f9e8 	bl	800234c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003f7c:	f001 f924 	bl	80051c8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003f80:	f000 fb36 	bl	80045f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003f84:	f000 fec0 	bl	8004d08 <MX_TIM1_Init>
  MX_TIM10_Init();
 8003f88:	f000 ff60 	bl	8004e4c <MX_TIM10_Init>
  MX_I2C1_Init();
 8003f8c:	f7fe fc94 	bl	80028b8 <MX_I2C1_Init>
  MX_TIM11_Init();
 8003f90:	f000 ff80 	bl	8004e94 <MX_TIM11_Init>
  MX_RTC_Init();
 8003f94:	f000 fa4a 	bl	800442c <MX_RTC_Init>
  MX_TIM13_Init();
 8003f98:	f000 ffa0 	bl	8004edc <MX_TIM13_Init>
  MX_SDIO_SD_Init();
 8003f9c:	f000 faa0 	bl	80044e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003fa0:	f008 fd76 	bl	800ca90 <MX_FATFS_Init>
  MX_USART6_UART_Init();
 8003fa4:	f001 f93a 	bl	800521c <MX_USART6_UART_Init>
  MX_TIM14_Init();
 8003fa8:	f000 ffbc 	bl	8004f24 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //  Initialize VCOMIN pulse on CH1 (PIN PE9) for Sharp Memory LCD
  HAL_TIM_Base_Init(&htim1);
 8003fac:	485b      	ldr	r0, [pc, #364]	; (800411c <main+0x1b4>)
 8003fae:	f006 fa4d 	bl	800a44c <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8003fb2:	485a      	ldr	r0, [pc, #360]	; (800411c <main+0x1b4>)
 8003fb4:	f006 fa9a 	bl	800a4ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4858      	ldr	r0, [pc, #352]	; (800411c <main+0x1b4>)
 8003fbc:	f006 fb8e 	bl	800a6dc <HAL_TIM_PWM_Start>
  // Initialize Timer 10 (1Hz) - for stopwatch
  stwInit(&htim10);
 8003fc0:	4857      	ldr	r0, [pc, #348]	; (8004120 <main+0x1b8>)
 8003fc2:	f000 fd8f 	bl	8004ae4 <stwInit>
  // Vibration motor PWM
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4856      	ldr	r0, [pc, #344]	; (8004124 <main+0x1bc>)
 8003fca:	f006 fb87 	bl	800a6dc <HAL_TIM_PWM_Start>

  // TIMER 11 - 20Hz button scanner
  HAL_TIM_Base_Start_IT(&htim11);
 8003fce:	4856      	ldr	r0, [pc, #344]	; (8004128 <main+0x1c0>)
 8003fd0:	f006 fa8c 	bl	800a4ec <HAL_TIM_Base_Start_IT>
  initButtons(btnsPtrs);
 8003fd4:	4855      	ldr	r0, [pc, #340]	; (800412c <main+0x1c4>)
 8003fd6:	f7fd ff93 	bl	8001f00 <initButtons>

  // TIMER 13 - 1Hz sensors logger
  HAL_TIM_Base_Start_IT(&htim13);
 8003fda:	4855      	ldr	r0, [pc, #340]	; (8004130 <main+0x1c8>)
 8003fdc:	f006 fa86 	bl	800a4ec <HAL_TIM_Base_Start_IT>
  gpsDev = initGps(&huart6);
 8003fe0:	4c54      	ldr	r4, [pc, #336]	; (8004134 <main+0x1cc>)
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	4954      	ldr	r1, [pc, #336]	; (8004138 <main+0x1d0>)
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fac0 	bl	800256c <initGps>
 8003fec:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003ff0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f44f 7319 	mov.w	r3, #612	; 0x264
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f00b fcd5 	bl	800f9ac <memcpy>
  // bmp180module defined inside of c file
  bmp_init(&bmp180module);
 8004002:	484e      	ldr	r0, [pc, #312]	; (800413c <main+0x1d4>)
 8004004:	f7fd fb08 	bl	8001618 <bmp_init>
//  init_ring_buffer(&baroRing, 399);
  init_ring_buffer(&tempRing, 399);
 8004008:	f240 118f 	movw	r1, #399	; 0x18f
 800400c:	484c      	ldr	r0, [pc, #304]	; (8004140 <main+0x1d8>)
 800400e:	f002 fa57 	bl	80064c0 <init_ring_buffer>
  cbuf_init(&baroRing, sizeof(uint16_t), 399);
 8004012:	f240 128f 	movw	r2, #399	; 0x18f
 8004016:	2102      	movs	r1, #2
 8004018:	484a      	ldr	r0, [pc, #296]	; (8004144 <main+0x1dc>)
 800401a:	f002 f9b5 	bl	8006388 <cbuf_init>

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800401e:	2201      	movs	r2, #1
 8004020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004024:	4848      	ldr	r0, [pc, #288]	; (8004148 <main+0x1e0>)
 8004026:	f002 ff4b 	bl	8006ec0 <HAL_GPIO_WritePin>
  	Mount_SD("/");
 800402a:	4848      	ldr	r0, [pc, #288]	; (800414c <main+0x1e4>)
 800402c:	f7fc ffd4 	bl	8000fd8 <Mount_SD>
  	Create_File("FILE1.TXT");
 8004030:	4847      	ldr	r0, [pc, #284]	; (8004150 <main+0x1e8>)
 8004032:	f7fd f89f 	bl	8001174 <Create_File>
  	Update_File("FILE1.TXT", "Hello world, SD cart write \n");
 8004036:	4947      	ldr	r1, [pc, #284]	; (8004154 <main+0x1ec>)
 8004038:	4845      	ldr	r0, [pc, #276]	; (8004150 <main+0x1e8>)
 800403a:	f7fd f927 	bl	800128c <Update_File>
  	Create_File("FILE4.TXT");
 800403e:	4846      	ldr	r0, [pc, #280]	; (8004158 <main+0x1f0>)
 8004040:	f7fd f898 	bl	8001174 <Create_File>
  	char fileText[50];
  	Read_File("config.txt", &fileText);
 8004044:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004048:	4619      	mov	r1, r3
 800404a:	4844      	ldr	r0, [pc, #272]	; (800415c <main+0x1f4>)
 800404c:	f7fc ffe0 	bl	8001010 <Read_File>

  	// log state after reset
  	HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 8004050:	2200      	movs	r2, #0
 8004052:	4943      	ldr	r1, [pc, #268]	; (8004160 <main+0x1f8>)
 8004054:	4843      	ldr	r0, [pc, #268]	; (8004164 <main+0x1fc>)
 8004056:	f004 fe93 	bl	8008d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 800405a:	2200      	movs	r2, #0
 800405c:	4942      	ldr	r1, [pc, #264]	; (8004168 <main+0x200>)
 800405e:	4841      	ldr	r0, [pc, #260]	; (8004164 <main+0x1fc>)
 8004060:	f004 feec 	bl	8008e3c <HAL_RTC_GetDate>
	char tmpl[50] = {0};
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800406a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800406e:	222e      	movs	r2, #46	; 0x2e
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f00b fca8 	bl	800f9c8 <memset>
	sprintf(&tmpl, "%02d:%02d:%02d --- Initialized ---\n", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 8004078:	4b39      	ldr	r3, [pc, #228]	; (8004160 <main+0x1f8>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4b38      	ldr	r3, [pc, #224]	; (8004160 <main+0x1f8>)
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	4619      	mov	r1, r3
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <main+0x1f8>)
 8004086:	789b      	ldrb	r3, [r3, #2]
 8004088:	f507 701a 	add.w	r0, r7, #616	; 0x268
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	460b      	mov	r3, r1
 8004090:	4936      	ldr	r1, [pc, #216]	; (800416c <main+0x204>)
 8004092:	f00c fb55 	bl	8010740 <siprintf>
	SD_logger(tmpl);
 8004096:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc ff86 	bl	8000fac <SD_logger>
//  	Unmount_SD("/");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcdClearBuffer();
 80040a0:	f7fe fcbc 	bl	8002a1c <lcdClearBuffer>
  lcdRefresh();
 80040a4:	f7ff fc14 	bl	80038d0 <lcdRefresh>
  while (1)
  {
	  // periodic execution driven by flag modified inside of timer interrupt
	  if(updateBmpData_flag){
 80040a8:	4b31      	ldr	r3, [pc, #196]	; (8004170 <main+0x208>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00f      	beq.n	80040d0 <main+0x168>
		bmpData = getBmpData(&bmp180module);
 80040b0:	4c30      	ldr	r4, [pc, #192]	; (8004174 <main+0x20c>)
 80040b2:	463b      	mov	r3, r7
 80040b4:	4921      	ldr	r1, [pc, #132]	; (800413c <main+0x1d4>)
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd fd16 	bl	8001ae8 <getBmpData>
 80040bc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80040c0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80040c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		updateBmpData_flag = 0;
 80040ca:	4b29      	ldr	r3, [pc, #164]	; (8004170 <main+0x208>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
	  }
	  // functions executed along with the menu
		HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BIN);
 80040d0:	2200      	movs	r2, #0
 80040d2:	4923      	ldr	r1, [pc, #140]	; (8004160 <main+0x1f8>)
 80040d4:	4823      	ldr	r0, [pc, #140]	; (8004164 <main+0x1fc>)
 80040d6:	f004 fe53 	bl	8008d80 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BIN);
 80040da:	2200      	movs	r2, #0
 80040dc:	4922      	ldr	r1, [pc, #136]	; (8004168 <main+0x200>)
 80040de:	4821      	ldr	r0, [pc, #132]	; (8004164 <main+0x1fc>)
 80040e0:	f004 feac 	bl	8008e3c <HAL_RTC_GetDate>
		if(RtcTime.Minutes == 0 && RtcTime.Seconds==0){
 80040e4:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <main+0x1f8>)
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <main+0x194>
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <main+0x1f8>)
 80040ee:	789b      	ldrb	r3, [r3, #2]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d103      	bne.n	80040fc <main+0x194>
			pulseVib(40, 60);
 80040f4:	213c      	movs	r1, #60	; 0x3c
 80040f6:	2028      	movs	r0, #40	; 0x28
 80040f8:	f001 f954 	bl	80053a4 <pulseVib>
		}
	  lcdClearBuffer();
 80040fc:	f7fe fc8e 	bl	8002a1c <lcdClearBuffer>
	  // functions executed through GUI
	  showGui();
 8004100:	f7fe fbb6 	bl	8002870 <showGui>

	  if(alertFlag){
 8004104:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <main+0x210>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <main+0x1ae>
		  showAlert();
 800410c:	f7ff ff02 	bl	8003f14 <showAlert>
		btn_B2.onSinglePressHandler = &hideAlert;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <main+0x214>)
 8004112:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <main+0x218>)
 8004114:	611a      	str	r2, [r3, #16]

	  }

	  lcdRefresh();
 8004116:	f7ff fbdb 	bl	80038d0 <lcdRefresh>
	  if(updateBmpData_flag){
 800411a:	e7c5      	b.n	80040a8 <main+0x140>
 800411c:	20005a18 	.word	0x20005a18
 8004120:	20005a60 	.word	0x20005a60
 8004124:	20005b38 	.word	0x20005b38
 8004128:	20005aa8 	.word	0x20005aa8
 800412c:	20000050 	.word	0x20000050
 8004130:	20005af0 	.word	0x20005af0
 8004134:	200055ac 	.word	0x200055ac
 8004138:	20005bc4 	.word	0x20005bc4
 800413c:	2000236c 	.word	0x2000236c
 8004140:	2000559c 	.word	0x2000559c
 8004144:	20005588 	.word	0x20005588
 8004148:	40020800 	.word	0x40020800
 800414c:	08013a54 	.word	0x08013a54
 8004150:	08013a58 	.word	0x08013a58
 8004154:	08013a64 	.word	0x08013a64
 8004158:	08013a84 	.word	0x08013a84
 800415c:	08013a90 	.word	0x08013a90
 8004160:	20005570 	.word	0x20005570
 8004164:	20005820 	.word	0x20005820
 8004168:	20005584 	.word	0x20005584
 800416c:	08013a9c 	.word	0x08013a9c
 8004170:	2000007f 	.word	0x2000007f
 8004174:	200023b0 	.word	0x200023b0
 8004178:	2000581c 	.word	0x2000581c
 800417c:	200025a0 	.word	0x200025a0
 8004180:	08003f51 	.word	0x08003f51

08004184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b094      	sub	sp, #80	; 0x50
 8004188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800418a:	f107 0320 	add.w	r3, r7, #32
 800418e:	2230      	movs	r2, #48	; 0x30
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f00b fc18 	bl	800f9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <SystemClock_Config+0xd0>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <SystemClock_Config+0xd0>)
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <SystemClock_Config+0xd0>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c4:	2300      	movs	r3, #0
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <SystemClock_Config+0xd4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <SystemClock_Config+0xd4>)
 80041ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <SystemClock_Config+0xd4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80041e0:	2305      	movs	r3, #5
 80041e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80041e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80041ea:	2301      	movs	r3, #1
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041ee:	2302      	movs	r3, #2
 80041f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041f8:	2304      	movs	r3, #4
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041fc:	23a8      	movs	r3, #168	; 0xa8
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004200:	2302      	movs	r3, #2
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004204:	2307      	movs	r3, #7
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004208:	f107 0320 	add.w	r3, r7, #32
 800420c:	4618      	mov	r0, r3
 800420e:	f003 fee9 	bl	8007fe4 <HAL_RCC_OscConfig>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004218:	f000 f8fa 	bl	8004410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800421c:	230f      	movs	r3, #15
 800421e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004220:	2302      	movs	r3, #2
 8004222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004228:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800422c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800422e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	2105      	movs	r1, #5
 800423a:	4618      	mov	r0, r3
 800423c:	f004 f94a 	bl	80084d4 <HAL_RCC_ClockConfig>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004246:	f000 f8e3 	bl	8004410 <Error_Handler>
  }
}
 800424a:	bf00      	nop
 800424c:	3750      	adds	r7, #80	; 0x50
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	40007000 	.word	0x40007000

0800425c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	// APB2 168MHz -> after PSCL 1Hz
	// used to time stopwatch
	if(htim->Instance == TIM10){
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a4a      	ldr	r2, [pc, #296]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d107      	bne.n	800427e <HAL_TIM_PeriodElapsedCallback+0x22>
		stwTick();
 800426e:	f000 faed 	bl	800484c <stwTick>
		// animation frame tick
		animationFrameNum++;
 8004272:	4b49      	ldr	r3, [pc, #292]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800427c:	701a      	strb	r2, [r3, #0]
	}
	// APB2 168MHz -> after PSCL 100Hz
	// button polling
	if(htim->Instance == TIM11){
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a46      	ldr	r2, [pc, #280]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x64>
		scanButtons(btnsPtrs);
 8004288:	4845      	ldr	r0, [pc, #276]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800428a:	f7fe f82b 	bl	80022e4 <scanButtons>
		button_task();
 800428e:	f7fd fcd3 	bl	8001c38 <button_task>
		// check timeouts
		if(timeoutState){
 8004292:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x64>
			if(timeoutValue == timeoutSetpoint){
 800429a:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d106      	bne.n	80042b4 <HAL_TIM_PeriodElapsedCallback+0x58>
				(*timeoutClbkPtr)();
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4798      	blx	r3
				timeoutState = 0;
 80042ac:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e005      	b.n	80042c0 <HAL_TIM_PeriodElapsedCallback+0x64>
			} else {
				timeoutValue++;
 80042b4:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80042be:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	// APB1 84MHz -> after PSCL 1Hz
	if(htim->Instance == TIM13){
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3b      	ldr	r2, [pc, #236]	; (80043b4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d160      	bne.n	800438c <HAL_TIM_PeriodElapsedCallback+0x130>
		// watchface module timer value incrementing
		tickTimAAB();
 80042ca:	f7fe f999 	bl	8002600 <tickTimAAB>
//		HAL_UART_Receive_DMA(&huart6, &dmaBuffer, GPS_BUFFER_SIZE);
		if(gpsDev.isReady != 0) gpsDev.getData(&gpsDev);
 80042ce:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042d0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <HAL_TIM_PeriodElapsedCallback+0x86>
 80042d8:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042da:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80042de:	4836      	ldr	r0, [pc, #216]	; (80043b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80042e0:	4798      	blx	r3

		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80042e2:	2101      	movs	r1, #1
 80042e4:	4835      	ldr	r0, [pc, #212]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80042e6:	f002 fe04 	bl	8006ef2 <HAL_GPIO_TogglePin>
		if(tempRing.isReady) add_ovw_ring_buffer(&tempRing, (int)(10*bmpData.temperature));
 80042ea:	4b35      	ldr	r3, [pc, #212]	; (80043c0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80042ec:	7b1b      	ldrb	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_TIM_PeriodElapsedCallback+0xb2>
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80042f4:	edd3 7a00 	vldr	s15, [r3]
 80042f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80042fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004304:	ee17 1a90 	vmov	r1, s15
 8004308:	482d      	ldr	r0, [pc, #180]	; (80043c0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800430a:	f002 f90f 	bl	800652c <add_ovw_ring_buffer>
		uint16_t aaa = (uint16_t)(bmpData.pressure/10);
 800430e:	4b2d      	ldr	r3, [pc, #180]	; (80043c4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	08db      	lsrs	r3, r3, #3
 800431a:	b29b      	uxth	r3, r3
 800431c:	81fb      	strh	r3, [r7, #14]
		if(baroRing.isReady) cbuf_ovw(&baroRing, &aaa);
 800431e:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004320:	7c1b      	ldrb	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8004326:	f107 030e 	add.w	r3, r7, #14
 800432a:	4619      	mov	r1, r3
 800432c:	4827      	ldr	r0, [pc, #156]	; (80043cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 800432e:	f002 f868 	bl	8006402 <cbuf_ovw>

		tim13_counter++;
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800433c:	701a      	strb	r2, [r3, #0]
		if(tim13_counter == tim13_prescaler){
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d109      	bne.n	800435e <HAL_TIM_PeriodElapsedCallback+0x102>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	481b      	ldr	r0, [pc, #108]	; (80043bc <HAL_TIM_PeriodElapsedCallback+0x160>)
 800434e:	f002 fdd0 	bl	8006ef2 <HAL_GPIO_TogglePin>
			// set flag up - causes to update temp/baro data to update in the main loop
			updateBmpData_flag = 1;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
//			bmpData = getBmpData(&bmp180module);
			tim13_counter = 0;
 8004358:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
		}
		if(isTimerRunning(&countDown1)){
 800435e:	481f      	ldr	r0, [pc, #124]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004360:	f7fd ffda 	bl	8002318 <isTimerRunning>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_TIM_PeriodElapsedCallback+0x130>
			if(countDown1.remainingSec == 0){
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800436c:	885b      	ldrh	r3, [r3, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_PeriodElapsedCallback+0x124>
				alertFlag = 1;
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
				pauseTimer(&countDown1);
 8004378:	4818      	ldr	r0, [pc, #96]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800437a:	f7fd ffd9 	bl	8002330 <pauseTimer>
			} else {
				countDown1.remainingSec--;
			}
		}
	}
}
 800437e:	e005      	b.n	800438c <HAL_TIM_PeriodElapsedCallback+0x130>
				countDown1.remainingSec--;
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004382:	885b      	ldrh	r3, [r3, #2]
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800438a:	805a      	strh	r2, [r3, #2]
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40014400 	.word	0x40014400
 8004398:	20005c2a 	.word	0x20005c2a
 800439c:	40014800 	.word	0x40014800
 80043a0:	20000050 	.word	0x20000050
 80043a4:	20005811 	.word	0x20005811
 80043a8:	20005812 	.word	0x20005812
 80043ac:	20005814 	.word	0x20005814
 80043b0:	20005818 	.word	0x20005818
 80043b4:	40001c00 	.word	0x40001c00
 80043b8:	200055ac 	.word	0x200055ac
 80043bc:	40020400 	.word	0x40020400
 80043c0:	2000559c 	.word	0x2000559c
 80043c4:	200023b0 	.word	0x200023b0
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	20005588 	.word	0x20005588
 80043d0:	20005810 	.word	0x20005810
 80043d4:	2000007e 	.word	0x2000007e
 80043d8:	2000007f 	.word	0x2000007f
 80043dc:	20000080 	.word	0x20000080
 80043e0:	2000581c 	.word	0x2000581c

080043e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_UART_RxCpltCallback+0x24>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <HAL_UART_RxCpltCallback+0x28>)
 80043fa:	f002 fd7a 	bl	8006ef2 <HAL_GPIO_TogglePin>
	}
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40011400 	.word	0x40011400
 800440c:	40020400 	.word	0x40020400

08004410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004414:	b672      	cpsid	i
}
 8004416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004418:	2201      	movs	r2, #1
 800441a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800441e:	4802      	ldr	r0, [pc, #8]	; (8004428 <Error_Handler+0x18>)
 8004420:	f002 fd4e 	bl	8006ec0 <HAL_GPIO_WritePin>
  while (1)
 8004424:	e7fe      	b.n	8004424 <Error_Handler+0x14>
 8004426:	bf00      	nop
 8004428:	40020400 	.word	0x40020400

0800442c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004440:	2300      	movs	r3, #0
 8004442:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <MX_RTC_Init+0x58>)
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <MX_RTC_Init+0x5c>)
 8004448:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <MX_RTC_Init+0x58>)
 800444c:	2200      	movs	r2, #0
 800444e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <MX_RTC_Init+0x58>)
 8004452:	227f      	movs	r2, #127	; 0x7f
 8004454:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <MX_RTC_Init+0x58>)
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <MX_RTC_Init+0x58>)
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <MX_RTC_Init+0x58>)
 8004464:	2200      	movs	r2, #0
 8004466:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <MX_RTC_Init+0x58>)
 800446a:	2200      	movs	r2, #0
 800446c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800446e:	4805      	ldr	r0, [pc, #20]	; (8004484 <MX_RTC_Init+0x58>)
 8004470:	f004 fc10 	bl	8008c94 <HAL_RTC_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800447a:	f7ff ffc9 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20005820 	.word	0x20005820
 8004488:	40002800 	.word	0x40002800

0800448c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08e      	sub	sp, #56	; 0x38
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004494:	f107 0308 	add.w	r3, r7, #8
 8004498:	2230      	movs	r2, #48	; 0x30
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f00b fa93 	bl	800f9c8 <memset>
  if(rtcHandle->Instance==RTC)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_RTC_MspInit+0x4c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80044ac:	2320      	movs	r3, #32
 80044ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80044b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 fa2a 	bl	8008914 <HAL_RCCEx_PeriphCLKConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80044c6:	f7ff ffa3 	bl	8004410 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044ca:	4b04      	ldr	r3, [pc, #16]	; (80044dc <HAL_RTC_MspInit+0x50>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80044d0:	bf00      	nop
 80044d2:	3738      	adds	r7, #56	; 0x38
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40002800 	.word	0x40002800
 80044dc:	42470e3c 	.word	0x42470e3c

080044e0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 80044e6:	4a0d      	ldr	r2, [pc, #52]	; (800451c <MX_SDIO_SD_Init+0x3c>)
 80044e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 80044fe:	2200      	movs	r2, #0
 8004500:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <MX_SDIO_SD_Init+0x38>)
 800450a:	2204      	movs	r2, #4
 800450c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	20005840 	.word	0x20005840
 800451c:	40012c00 	.word	0x40012c00

08004520 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <HAL_SD_MspInit+0xc0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d14a      	bne.n	80045d8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454a:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 800454c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004550:	6453      	str	r3, [r2, #68]	; 0x44
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 8004584:	f043 0308 	orr.w	r3, r3, #8
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_SD_MspInit+0xc4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004596:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800459a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a4:	2303      	movs	r3, #3
 80045a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80045a8:	230c      	movs	r3, #12
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4619      	mov	r1, r3
 80045b2:	480d      	ldr	r0, [pc, #52]	; (80045e8 <HAL_SD_MspInit+0xc8>)
 80045b4:	f002 fac0 	bl	8006b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045b8:	2304      	movs	r3, #4
 80045ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c4:	2303      	movs	r3, #3
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80045c8:	230c      	movs	r3, #12
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4619      	mov	r1, r3
 80045d2:	4806      	ldr	r0, [pc, #24]	; (80045ec <HAL_SD_MspInit+0xcc>)
 80045d4:	f002 fab0 	bl	8006b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80045d8:	bf00      	nop
 80045da:	3728      	adds	r7, #40	; 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020c00 	.word	0x40020c00

080045f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <MX_SPI1_Init+0x64>)
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <MX_SPI1_Init+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045fa:	4b16      	ldr	r3, [pc, #88]	; (8004654 <MX_SPI1_Init+0x64>)
 80045fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <MX_SPI1_Init+0x64>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <MX_SPI1_Init+0x64>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <MX_SPI1_Init+0x64>)
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <MX_SPI1_Init+0x64>)
 8004616:	2200      	movs	r2, #0
 8004618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <MX_SPI1_Init+0x64>)
 800461c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <MX_SPI1_Init+0x64>)
 8004624:	2220      	movs	r2, #32
 8004626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <MX_SPI1_Init+0x64>)
 800462a:	2200      	movs	r2, #0
 800462c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <MX_SPI1_Init+0x64>)
 8004630:	2200      	movs	r2, #0
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <MX_SPI1_Init+0x64>)
 8004636:	2200      	movs	r2, #0
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <MX_SPI1_Init+0x64>)
 800463c:	220a      	movs	r2, #10
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004640:	4804      	ldr	r0, [pc, #16]	; (8004654 <MX_SPI1_Init+0x64>)
 8004642:	f005 fc73 	bl	8009f2c <HAL_SPI_Init>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800464c:	f7ff fee0 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}
 8004654:	200058c4 	.word	0x200058c4
 8004658:	40013000 	.word	0x40013000

0800465c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004664:	f107 0314 	add.w	r3, r7, #20
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <HAL_SPI_MspInit+0x84>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12b      	bne.n	80046d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 8004688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800468c:	6453      	str	r3, [r2, #68]	; 0x44
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_SPI_MspInit+0x88>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80046b6:	23a0      	movs	r3, #160	; 0xa0
 80046b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046c6:	2305      	movs	r3, #5
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <HAL_SPI_MspInit+0x8c>)
 80046d2:	f002 fa31 	bl	8006b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40013000 	.word	0x40013000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40020000 	.word	0x40020000

080046ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_MspInit+0x4c>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <HAL_MspInit+0x4c>)
 80046fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004700:	6453      	str	r3, [r2, #68]	; 0x44
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_MspInit+0x4c>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_MspInit+0x4c>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <HAL_MspInit+0x4c>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	; 0x40
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_MspInit+0x4c>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004740:	e7fe      	b.n	8004740 <NMI_Handler+0x4>

08004742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	printf("HARD FAULT! chksum value: %d", chksum);
	Error_Handler();
 8004746:	f7ff fe63 	bl	8004410 <Error_Handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474a:	e7fe      	b.n	800474a <HardFault_Handler+0x8>

0800474c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004750:	e7fe      	b.n	8004750 <MemManage_Handler+0x4>

08004752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <BusFault_Handler+0x4>

08004758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <UsageFault_Handler+0x4>

0800475e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f001 fff8 	bl	8006780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}

08004794 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004798:	4803      	ldr	r0, [pc, #12]	; (80047a8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800479a:	f006 f867 	bl	800a86c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800479e:	4803      	ldr	r0, [pc, #12]	; (80047ac <TIM1_UP_TIM10_IRQHandler+0x18>)
 80047a0:	f006 f864 	bl	800a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20005a18 	.word	0x20005a18
 80047ac:	20005a60 	.word	0x20005a60

080047b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047b4:	4803      	ldr	r0, [pc, #12]	; (80047c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80047b6:	f006 f859 	bl	800a86c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80047ba:	4803      	ldr	r0, [pc, #12]	; (80047c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80047bc:	f006 f856 	bl	800a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20005a18 	.word	0x20005a18
 80047c8:	20005aa8 	.word	0x20005aa8

080047cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BA_Pin);
 80047d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80047d4:	f002 fba8 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BB_Pin);
 80047d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047dc:	f002 fba4 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80047e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047e4:	f002 fba0 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BC_Pin);
 80047e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047ec:	f002 fb9c 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80047f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80047f4:	f002 fb98 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80047f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047fc:	f002 fb94 	bl	8006f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}

08004804 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800480a:	f006 f82f 	bl	800a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20005af0 	.word	0x20005af0

08004818 <getLapNum>:
stw_t stwS = {&currentStw, STW_STATE_DISABLED};

stw_counter_t stw_splits[STW_SPLIT_MAX_NUM];
uint8_t snap_number = 1;

uint8_t getLapNum(void){
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
	return snap_number;
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <getLapNum+0x14>)
 800481e:	781b      	ldrb	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000090 	.word	0x20000090

08004830 <stwStart>:
//		return diff;
//	}
//}

// activate stopwatch and it's timer
void stwStart(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_ENABLED;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <stwStart+0x14>)
 8004836:	2201      	movs	r2, #1
 8004838:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Start_IT(&htim10);
 800483a:	4803      	ldr	r0, [pc, #12]	; (8004848 <stwStart+0x18>)
 800483c:	f005 fe56 	bl	800a4ec <HAL_TIM_Base_Start_IT>
}
 8004840:	bf00      	nop
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000088 	.word	0x20000088
 8004848:	20005a60 	.word	0x20005a60

0800484c <stwTick>:
void stwTick(void){
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	if(stwS.state){
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <stwTick+0x20>)
 8004852:	791b      	ldrb	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <stwTick+0x16>
		(stwS.cnt->sec)++;
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <stwTick+0x20>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	3201      	adds	r2, #1
 8004860:	601a      	str	r2, [r3, #0]
	}
}
 8004862:	bf00      	nop
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000088 	.word	0x20000088

08004870 <stwStop>:
void stwStop(void){
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	stwS.state = STW_STATE_DISABLED;
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <stwStop+0x14>)
 8004876:	2200      	movs	r2, #0
 8004878:	711a      	strb	r2, [r3, #4]
	  HAL_TIM_Base_Stop_IT(&htim10);
 800487a:	4803      	ldr	r0, [pc, #12]	; (8004888 <stwStop+0x18>)
 800487c:	f005 fea6 	bl	800a5cc <HAL_TIM_Base_Stop_IT>

}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000088 	.word	0x20000088
 8004888:	20005a60 	.word	0x20005a60

0800488c <stwClear>:
void stwClear(void){
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <stwClear+0x28>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2200      	movs	r2, #0
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
	stwS.cnt->sec = 0;
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <stwClear+0x2c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
	memset(stw_splits, 0, sizeof stw_splits);
 80048a0:	22f0      	movs	r2, #240	; 0xf0
 80048a2:	2100      	movs	r1, #0
 80048a4:	4805      	ldr	r0, [pc, #20]	; (80048bc <stwClear+0x30>)
 80048a6:	f00b f88f 	bl	800f9c8 <memset>
	snap_number = 1;
 80048aa:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <stwClear+0x34>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20005a60 	.word	0x20005a60
 80048b8:	20000088 	.word	0x20000088
 80048bc:	20005924 	.word	0x20005924
 80048c0:	20000090 	.word	0x20000090

080048c4 <getStw>:

void getStw(struct stopwatch_t* stw_ptr, stw_t* stwS){
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
		stw_ptr->hours = stwS->cnt->sec/(60*60);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a23      	ldr	r2, [pc, #140]	; (8004964 <getStw+0xa0>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	701a      	strb	r2, [r3, #0]
		stw_ptr->min = stwS->cnt->sec%(60*60)/(60);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <getStw+0xa0>)
 80048ea:	fba3 1302 	umull	r1, r3, r3, r2
 80048ee:	0adb      	lsrs	r3, r3, #11
 80048f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <getStw+0xa4>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	b2da      	uxtb	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	705a      	strb	r2, [r3, #1]
		stw_ptr->sec = stwS->cnt->sec%60;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <getStw+0xa4>)
 8004910:	fba3 2301 	umull	r2, r3, r3, r1
 8004914:	095a      	lsrs	r2, r3, #5
 8004916:	4613      	mov	r3, r2
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	1aca      	subs	r2, r1, r3
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	709a      	strb	r2, [r3, #2]
		stw_ptr->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <getStw+0xa8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b29b      	uxth	r3, r3
 800492e:	4a10      	ldr	r2, [pc, #64]	; (8004970 <getStw+0xac>)
 8004930:	fba2 2303 	umull	r2, r3, r2, r3
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	b29b      	uxth	r3, r3
 8004938:	b2da      	uxtb	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	70da      	strb	r2, [r3, #3]
		// update .00 second counter in stw struct
		stwS->cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <getStw+0xa8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	b29a      	uxth	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4909      	ldr	r1, [pc, #36]	; (8004970 <getStw+0xac>)
 800494c:	fba1 1202 	umull	r1, r2, r1, r2
 8004950:	0952      	lsrs	r2, r2, #5
 8004952:	b292      	uxth	r2, r2
 8004954:	809a      	strh	r2, [r3, #4]

}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	91a2b3c5 	.word	0x91a2b3c5
 8004968:	88888889 	.word	0x88888889
 800496c:	20005a60 	.word	0x20005a60
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <stwSave>:



// stopwatch snapshot
void stwSave(void){
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
	if(snap_number < STW_SPLIT_MAX_NUM){
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <stwSave+0x70>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b1d      	cmp	r3, #29
 800497e:	d82b      	bhi.n	80049d8 <stwSave+0x64>
		stw_splits[snap_number].sec = stwS.cnt->sec;
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <stwSave+0x74>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <stwSave+0x70>)
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	4611      	mov	r1, r2
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a17      	ldr	r2, [pc, #92]	; (80049ec <stwSave+0x78>)
 800498e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
		stwS.cnt->csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <stwSave+0x7c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b29a      	uxth	r2, r3
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <stwSave+0x74>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4915      	ldr	r1, [pc, #84]	; (80049f4 <stwSave+0x80>)
 80049a0:	fba1 1202 	umull	r1, r2, r1, r2
 80049a4:	0952      	lsrs	r2, r2, #5
 80049a6:	b292      	uxth	r2, r2
 80049a8:	809a      	strh	r2, [r3, #4]
		stw_splits[snap_number].csec = (uint16_t)__HAL_TIM_GET_COUNTER(&htim10)/100;
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <stwSave+0x7c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4a0c      	ldr	r2, [pc, #48]	; (80049e4 <stwSave+0x70>)
 80049b4:	7812      	ldrb	r2, [r2, #0]
 80049b6:	4610      	mov	r0, r2
 80049b8:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <stwSave+0x80>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	b299      	uxth	r1, r3
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <stwSave+0x78>)
 80049c4:	00c3      	lsls	r3, r0, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	460a      	mov	r2, r1
 80049ca:	809a      	strh	r2, [r3, #4]
		snap_number++;
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <stwSave+0x70>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <stwSave+0x70>)
 80049d6:	701a      	strb	r2, [r3, #0]
	}
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000090 	.word	0x20000090
 80049e8:	20000088 	.word	0x20000088
 80049ec:	20005924 	.word	0x20005924
 80049f0:	20005a60 	.word	0x20005a60
 80049f4:	51eb851f 	.word	0x51eb851f

080049f8 <counterDiff>:

void counterDiff(stw_counter_t* result, stw_counter_t* cnt1, stw_counter_t* cnt2){
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
//		if(diff > 100){
//		result->csec = diff+100;
//	} else {
//		result->csec = diff;
//	}
		result->sec = (cnt1->sec*100+cnt1->csec-cnt2->sec*100-cnt2->csec)/100;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2264      	movs	r2, #100	; 0x64
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	8892      	ldrh	r2, [r2, #4]
 8004a12:	441a      	add	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	8892      	ldrh	r2, [r2, #4]
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	4a0f      	ldr	r2, [pc, #60]	; (8004a64 <counterDiff+0x6c>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095a      	lsrs	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]
		uint16_t diff = cnt1->csec-cnt2->csec;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	889a      	ldrh	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	889b      	ldrh	r3, [r3, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	82fb      	strh	r3, [r7, #22]
		if(diff > 100){
 8004a3e:	8afb      	ldrh	r3, [r7, #22]
 8004a40:	2b64      	cmp	r3, #100	; 0x64
 8004a42:	d905      	bls.n	8004a50 <counterDiff+0x58>
			result->csec = diff+100;
 8004a44:	8afb      	ldrh	r3, [r7, #22]
 8004a46:	3364      	adds	r3, #100	; 0x64
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	809a      	strh	r2, [r3, #4]
		} else {
			result->csec = diff;
		}
}
 8004a4e:	e002      	b.n	8004a56 <counterDiff+0x5e>
			result->csec = diff;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8afa      	ldrh	r2, [r7, #22]
 8004a54:	809a      	strh	r2, [r3, #4]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	51eb851f 	.word	0x51eb851f

08004a68 <counterToStopwatch>:

// transform counter info into hh/mm/ss/cs struct
void counterToStopwatch(struct stopwatch_t* output, stw_counter_t* counter){
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	output->hours = counter->sec/(60*60);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a19      	ldr	r2, [pc, #100]	; (8004adc <counterToStopwatch+0x74>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	0adb      	lsrs	r3, r3, #11
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	701a      	strb	r2, [r3, #0]
	output->min = counter->sec%(60*60)/(60);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b14      	ldr	r3, [pc, #80]	; (8004adc <counterToStopwatch+0x74>)
 8004a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8e:	0adb      	lsrs	r3, r3, #11
 8004a90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	4a11      	ldr	r2, [pc, #68]	; (8004ae0 <counterToStopwatch+0x78>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	705a      	strb	r2, [r3, #1]
	output->sec = counter->sec%60;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6819      	ldr	r1, [r3, #0]
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <counterToStopwatch+0x78>)
 8004aae:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab2:	095a      	lsrs	r2, r3, #5
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	1aca      	subs	r2, r1, r3
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	709a      	strb	r2, [r3, #2]
	output->csec = counter->csec;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	889b      	ldrh	r3, [r3, #4]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	70da      	strb	r2, [r3, #3]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	91a2b3c5 	.word	0x91a2b3c5
 8004ae0:	88888889 	.word	0x88888889

08004ae4 <stwInit>:


void stwInit(TIM_HandleTypeDef* htim){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	// initialize timer
	// start/stop/reset routine to fix bug:
	//BUG: first stopwatch start after reset causes timer to jump 1 second forward
	  HAL_TIM_Base_Init(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f005 fcad 	bl	800a44c <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start_IT(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f005 fcfa 	bl	800a4ec <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Stop_IT(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f005 fd67 	bl	800a5cc <HAL_TIM_Base_Stop_IT>
	  __HAL_TIM_SET_COUNTER(htim, 0);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <stwprintf>:

void stwprintf(char* outputString, struct stopwatch_t* stw_time){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
	if(stw_time->hours > 0){
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00e      	beq.n	8004b40 <stwprintf+0x30>
		sprintf(outputString, "%02dh %02d'%02d\"", stw_time->hours, stw_time->min, stw_time->sec);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	789b      	ldrb	r3, [r3, #2]
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	460b      	mov	r3, r1
 8004b36:	490b      	ldr	r1, [pc, #44]	; (8004b64 <stwprintf+0x54>)
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f00b fe01 	bl	8010740 <siprintf>
	} else {
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
	}
}
 8004b3e:	e00d      	b.n	8004b5c <stwprintf+0x4c>
		sprintf(outputString, "%02d'%02d.%02d\"", stw_time->min, stw_time->sec, stw_time->csec);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	785b      	ldrb	r3, [r3, #1]
 8004b44:	461a      	mov	r2, r3
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	789b      	ldrb	r3, [r3, #2]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	78db      	ldrb	r3, [r3, #3]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	460b      	mov	r3, r1
 8004b54:	4904      	ldr	r1, [pc, #16]	; (8004b68 <stwprintf+0x58>)
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f00b fdf2 	bl	8010740 <siprintf>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	08013ac0 	.word	0x08013ac0
 8004b68:	08013ad4 	.word	0x08013ad4

08004b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
	return 1;
 8004b70:	2301      	movs	r3, #1
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_kill>:

int _kill(int pid, int sig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b86:	f00a fec5 	bl	800f914 <__errno>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2216      	movs	r2, #22
 8004b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_exit>:

void _exit (int status)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff ffe7 	bl	8004b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bae:	e7fe      	b.n	8004bae <_exit+0x12>

08004bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e00a      	b.n	8004bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bc2:	f3af 8000 	nop.w
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	60ba      	str	r2, [r7, #8]
 8004bce:	b2ca      	uxtb	r2, r1
 8004bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	dbf0      	blt.n	8004bc2 <_read+0x12>
	}

return len;
 8004be0:	687b      	ldr	r3, [r7, #4]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e009      	b.n	8004c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	60ba      	str	r2, [r7, #8]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff f957 	bl	8003eb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	dbf1      	blt.n	8004bfc <_write+0x12>
	}
	return len;
 8004c18:	687b      	ldr	r3, [r7, #4]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_close>:

int _close(int file)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
	return -1;
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <_isatty>:

int _isatty(int file)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
	return 1;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c94:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <_sbrk+0x50>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk+0x16>
		heap_end = &end;
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <_sbrk+0x50>)
 8004c9e:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <_sbrk+0x54>)
 8004ca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <_sbrk+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <_sbrk+0x50>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4413      	add	r3, r2
 8004cb0:	466a      	mov	r2, sp
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d907      	bls.n	8004cc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004cb6:	f00a fe2d 	bl	800f914 <__errno>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	220c      	movs	r2, #12
 8004cbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc4:	e006      	b.n	8004cd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <_sbrk+0x50>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	4a03      	ldr	r2, [pc, #12]	; (8004cdc <_sbrk+0x50>)
 8004cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20005a14 	.word	0x20005a14
 8004ce0:	20005c90 	.word	0x20005c90

08004ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <SystemInit+0x20>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	4a05      	ldr	r2, [pc, #20]	; (8004d04 <SystemInit+0x20>)
 8004cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b096      	sub	sp, #88	; 0x58
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
 8004d30:	609a      	str	r2, [r3, #8]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	611a      	str	r2, [r3, #16]
 8004d36:	615a      	str	r2, [r3, #20]
 8004d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f00a fe41 	bl	800f9c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d46:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d48:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <MX_TIM1_Init+0x140>)
 8004d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2047;
 8004d4c:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d54:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d62:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d6e:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d74:	4833      	ldr	r0, [pc, #204]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d76:	f005 fb69 	bl	800a44c <HAL_TIM_Base_Init>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004d80:	f7ff fb46 	bl	8004410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d8e:	4619      	mov	r1, r3
 8004d90:	482c      	ldr	r0, [pc, #176]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004d92:	f005 ff35 	bl	800ac00 <HAL_TIM_ConfigClockSource>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004d9c:	f7ff fb38 	bl	8004410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004da0:	4828      	ldr	r0, [pc, #160]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004da2:	f005 fc42 	bl	800a62a <HAL_TIM_PWM_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004dac:	f7ff fb30 	bl	8004410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db0:	2300      	movs	r3, #0
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4821      	ldr	r0, [pc, #132]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004dc0:	f006 fb1e 	bl	800b400 <HAL_TIMEx_MasterConfigSynchronization>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8004dca:	f7ff fb21 	bl	8004410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dce:	2360      	movs	r3, #96	; 0x60
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004de2:	2300      	movs	r3, #0
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	4619      	mov	r1, r3
 8004df2:	4814      	ldr	r0, [pc, #80]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004df4:	f005 fe42 	bl	800aa7c <HAL_TIM_PWM_ConfigChannel>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004dfe:	f7ff fb07 	bl	8004410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4807      	ldr	r0, [pc, #28]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004e26:	f006 fb67 	bl	800b4f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004e30:	f7ff faee 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e34:	4803      	ldr	r0, [pc, #12]	; (8004e44 <MX_TIM1_Init+0x13c>)
 8004e36:	f000 f963 	bl	8005100 <HAL_TIM_MspPostInit>

}
 8004e3a:	bf00      	nop
 8004e3c:	3758      	adds	r7, #88	; 0x58
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20005a18 	.word	0x20005a18
 8004e48:	40010000 	.word	0x40010000

08004e4c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e52:	4a0f      	ldr	r2, [pc, #60]	; (8004e90 <MX_TIM10_Init+0x44>)
 8004e54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e58:	f244 129f 	movw	r2, #16799	; 0x419f
 8004e5c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e66:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e78:	4804      	ldr	r0, [pc, #16]	; (8004e8c <MX_TIM10_Init+0x40>)
 8004e7a:	f005 fae7 	bl	800a44c <HAL_TIM_Base_Init>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004e84:	f7ff fac4 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20005a60 	.word	0x20005a60
 8004e90:	40014400 	.word	0x40014400

08004e94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004e98:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <MX_TIM11_Init+0x44>)
 8004e9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16799;
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004ea0:	f244 129f 	movw	r2, #16799	; 0x419f
 8004ea4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004eae:	2263      	movs	r2, #99	; 0x63
 8004eb0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004eba:	2280      	movs	r2, #128	; 0x80
 8004ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004ebe:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <MX_TIM11_Init+0x40>)
 8004ec0:	f005 fac4 	bl	800a44c <HAL_TIM_Base_Init>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004eca:	f7ff faa1 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20005aa8 	.word	0x20005aa8
 8004ed8:	40014800 	.word	0x40014800

08004edc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004ee2:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <MX_TIM13_Init+0x44>)
 8004ee4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004ee8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004eec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8004efa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004f04:	2280      	movs	r2, #128	; 0x80
 8004f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f08:	4804      	ldr	r0, [pc, #16]	; (8004f1c <MX_TIM13_Init+0x40>)
 8004f0a:	f005 fa9f 	bl	800a44c <HAL_TIM_Base_Init>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004f14:	f7ff fa7c 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20005af0 	.word	0x20005af0
 8004f20:	40001c00 	.word	0x40001c00

08004f24 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b088      	sub	sp, #32
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f2a:	1d3b      	adds	r3, r7, #4
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
 8004f38:	615a      	str	r2, [r3, #20]
 8004f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <MX_TIM14_Init+0x98>)
 8004f40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f44:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8004f48:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f52:	2263      	movs	r2, #99	; 0x63
 8004f54:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f5c:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004f62:	4815      	ldr	r0, [pc, #84]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f64:	f005 fa72 	bl	800a44c <HAL_TIM_Base_Init>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004f6e:	f7ff fa4f 	bl	8004410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004f72:	4811      	ldr	r0, [pc, #68]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f74:	f005 fb59 	bl	800a62a <HAL_TIM_PWM_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004f7e:	f7ff fa47 	bl	8004410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f82:	2360      	movs	r3, #96	; 0x60
 8004f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	2200      	movs	r2, #0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004f9a:	f005 fd6f 	bl	800aa7c <HAL_TIM_PWM_ConfigChannel>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8004fa4:	f7ff fa34 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004fa8:	4803      	ldr	r0, [pc, #12]	; (8004fb8 <MX_TIM14_Init+0x94>)
 8004faa:	f000 f8a9 	bl	8005100 <HAL_TIM_MspPostInit>

}
 8004fae:	bf00      	nop
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20005b38 	.word	0x20005b38
 8004fbc:	40002000 	.word	0x40002000

08004fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a46      	ldr	r2, [pc, #280]	; (80050e8 <HAL_TIM_Base_MspInit+0x128>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d11e      	bne.n	8005010 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	4b45      	ldr	r3, [pc, #276]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	4a44      	ldr	r2, [pc, #272]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe2:	4b42      	ldr	r3, [pc, #264]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	2019      	movs	r0, #25
 8004ff4:	f001 fce3 	bl	80069be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ff8:	2019      	movs	r0, #25
 8004ffa:	f001 fcfc 	bl	80069f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004ffe:	2200      	movs	r2, #0
 8005000:	2100      	movs	r1, #0
 8005002:	201a      	movs	r0, #26
 8005004:	f001 fcdb 	bl	80069be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005008:	201a      	movs	r0, #26
 800500a:	f001 fcf4 	bl	80069f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800500e:	e066      	b.n	80050de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <HAL_TIM_Base_MspInit+0x130>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d116      	bne.n	8005048 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	4b33      	ldr	r3, [pc, #204]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005022:	4a32      	ldr	r2, [pc, #200]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005028:	6453      	str	r3, [r2, #68]	; 0x44
 800502a:	4b30      	ldr	r3, [pc, #192]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	2019      	movs	r0, #25
 800503c:	f001 fcbf 	bl	80069be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005040:	2019      	movs	r0, #25
 8005042:	f001 fcd8 	bl	80069f6 <HAL_NVIC_EnableIRQ>
}
 8005046:	e04a      	b.n	80050de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <HAL_TIM_Base_MspInit+0x134>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d116      	bne.n	8005080 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	4a24      	ldr	r2, [pc, #144]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005060:	6453      	str	r3, [r2, #68]	; 0x44
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	201a      	movs	r0, #26
 8005074:	f001 fca3 	bl	80069be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005078:	201a      	movs	r0, #26
 800507a:	f001 fcbc 	bl	80069f6 <HAL_NVIC_EnableIRQ>
}
 800507e:	e02e      	b.n	80050de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_TIM_Base_MspInit+0x138>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d116      	bne.n	80050b8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	6413      	str	r3, [r2, #64]	; 0x40
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	202c      	movs	r0, #44	; 0x2c
 80050ac:	f001 fc87 	bl	80069be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80050b0:	202c      	movs	r0, #44	; 0x2c
 80050b2:	f001 fca0 	bl	80069f6 <HAL_NVIC_EnableIRQ>
}
 80050b6:	e012      	b.n	80050de <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <HAL_TIM_Base_MspInit+0x13c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_TIM_Base_MspInit+0x12c>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
}
 80050de:	bf00      	nop
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800
 80050f8:	40001c00 	.word	0x40001c00
 80050fc:	40002000 	.word	0x40002000

08005100 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	; 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <HAL_TIM_MspPostInit+0xb4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d11f      	bne.n	8005162 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 800512c:	f043 0310 	orr.w	r3, r3, #16
 8005130:	6313      	str	r3, [r2, #48]	; 0x30
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800513e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005150:	2301      	movs	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4619      	mov	r1, r3
 800515a:	4818      	ldr	r0, [pc, #96]	; (80051bc <HAL_TIM_MspPostInit+0xbc>)
 800515c:	f001 fcec 	bl	8006b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005160:	e023      	b.n	80051aa <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM14)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIM_MspPostInit+0xc0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d11e      	bne.n	80051aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 8005176:	f043 0320 	orr.w	r3, r3, #32
 800517a:	6313      	str	r3, [r2, #48]	; 0x30
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_TIM_MspPostInit+0xb8>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800518c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518e:	2302      	movs	r3, #2
 8005190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800519a:	2309      	movs	r3, #9
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800519e:	f107 0314 	add.w	r3, r7, #20
 80051a2:	4619      	mov	r1, r3
 80051a4:	4807      	ldr	r0, [pc, #28]	; (80051c4 <HAL_TIM_MspPostInit+0xc4>)
 80051a6:	f001 fcc7 	bl	8006b38 <HAL_GPIO_Init>
}
 80051aa:	bf00      	nop
 80051ac:	3728      	adds	r7, #40	; 0x28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40021000 	.word	0x40021000
 80051c0:	40002000 	.word	0x40002000
 80051c4:	40021400 	.word	0x40021400

080051c8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <MX_USART3_UART_Init+0x50>)
 80051d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80051da:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051ee:	220c      	movs	r2, #12
 80051f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051f2:	4b08      	ldr	r3, [pc, #32]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80051fe:	4805      	ldr	r0, [pc, #20]	; (8005214 <MX_USART3_UART_Init+0x4c>)
 8005200:	f006 f9e0 	bl	800b5c4 <HAL_UART_Init>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800520a:	f7ff f901 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20005b80 	.word	0x20005b80
 8005218:	40004800 	.word	0x40004800

0800521c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005222:	4a12      	ldr	r2, [pc, #72]	; (800526c <MX_USART6_UART_Init+0x50>)
 8005224:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800522c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800522e:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005230:	2200      	movs	r2, #0
 8005232:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005236:	2200      	movs	r2, #0
 8005238:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 800523c:	2200      	movs	r2, #0
 800523e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005242:	220c      	movs	r2, #12
 8005244:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005248:	2200      	movs	r2, #0
 800524a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 800524e:	2200      	movs	r2, #0
 8005250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005252:	4805      	ldr	r0, [pc, #20]	; (8005268 <MX_USART6_UART_Init+0x4c>)
 8005254:	f006 f9b6 	bl	800b5c4 <HAL_UART_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800525e:	f7ff f8d7 	bl	8004410 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20005bc4 	.word	0x20005bc4
 800526c:	40011400 	.word	0x40011400

08005270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08c      	sub	sp, #48	; 0x30
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	f107 031c 	add.w	r3, r7, #28
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	60da      	str	r2, [r3, #12]
 8005286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a32      	ldr	r2, [pc, #200]	; (8005358 <HAL_UART_MspInit+0xe8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d12d      	bne.n	80052ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	4b31      	ldr	r3, [pc, #196]	; (800535c <HAL_UART_MspInit+0xec>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a30      	ldr	r2, [pc, #192]	; (800535c <HAL_UART_MspInit+0xec>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b2e      	ldr	r3, [pc, #184]	; (800535c <HAL_UART_MspInit+0xec>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <HAL_UART_MspInit+0xec>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	4a29      	ldr	r2, [pc, #164]	; (800535c <HAL_UART_MspInit+0xec>)
 80052b8:	f043 0308 	orr.w	r3, r3, #8
 80052bc:	6313      	str	r3, [r2, #48]	; 0x30
 80052be:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_UART_MspInit+0xec>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80052ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d0:	2302      	movs	r3, #2
 80052d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052dc:	2307      	movs	r3, #7
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	4619      	mov	r1, r3
 80052e6:	481e      	ldr	r0, [pc, #120]	; (8005360 <HAL_UART_MspInit+0xf0>)
 80052e8:	f001 fc26 	bl	8006b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80052ec:	e030      	b.n	8005350 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_UART_MspInit+0xf4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d12b      	bne.n	8005350 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <HAL_UART_MspInit+0xec>)
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <HAL_UART_MspInit+0xec>)
 8005302:	f043 0320 	orr.w	r3, r3, #32
 8005306:	6453      	str	r3, [r2, #68]	; 0x44
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_UART_MspInit+0xec>)
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	4b10      	ldr	r3, [pc, #64]	; (800535c <HAL_UART_MspInit+0xec>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	4a0f      	ldr	r2, [pc, #60]	; (800535c <HAL_UART_MspInit+0xec>)
 800531e:	f043 0304 	orr.w	r3, r3, #4
 8005322:	6313      	str	r3, [r2, #48]	; 0x30
 8005324:	4b0d      	ldr	r3, [pc, #52]	; (800535c <HAL_UART_MspInit+0xec>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005330:	23c0      	movs	r3, #192	; 0xc0
 8005332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005334:	2302      	movs	r3, #2
 8005336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005338:	2300      	movs	r3, #0
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533c:	2303      	movs	r3, #3
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005340:	2308      	movs	r3, #8
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005344:	f107 031c 	add.w	r3, r7, #28
 8005348:	4619      	mov	r1, r3
 800534a:	4807      	ldr	r0, [pc, #28]	; (8005368 <HAL_UART_MspInit+0xf8>)
 800534c:	f001 fbf4 	bl	8006b38 <HAL_GPIO_Init>
}
 8005350:	bf00      	nop
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40004800 	.word	0x40004800
 800535c:	40023800 	.word	0x40023800
 8005360:	40020c00 	.word	0x40020c00
 8005364:	40011400 	.word	0x40011400
 8005368:	40020800 	.word	0x40020800

0800536c <enableVib>:

void setVibrationPower(uint8_t power){
	vibPower = power;
}

void enableVib(void){
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	TIM14->CCR1 = vibPower;
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <enableVib+0x18>)
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <enableVib+0x1c>)
 8005376:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000098 	.word	0x20000098
 8005388:	40002000 	.word	0x40002000

0800538c <disableVib>:
void disableVib(void){
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
	TIM14->CCR1 = 0;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <disableVib+0x14>)
 8005392:	2200      	movs	r2, #0
 8005394:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	40002000 	.word	0x40002000

080053a4 <pulseVib>:
		TIM14->CCR1 = vibPower;
	} else {
		TIM14->CCR1 = 0;
	}
}
void pulseVib(uint16_t duration, uint8_t power){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	460a      	mov	r2, r1
 80053ae:	80fb      	strh	r3, [r7, #6]
 80053b0:	4613      	mov	r3, r2
 80053b2:	717b      	strb	r3, [r7, #5]
	vibPower = power;
 80053b4:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <pulseVib+0x2c>)
 80053b6:	797b      	ldrb	r3, [r7, #5]
 80053b8:	7013      	strb	r3, [r2, #0]
	enableVib();
 80053ba:	f7ff ffd7 	bl	800536c <enableVib>
	setTimeout(duration, &disableVib);
 80053be:	88fb      	ldrh	r3, [r7, #6]
 80053c0:	4904      	ldr	r1, [pc, #16]	; (80053d4 <pulseVib+0x30>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fd86 	bl	8003ed4 <setTimeout>
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000098 	.word	0x20000098
 80053d4:	0800538d 	.word	0x0800538d

080053d8 <prevPage>:
}
void triplePressH(void){
	sprintf(&btnStr, "Triple press");
}

void prevPage(void){
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
	if(currentPage>0){
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <prevPage+0x30>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <prevPage+0x1a>
		currentPage--;
 80053e4:	4b08      	ldr	r3, [pc, #32]	; (8005408 <prevPage+0x30>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <prevPage+0x30>)
 80053ee:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=PAGES_NUM-1;
	}
}
 80053f0:	e005      	b.n	80053fe <prevPage+0x26>
		currentPage=PAGES_NUM-1;
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <prevPage+0x34>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <prevPage+0x30>)
 80053fc:	701a      	strb	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	20005c08 	.word	0x20005c08
 800540c:	20000099 	.word	0x20000099

08005410 <nextPage>:
void nextPage(void){
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
	if(currentPage<(PAGES_NUM-1)){
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <nextPage+0x34>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <nextPage+0x38>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	3b01      	subs	r3, #1
 8005420:	429a      	cmp	r2, r3
 8005422:	da06      	bge.n	8005432 <nextPage+0x22>
		currentPage++;
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <nextPage+0x34>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	3301      	adds	r3, #1
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <nextPage+0x34>)
 800542e:	701a      	strb	r2, [r3, #0]
	} else {
		currentPage=0;
	}
}
 8005430:	e002      	b.n	8005438 <nextPage+0x28>
		currentPage=0;
 8005432:	4b04      	ldr	r3, [pc, #16]	; (8005444 <nextPage+0x34>)
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20005c08 	.word	0x20005c08
 8005448:	20000099 	.word	0x20000099

0800544c <setDefaultClbcks>:

static void setDefaultClbcks(void){
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
//	btn_B2.onReleaseHandler = &quickReleaseH;
//	btn_B2.onPress = &quickPressH;
//	btn_B2.onRelease = &quickReleaseH;
//	btn_BB.onSinglePressHandler = &showOptions;

	btn_BA.onSinglePressHandler = &nextScreen;
 8005450:	4b08      	ldr	r3, [pc, #32]	; (8005474 <setDefaultClbcks+0x28>)
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <setDefaultClbcks+0x2c>)
 8005454:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <setDefaultClbcks+0x30>)
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <setDefaultClbcks+0x34>)
 800545a:	611a      	str	r2, [r3, #16]
	btn_B3.onSinglePressHandler = &prevPage;
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <setDefaultClbcks+0x38>)
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <setDefaultClbcks+0x3c>)
 8005460:	611a      	str	r2, [r3, #16]
	btn_B1.onSinglePressHandler = &nextPage;
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <setDefaultClbcks+0x40>)
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <setDefaultClbcks+0x44>)
 8005466:	611a      	str	r2, [r3, #16]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20002480 	.word	0x20002480
 8005478:	080027c1 	.word	0x080027c1
 800547c:	20002510 	.word	0x20002510
 8005480:	080027d1 	.word	0x080027d1
 8005484:	200025e8 	.word	0x200025e8
 8005488:	080053d9 	.word	0x080053d9
 800548c:	20002558 	.word	0x20002558
 8005490:	08005411 	.word	0x08005411

08005494 <showPage1>:

void showPage1(void){
 8005494:	b580      	push	{r7, lr}
 8005496:	b092      	sub	sp, #72	; 0x48
 8005498:	af02      	add	r7, sp, #8
	char fracStr[30] = {0};
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	615a      	str	r2, [r3, #20]
 80054b0:	831a      	strh	r2, [r3, #24]
		char timeStr[30] = {0};
 80054b2:	2300      	movs	r3, #0
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	1d3b      	adds	r3, r7, #4
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	611a      	str	r2, [r3, #16]
 80054c4:	615a      	str	r2, [r3, #20]
 80054c6:	831a      	strh	r2, [r3, #24]

	//	sprintf(&timeStr, "a%02d:%02d.%02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
		sprintf(&timeStr, "%02d:%02d %02d", RtcTime.Hours, RtcTime.Minutes, RtcTime.Seconds);
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <showPage1+0xa0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b19      	ldr	r3, [pc, #100]	; (8005534 <showPage1+0xa0>)
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	4619      	mov	r1, r3
 80054d4:	4b17      	ldr	r3, [pc, #92]	; (8005534 <showPage1+0xa0>)
 80054d6:	789b      	ldrb	r3, [r3, #2]
 80054d8:	4638      	mov	r0, r7
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	460b      	mov	r3, r1
 80054de:	4916      	ldr	r1, [pc, #88]	; (8005538 <showPage1+0xa4>)
 80054e0:	f00b f92e 	bl	8010740 <siprintf>
	//	sprintf(&fracStr, "%02d", 100*(RtcTime.SecondFraction - RtcTime.SubSeconds)/RtcTime.SecondFraction);
		lcdPutStr(14, 11, timeStr, zekton24font);
 80054e4:	463a      	mov	r2, r7
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <showPage1+0xa8>)
 80054e8:	210b      	movs	r1, #11
 80054ea:	200e      	movs	r0, #14
 80054ec:	f7fd fc6e 	bl	8002dcc <lcdPutStr>
		lcdVLine(1, 1*6, 1*6+33, 1);
 80054f0:	2301      	movs	r3, #1
 80054f2:	2227      	movs	r2, #39	; 0x27
 80054f4:	2106      	movs	r1, #6
 80054f6:	2001      	movs	r0, #1
 80054f8:	f7fd fc96 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 1*6-1, 1*6-1+35, 1);
 80054fc:	2301      	movs	r3, #1
 80054fe:	2228      	movs	r2, #40	; 0x28
 8005500:	2105      	movs	r1, #5
 8005502:	2002      	movs	r0, #2
 8005504:	f7fd fc90 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 1*6-1, 1*6-1+35, 1);
 8005508:	2301      	movs	r3, #1
 800550a:	2228      	movs	r2, #40	; 0x28
 800550c:	2105      	movs	r1, #5
 800550e:	2003      	movs	r0, #3
 8005510:	f7fd fc8a 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 1*6, 1*6+33, 1);
 8005514:	2301      	movs	r3, #1
 8005516:	2227      	movs	r2, #39	; 0x27
 8005518:	2106      	movs	r1, #6
 800551a:	2004      	movs	r0, #4
 800551c:	f7fd fc84 	bl	8002e28 <lcdVLine>


		lcdPutStr(14, 60, btnStr, zekton24font);
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <showPage1+0xa8>)
 8005522:	4a07      	ldr	r2, [pc, #28]	; (8005540 <showPage1+0xac>)
 8005524:	213c      	movs	r1, #60	; 0x3c
 8005526:	200e      	movs	r0, #14
 8005528:	f7fd fc50 	bl	8002dcc <lcdPutStr>
}
 800552c:	bf00      	nop
 800552e:	3740      	adds	r7, #64	; 0x40
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20005570 	.word	0x20005570
 8005538:	08013c00 	.word	0x08013c00
 800553c:	0801a8b4 	.word	0x0801a8b4
 8005540:	20005c0c 	.word	0x20005c0c

08005544 <showPage2>:
void showPage2(void){
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 800554a:	2300      	movs	r3, #0
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	615a      	str	r2, [r3, #20]
 800555e:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "STW");
 8005560:	463b      	mov	r3, r7
 8005562:	4913      	ldr	r1, [pc, #76]	; (80055b0 <showPage2+0x6c>)
 8005564:	4618      	mov	r0, r3
 8005566:	f00b f8eb 	bl	8010740 <siprintf>
		lcdPutStr(14, 50, fracStr, zekton24font);
 800556a:	463a      	mov	r2, r7
 800556c:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <showPage2+0x70>)
 800556e:	2132      	movs	r1, #50	; 0x32
 8005570:	200e      	movs	r0, #14
 8005572:	f7fd fc2b 	bl	8002dcc <lcdPutStr>
		lcdVLine(1, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 8005576:	2301      	movs	r3, #1
 8005578:	224e      	movs	r2, #78	; 0x4e
 800557a:	212d      	movs	r1, #45	; 0x2d
 800557c:	2001      	movs	r0, #1
 800557e:	f7fd fc53 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 8005582:	2301      	movs	r3, #1
 8005584:	224f      	movs	r2, #79	; 0x4f
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	2002      	movs	r0, #2
 800558a:	f7fd fc4d 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 2*6-1+(2-1)*33, 2*6-1+35+(2-1)*33, 1);
 800558e:	2301      	movs	r3, #1
 8005590:	224f      	movs	r2, #79	; 0x4f
 8005592:	212c      	movs	r1, #44	; 0x2c
 8005594:	2003      	movs	r0, #3
 8005596:	f7fd fc47 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 2*6+(2-1)*33, 2*6+33+(2-1)*33, 1);
 800559a:	2301      	movs	r3, #1
 800559c:	224e      	movs	r2, #78	; 0x4e
 800559e:	212d      	movs	r1, #45	; 0x2d
 80055a0:	2004      	movs	r0, #4
 80055a2:	f7fd fc41 	bl	8002e28 <lcdVLine>
}
 80055a6:	bf00      	nop
 80055a8:	3720      	adds	r7, #32
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08013c10 	.word	0x08013c10
 80055b4:	0801a8b4 	.word	0x0801a8b4

080055b8 <showPage3>:
void showPage3(void){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80055be:	2300      	movs	r3, #0
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	611a      	str	r2, [r3, #16]
 80055d0:	615a      	str	r2, [r3, #20]
 80055d2:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 3: TMR");
 80055d4:	463b      	mov	r3, r7
 80055d6:	4913      	ldr	r1, [pc, #76]	; (8005624 <showPage3+0x6c>)
 80055d8:	4618      	mov	r0, r3
 80055da:	f00b f8b1 	bl	8010740 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 80055de:	463a      	mov	r2, r7
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <showPage3+0x70>)
 80055e2:	2100      	movs	r1, #0
 80055e4:	2000      	movs	r0, #0
 80055e6:	f7fd fbf1 	bl	8002dcc <lcdPutStr>
		lcdVLine(1, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 80055ea:	2301      	movs	r3, #1
 80055ec:	2275      	movs	r2, #117	; 0x75
 80055ee:	2154      	movs	r1, #84	; 0x54
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7fd fc19 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 80055f6:	2301      	movs	r3, #1
 80055f8:	2276      	movs	r2, #118	; 0x76
 80055fa:	2153      	movs	r1, #83	; 0x53
 80055fc:	2002      	movs	r0, #2
 80055fe:	f7fd fc13 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 3*6-1+(3-1)*33, 3*6-1+35+(3-1)*33, 1);
 8005602:	2301      	movs	r3, #1
 8005604:	2276      	movs	r2, #118	; 0x76
 8005606:	2153      	movs	r1, #83	; 0x53
 8005608:	2003      	movs	r0, #3
 800560a:	f7fd fc0d 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 3*6+(3-1)*33, 3*6+33+(3-1)*33, 1);
 800560e:	2301      	movs	r3, #1
 8005610:	2275      	movs	r2, #117	; 0x75
 8005612:	2154      	movs	r1, #84	; 0x54
 8005614:	2004      	movs	r0, #4
 8005616:	f7fd fc07 	bl	8002e28 <lcdVLine>
}
 800561a:	bf00      	nop
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	08013c14 	.word	0x08013c14
 8005628:	0801a8b4 	.word	0x0801a8b4

0800562c <showPage4>:
void showPage4(void){
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 8005632:	2300      	movs	r3, #0
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
 8005644:	615a      	str	r2, [r3, #20]
 8005646:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "Page 4: CAL");
 8005648:	463b      	mov	r3, r7
 800564a:	4913      	ldr	r1, [pc, #76]	; (8005698 <showPage4+0x6c>)
 800564c:	4618      	mov	r0, r3
 800564e:	f00b f877 	bl	8010740 <siprintf>
		lcdPutStr(0, 0, fracStr, zekton24font);
 8005652:	463a      	mov	r2, r7
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <showPage4+0x70>)
 8005656:	2100      	movs	r1, #0
 8005658:	2000      	movs	r0, #0
 800565a:	f7fd fbb7 	bl	8002dcc <lcdPutStr>
		lcdVLine(1, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 800565e:	2301      	movs	r3, #1
 8005660:	229c      	movs	r2, #156	; 0x9c
 8005662:	217b      	movs	r1, #123	; 0x7b
 8005664:	2001      	movs	r0, #1
 8005666:	f7fd fbdf 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 800566a:	2301      	movs	r3, #1
 800566c:	229d      	movs	r2, #157	; 0x9d
 800566e:	217a      	movs	r1, #122	; 0x7a
 8005670:	2002      	movs	r0, #2
 8005672:	f7fd fbd9 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 4*6-1+(4-1)*33, 4*6-1+35+(4-1)*33, 1);
 8005676:	2301      	movs	r3, #1
 8005678:	229d      	movs	r2, #157	; 0x9d
 800567a:	217a      	movs	r1, #122	; 0x7a
 800567c:	2003      	movs	r0, #3
 800567e:	f7fd fbd3 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 4*6+(4-1)*33, 4*6+33+(4-1)*33, 1);
 8005682:	2301      	movs	r3, #1
 8005684:	229c      	movs	r2, #156	; 0x9c
 8005686:	217b      	movs	r1, #123	; 0x7b
 8005688:	2004      	movs	r0, #4
 800568a:	f7fd fbcd 	bl	8002e28 <lcdVLine>
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	08013c20 	.word	0x08013c20
 800569c:	0801a8b4 	.word	0x0801a8b4

080056a0 <showPage5>:
void showPage5(void){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
	char fracStr[30] = {0};
 80056a6:	2300      	movs	r3, #0
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	1d3b      	adds	r3, r7, #4
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	611a      	str	r2, [r3, #16]
 80056b8:	615a      	str	r2, [r3, #20]
 80056ba:	831a      	strh	r2, [r3, #24]
		sprintf(&fracStr, "ABCabc123!@#");
 80056bc:	463b      	mov	r3, r7
 80056be:	4925      	ldr	r1, [pc, #148]	; (8005754 <showPage5+0xb4>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f00b f83d 	bl	8010740 <siprintf>
		lcdPutStr(10, 0, fracStr, smallFont);
 80056c6:	463a      	mov	r2, r7
 80056c8:	4b23      	ldr	r3, [pc, #140]	; (8005758 <showPage5+0xb8>)
 80056ca:	2100      	movs	r1, #0
 80056cc:	200a      	movs	r0, #10
 80056ce:	f7fd fb7d 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 15, fracStr, ocrFont);
 80056d2:	463a      	mov	r2, r7
 80056d4:	4b21      	ldr	r3, [pc, #132]	; (800575c <showPage5+0xbc>)
 80056d6:	210f      	movs	r1, #15
 80056d8:	200a      	movs	r0, #10
 80056da:	f7fd fb77 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 50, fracStr, smallestFont);
 80056de:	463a      	mov	r2, r7
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <showPage5+0xc0>)
 80056e2:	2132      	movs	r1, #50	; 0x32
 80056e4:	200a      	movs	r0, #10
 80056e6:	f7fd fb71 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 60, fracStr, font_13_calibri);
 80056ea:	463a      	mov	r2, r7
 80056ec:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <showPage5+0xc4>)
 80056ee:	213c      	movs	r1, #60	; 0x3c
 80056f0:	200a      	movs	r0, #10
 80056f2:	f7fd fb6b 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 90, fracStr, font_12_zekton);
 80056f6:	463a      	mov	r2, r7
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <showPage5+0xc8>)
 80056fa:	215a      	movs	r1, #90	; 0x5a
 80056fc:	200a      	movs	r0, #10
 80056fe:	f7fd fb65 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 120, fracStr, font_12_zekton_bold);
 8005702:	463a      	mov	r2, r7
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <showPage5+0xcc>)
 8005706:	2178      	movs	r1, #120	; 0x78
 8005708:	200a      	movs	r0, #10
 800570a:	f7fd fb5f 	bl	8002dcc <lcdPutStr>
		lcdPutStr(10, 150, fracStr, zekton24font);
 800570e:	463a      	mov	r2, r7
 8005710:	4b17      	ldr	r3, [pc, #92]	; (8005770 <showPage5+0xd0>)
 8005712:	2196      	movs	r1, #150	; 0x96
 8005714:	200a      	movs	r0, #10
 8005716:	f7fd fb59 	bl	8002dcc <lcdPutStr>
//		lcdPutStr(10, 180, fracStr, zekton45font);
		lcdVLine(1, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800571a:	2301      	movs	r3, #1
 800571c:	22c3      	movs	r2, #195	; 0xc3
 800571e:	21a2      	movs	r1, #162	; 0xa2
 8005720:	2001      	movs	r0, #1
 8005722:	f7fd fb81 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005726:	2301      	movs	r3, #1
 8005728:	22c4      	movs	r2, #196	; 0xc4
 800572a:	21a1      	movs	r1, #161	; 0xa1
 800572c:	2002      	movs	r0, #2
 800572e:	f7fd fb7b 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 5*6-1+(5-1)*33, 5*6-1+35+(5-1)*33, 1);
 8005732:	2301      	movs	r3, #1
 8005734:	22c4      	movs	r2, #196	; 0xc4
 8005736:	21a1      	movs	r1, #161	; 0xa1
 8005738:	2003      	movs	r0, #3
 800573a:	f7fd fb75 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 5*6+(5-1)*33, 5*6+33+(5-1)*33, 1);
 800573e:	2301      	movs	r3, #1
 8005740:	22c3      	movs	r2, #195	; 0xc3
 8005742:	21a2      	movs	r1, #162	; 0xa2
 8005744:	2004      	movs	r0, #4
 8005746:	f7fd fb6f 	bl	8002e28 <lcdVLine>
}
 800574a:	bf00      	nop
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	08013c2c 	.word	0x08013c2c
 8005758:	080187a4 	.word	0x080187a4
 800575c:	080192ec 	.word	0x080192ec
 8005760:	08015dbc 	.word	0x08015dbc
 8005764:	08016238 	.word	0x08016238
 8005768:	08017294 	.word	0x08017294
 800576c:	08017d1c 	.word	0x08017d1c
 8005770:	0801a8b4 	.word	0x0801a8b4

08005774 <showPage6>:
void showPage6(void){
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af04      	add	r7, sp, #16
		lcdVLine(1, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800577a:	2301      	movs	r3, #1
 800577c:	22ea      	movs	r2, #234	; 0xea
 800577e:	21c9      	movs	r1, #201	; 0xc9
 8005780:	2001      	movs	r0, #1
 8005782:	f7fd fb51 	bl	8002e28 <lcdVLine>
		lcdVLine(2, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005786:	2301      	movs	r3, #1
 8005788:	22eb      	movs	r2, #235	; 0xeb
 800578a:	21c8      	movs	r1, #200	; 0xc8
 800578c:	2002      	movs	r0, #2
 800578e:	f7fd fb4b 	bl	8002e28 <lcdVLine>
		lcdVLine(3, 6*6-1+(6-1)*33, 6*6-1+35+(6-1)*33, 1);
 8005792:	2301      	movs	r3, #1
 8005794:	22eb      	movs	r2, #235	; 0xeb
 8005796:	21c8      	movs	r1, #200	; 0xc8
 8005798:	2003      	movs	r0, #3
 800579a:	f7fd fb45 	bl	8002e28 <lcdVLine>
		lcdVLine(4, 6*6+(6-1)*33, 6*6+33+(6-1)*33, 1);
 800579e:	2301      	movs	r3, #1
 80057a0:	22ea      	movs	r2, #234	; 0xea
 80057a2:	21c9      	movs	r1, #201	; 0xc9
 80057a4:	2004      	movs	r0, #4
 80057a6:	f7fd fb3f 	bl	8002e28 <lcdVLine>
		lcdRect(0,399,25,80,1);
 80057aa:	2301      	movs	r3, #1
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2350      	movs	r3, #80	; 0x50
 80057b0:	2219      	movs	r2, #25
 80057b2:	f240 118f 	movw	r1, #399	; 0x18f
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fe f8d4 	bl	8003964 <lcdRect>
		lcdRect(0,399,120,180,1);
 80057bc:	2301      	movs	r3, #1
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	23b4      	movs	r3, #180	; 0xb4
 80057c2:	2278      	movs	r2, #120	; 0x78
 80057c4:	f240 118f 	movw	r1, #399	; 0x18f
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7fe f8cb 	bl	8003964 <lcdRect>
		lcdRect2(10, 50, 10, 50,     3, 0, 1);
 80057ce:	2301      	movs	r3, #1
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	2300      	movs	r3, #0
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	2303      	movs	r3, #3
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	2332      	movs	r3, #50	; 0x32
 80057dc:	220a      	movs	r2, #10
 80057de:	2132      	movs	r1, #50	; 0x32
 80057e0:	200a      	movs	r0, #10
 80057e2:	f7fe fae4 	bl	8003dae <lcdRect2>
		lcdRect2(60, 100, 10, 50,    3, 1, 1);
 80057e6:	2301      	movs	r3, #1
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	2301      	movs	r3, #1
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	2303      	movs	r3, #3
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2332      	movs	r3, #50	; 0x32
 80057f4:	220a      	movs	r2, #10
 80057f6:	2164      	movs	r1, #100	; 0x64
 80057f8:	203c      	movs	r0, #60	; 0x3c
 80057fa:	f7fe fad8 	bl	8003dae <lcdRect2>
		lcdRect2(110, 150, 10, 50,   3, 2, 1);
 80057fe:	2301      	movs	r3, #1
 8005800:	9302      	str	r3, [sp, #8]
 8005802:	2302      	movs	r3, #2
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	2303      	movs	r3, #3
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	2332      	movs	r3, #50	; 0x32
 800580c:	220a      	movs	r2, #10
 800580e:	2196      	movs	r1, #150	; 0x96
 8005810:	206e      	movs	r0, #110	; 0x6e
 8005812:	f7fe facc 	bl	8003dae <lcdRect2>
		lcdRect2(160, 200, 10, 50,   3, 3, 1);
 8005816:	2301      	movs	r3, #1
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	2303      	movs	r3, #3
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	2303      	movs	r3, #3
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	2332      	movs	r3, #50	; 0x32
 8005824:	220a      	movs	r2, #10
 8005826:	21c8      	movs	r1, #200	; 0xc8
 8005828:	20a0      	movs	r0, #160	; 0xa0
 800582a:	f7fe fac0 	bl	8003dae <lcdRect2>
		lcdRect2(210, 250, 10, 50,   3, 4, 1);
 800582e:	2301      	movs	r3, #1
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	2304      	movs	r3, #4
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	2303      	movs	r3, #3
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2332      	movs	r3, #50	; 0x32
 800583c:	220a      	movs	r2, #10
 800583e:	21fa      	movs	r1, #250	; 0xfa
 8005840:	20d2      	movs	r0, #210	; 0xd2
 8005842:	f7fe fab4 	bl	8003dae <lcdRect2>
		lcdRect2(260, 300, 10, 50,   3, 5, 1);
 8005846:	2301      	movs	r3, #1
 8005848:	9302      	str	r3, [sp, #8]
 800584a:	2305      	movs	r3, #5
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	2303      	movs	r3, #3
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2332      	movs	r3, #50	; 0x32
 8005854:	220a      	movs	r2, #10
 8005856:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800585a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800585e:	f7fe faa6 	bl	8003dae <lcdRect2>
		lcdRect2(310, 350, 10, 50,   3, 6, 1);
 8005862:	2301      	movs	r3, #1
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	2306      	movs	r3, #6
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	2303      	movs	r3, #3
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	2332      	movs	r3, #50	; 0x32
 8005870:	220a      	movs	r2, #10
 8005872:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005876:	f44f 709b 	mov.w	r0, #310	; 0x136
 800587a:	f7fe fa98 	bl	8003dae <lcdRect2>
		lcdRect2(10, 50, 60, 100,    3, 7, 1);
 800587e:	2301      	movs	r3, #1
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	2307      	movs	r3, #7
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	2303      	movs	r3, #3
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2364      	movs	r3, #100	; 0x64
 800588c:	223c      	movs	r2, #60	; 0x3c
 800588e:	2132      	movs	r1, #50	; 0x32
 8005890:	200a      	movs	r0, #10
 8005892:	f7fe fa8c 	bl	8003dae <lcdRect2>
		lcdRect2(60, 100, 60, 100,   3, 8, 1);
 8005896:	2301      	movs	r3, #1
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	2308      	movs	r3, #8
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	2303      	movs	r3, #3
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	2364      	movs	r3, #100	; 0x64
 80058a4:	223c      	movs	r2, #60	; 0x3c
 80058a6:	2164      	movs	r1, #100	; 0x64
 80058a8:	203c      	movs	r0, #60	; 0x3c
 80058aa:	f7fe fa80 	bl	8003dae <lcdRect2>
		lcdRect2(110, 150, 60, 100,  3, 9, 1);
 80058ae:	2301      	movs	r3, #1
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	2309      	movs	r3, #9
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	2303      	movs	r3, #3
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2364      	movs	r3, #100	; 0x64
 80058bc:	223c      	movs	r2, #60	; 0x3c
 80058be:	2196      	movs	r1, #150	; 0x96
 80058c0:	206e      	movs	r0, #110	; 0x6e
 80058c2:	f7fe fa74 	bl	8003dae <lcdRect2>
		lcdRect2(160, 200, 60, 100,  3, 10, 1);
 80058c6:	2301      	movs	r3, #1
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	230a      	movs	r3, #10
 80058cc:	9301      	str	r3, [sp, #4]
 80058ce:	2303      	movs	r3, #3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	2364      	movs	r3, #100	; 0x64
 80058d4:	223c      	movs	r2, #60	; 0x3c
 80058d6:	21c8      	movs	r1, #200	; 0xc8
 80058d8:	20a0      	movs	r0, #160	; 0xa0
 80058da:	f7fe fa68 	bl	8003dae <lcdRect2>
		lcdRect2(210, 250, 60, 100,  3, 11, 1);
 80058de:	2301      	movs	r3, #1
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	230b      	movs	r3, #11
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	2303      	movs	r3, #3
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2364      	movs	r3, #100	; 0x64
 80058ec:	223c      	movs	r2, #60	; 0x3c
 80058ee:	21fa      	movs	r1, #250	; 0xfa
 80058f0:	20d2      	movs	r0, #210	; 0xd2
 80058f2:	f7fe fa5c 	bl	8003dae <lcdRect2>
		lcdRect2(260, 300, 60, 100,  3, 12, 1);
 80058f6:	2301      	movs	r3, #1
 80058f8:	9302      	str	r3, [sp, #8]
 80058fa:	230c      	movs	r3, #12
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	2303      	movs	r3, #3
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2364      	movs	r3, #100	; 0x64
 8005904:	223c      	movs	r2, #60	; 0x3c
 8005906:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800590a:	f44f 7082 	mov.w	r0, #260	; 0x104
 800590e:	f7fe fa4e 	bl	8003dae <lcdRect2>
		lcdRect2(310, 350, 60, 100,  3, 13, 1);
 8005912:	2301      	movs	r3, #1
 8005914:	9302      	str	r3, [sp, #8]
 8005916:	230d      	movs	r3, #13
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	2303      	movs	r3, #3
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	2364      	movs	r3, #100	; 0x64
 8005920:	223c      	movs	r2, #60	; 0x3c
 8005922:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005926:	f44f 709b 	mov.w	r0, #310	; 0x136
 800592a:	f7fe fa40 	bl	8003dae <lcdRect2>
		lcdRect2(10, 50, 110, 150,   3, 14, 1);
 800592e:	2301      	movs	r3, #1
 8005930:	9302      	str	r3, [sp, #8]
 8005932:	230e      	movs	r3, #14
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	2303      	movs	r3, #3
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	2396      	movs	r3, #150	; 0x96
 800593c:	226e      	movs	r2, #110	; 0x6e
 800593e:	2132      	movs	r1, #50	; 0x32
 8005940:	200a      	movs	r0, #10
 8005942:	f7fe fa34 	bl	8003dae <lcdRect2>
		lcdRect2(60, 100, 110, 150,  3, 15, 1);
 8005946:	2301      	movs	r3, #1
 8005948:	9302      	str	r3, [sp, #8]
 800594a:	230f      	movs	r3, #15
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	2303      	movs	r3, #3
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	2396      	movs	r3, #150	; 0x96
 8005954:	226e      	movs	r2, #110	; 0x6e
 8005956:	2164      	movs	r1, #100	; 0x64
 8005958:	203c      	movs	r0, #60	; 0x3c
 800595a:	f7fe fa28 	bl	8003dae <lcdRect2>
		lcdRect2(110, 150, 110, 150, 3, 16, 1);
 800595e:	2301      	movs	r3, #1
 8005960:	9302      	str	r3, [sp, #8]
 8005962:	2310      	movs	r3, #16
 8005964:	9301      	str	r3, [sp, #4]
 8005966:	2303      	movs	r3, #3
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	2396      	movs	r3, #150	; 0x96
 800596c:	226e      	movs	r2, #110	; 0x6e
 800596e:	2196      	movs	r1, #150	; 0x96
 8005970:	206e      	movs	r0, #110	; 0x6e
 8005972:	f7fe fa1c 	bl	8003dae <lcdRect2>
		lcdRect2(160, 200, 110, 150, 3, 17, 1);
 8005976:	2301      	movs	r3, #1
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	2311      	movs	r3, #17
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	2303      	movs	r3, #3
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	2396      	movs	r3, #150	; 0x96
 8005984:	226e      	movs	r2, #110	; 0x6e
 8005986:	21c8      	movs	r1, #200	; 0xc8
 8005988:	20a0      	movs	r0, #160	; 0xa0
 800598a:	f7fe fa10 	bl	8003dae <lcdRect2>
		lcdRect2(210, 250, 110, 150, 3, 18, 1);
 800598e:	2301      	movs	r3, #1
 8005990:	9302      	str	r3, [sp, #8]
 8005992:	2312      	movs	r3, #18
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	2303      	movs	r3, #3
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2396      	movs	r3, #150	; 0x96
 800599c:	226e      	movs	r2, #110	; 0x6e
 800599e:	21fa      	movs	r1, #250	; 0xfa
 80059a0:	20d2      	movs	r0, #210	; 0xd2
 80059a2:	f7fe fa04 	bl	8003dae <lcdRect2>
		lcdRect2(260, 300, 110, 150, 3, 19, 1);
 80059a6:	2301      	movs	r3, #1
 80059a8:	9302      	str	r3, [sp, #8]
 80059aa:	2313      	movs	r3, #19
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	2303      	movs	r3, #3
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	2396      	movs	r3, #150	; 0x96
 80059b4:	226e      	movs	r2, #110	; 0x6e
 80059b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80059ba:	f44f 7082 	mov.w	r0, #260	; 0x104
 80059be:	f7fe f9f6 	bl	8003dae <lcdRect2>
		lcdRect2(310, 350, 110, 150, 3, 20, 1);
 80059c2:	2301      	movs	r3, #1
 80059c4:	9302      	str	r3, [sp, #8]
 80059c6:	2314      	movs	r3, #20
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	2303      	movs	r3, #3
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	2396      	movs	r3, #150	; 0x96
 80059d0:	226e      	movs	r2, #110	; 0x6e
 80059d2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059d6:	f44f 709b 	mov.w	r0, #310	; 0x136
 80059da:	f7fe f9e8 	bl	8003dae <lcdRect2>
		lcdRect2(10, 350, 160, 200, 1, 4);
 80059de:	2304      	movs	r3, #4
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2301      	movs	r3, #1
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	23c8      	movs	r3, #200	; 0xc8
 80059e8:	22a0      	movs	r2, #160	; 0xa0
 80059ea:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80059ee:	200a      	movs	r0, #10
 80059f0:	f7fe f9dd 	bl	8003dae <lcdRect2>
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <showPage>:

void showPage(uint8_t pageNum){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
	switch(pageNum){
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	2b05      	cmp	r3, #5
 8005a0a:	d821      	bhi.n	8005a50 <showPage+0x54>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <showPage+0x18>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a2d 	.word	0x08005a2d
 8005a18:	08005a33 	.word	0x08005a33
 8005a1c:	08005a39 	.word	0x08005a39
 8005a20:	08005a3f 	.word	0x08005a3f
 8005a24:	08005a45 	.word	0x08005a45
 8005a28:	08005a4b 	.word	0x08005a4b
	case 0:
		showPage1();
 8005a2c:	f7ff fd32 	bl	8005494 <showPage1>
		break;
 8005a30:	e00e      	b.n	8005a50 <showPage+0x54>
	case 1:
		showPage2();
 8005a32:	f7ff fd87 	bl	8005544 <showPage2>
		break;
 8005a36:	e00b      	b.n	8005a50 <showPage+0x54>
	case 2:
		showPage3();
 8005a38:	f7ff fdbe 	bl	80055b8 <showPage3>
		break;
 8005a3c:	e008      	b.n	8005a50 <showPage+0x54>
	case 3:
		showPage4();
 8005a3e:	f7ff fdf5 	bl	800562c <showPage4>
		break;
 8005a42:	e005      	b.n	8005a50 <showPage+0x54>
	case 4:
		showPage5();
 8005a44:	f7ff fe2c 	bl	80056a0 <showPage5>
		break;
 8005a48:	e002      	b.n	8005a50 <showPage+0x54>
	case 5:
		showPage6();
 8005a4a:	f7ff fe93 	bl	8005774 <showPage6>
		break;
 8005a4e:	bf00      	nop
	}
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <screentestSetup>:

void screentestSetup(void){
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005a5c:	f7ff fcf6 	bl	800544c <setDefaultClbcks>
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <screentestMain>:

void screentestMain(void){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
	char tempStr[30] = {0};
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	611a      	str	r2, [r3, #16]
 8005a7c:	615a      	str	r2, [r3, #20]
 8005a7e:	831a      	strh	r2, [r3, #24]
//	sprintf(&tempStr, "Settings will be shown");
//	lcdPutStr(0, 0, tempStr, font_13_calibri);
	showPage(currentPage);
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <screentestMain+0x30>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ffb9 	bl	80059fc <showPage>

}
 8005a8a:	bf00      	nop
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20005c08 	.word	0x20005c08

08005a98 <switchStwView>:
#include <fonts/zekton45.h>
#include <fonts/font_zekton12.h>
#include "stopwatchModule.h"

uint8_t stwSubView = 0;
void switchStwView(void){
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
//	if(stwSubView<3){
//		stwSubView++;
//	} else {
//		stwSubView = 0;
//	}
		stwSubView++;
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <switchStwView+0x1c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <switchStwView+0x1c>)
 8005aa6:	701a      	strb	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20005c2b 	.word	0x20005c2b

08005ab8 <startStopwatch>:

void startStopwatch(){
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
	stwStart();
 8005abc:	f7fe feb8 	bl	8004830 <stwStart>
	btn_BB.onSinglePressHandler = &stopStopwatch;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <startStopwatch+0x18>)
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <startStopwatch+0x1c>)
 8005ac4:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &saveStopwatch;
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <startStopwatch+0x20>)
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <startStopwatch+0x24>)
 8005aca:	611a      	str	r2, [r3, #16]
}
 8005acc:	bf00      	nop
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200024c8 	.word	0x200024c8
 8005ad4:	08005ae1 	.word	0x08005ae1
 8005ad8:	200025a0 	.word	0x200025a0
 8005adc:	08005b15 	.word	0x08005b15

08005ae0 <stopStopwatch>:
void stopStopwatch(){
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
	stwStop();
 8005ae4:	f7fe fec4 	bl	8004870 <stwStop>
	btn_BB.onSinglePressHandler = &startStopwatch;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <stopStopwatch+0x18>)
 8005aea:	4a04      	ldr	r2, [pc, #16]	; (8005afc <stopStopwatch+0x1c>)
 8005aec:	611a      	str	r2, [r3, #16]
	btn_B2.onSinglePressHandler = &resetStopwatch;
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <stopStopwatch+0x20>)
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <stopStopwatch+0x24>)
 8005af2:	611a      	str	r2, [r3, #16]
}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	200024c8 	.word	0x200024c8
 8005afc:	08005ab9 	.word	0x08005ab9
 8005b00:	200025a0 	.word	0x200025a0
 8005b04:	08005b09 	.word	0x08005b09

08005b08 <resetStopwatch>:
void resetStopwatch(){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	stwClear();
 8005b0c:	f7fe febe 	bl	800488c <stwClear>
//	stwT.clear();
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <saveStopwatch>:
void saveStopwatch(){
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
	stwSave();
 8005b18:	f7fe ff2c 	bl	8004974 <stwSave>
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
	btn_B3.onSinglePressHandler = &resetPos;
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <setDefaultClbcks+0x48>)
 8005b26:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <setDefaultClbcks+0x4c>)
 8005b28:	611a      	str	r2, [r3, #16]
	btn_BA.onSinglePressHandler = &nextScreen;
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <setDefaultClbcks+0x50>)
 8005b2c:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <setDefaultClbcks+0x54>)
 8005b2e:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <setDefaultClbcks+0x58>)
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <setDefaultClbcks+0x5c>)
 8005b34:	611a      	str	r2, [r3, #16]

	btn_B1.onSinglePressHandler = &switchStwView;
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <setDefaultClbcks+0x60>)
 8005b38:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <setDefaultClbcks+0x64>)
 8005b3a:	611a      	str	r2, [r3, #16]
	// Start/pause stw
	if(stwS.state){
 8005b3c:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <setDefaultClbcks+0x68>)
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <setDefaultClbcks+0x32>
		btn_BB.onSinglePressHandler = &stopStopwatch;
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <setDefaultClbcks+0x6c>)
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <setDefaultClbcks+0x70>)
 8005b48:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &saveStopwatch;
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <setDefaultClbcks+0x74>)
 8005b4c:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <setDefaultClbcks+0x78>)
 8005b4e:	611a      	str	r2, [r3, #16]
	} else {
		btn_BB.onSinglePressHandler = &startStopwatch;
		btn_B2.onSinglePressHandler = &resetStopwatch;
	}
}
 8005b50:	e005      	b.n	8005b5e <setDefaultClbcks+0x3e>
		btn_BB.onSinglePressHandler = &startStopwatch;
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <setDefaultClbcks+0x6c>)
 8005b54:	4a11      	ldr	r2, [pc, #68]	; (8005b9c <setDefaultClbcks+0x7c>)
 8005b56:	611a      	str	r2, [r3, #16]
		btn_B2.onSinglePressHandler = &resetStopwatch;
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <setDefaultClbcks+0x74>)
 8005b5a:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <setDefaultClbcks+0x80>)
 8005b5c:	611a      	str	r2, [r3, #16]
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	200025e8 	.word	0x200025e8
 8005b6c:	080027e1 	.word	0x080027e1
 8005b70:	20002480 	.word	0x20002480
 8005b74:	080027c1 	.word	0x080027c1
 8005b78:	20002510 	.word	0x20002510
 8005b7c:	080027d1 	.word	0x080027d1
 8005b80:	20002558 	.word	0x20002558
 8005b84:	08005a99 	.word	0x08005a99
 8005b88:	20000088 	.word	0x20000088
 8005b8c:	200024c8 	.word	0x200024c8
 8005b90:	08005ae1 	.word	0x08005ae1
 8005b94:	200025a0 	.word	0x200025a0
 8005b98:	08005b15 	.word	0x08005b15
 8005b9c:	08005ab9 	.word	0x08005ab9
 8005ba0:	08005b09 	.word	0x08005b09

08005ba4 <stwSetup>:

// initialize stopwatch values
struct stopwatch_t stw_val = {0, 0, 0, 0};
struct stopwatch_t stw_lap_val = {0, 0, 0, 0};

void stwSetup(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8005ba8:	f7ff ffba 	bl	8005b20 <setDefaultClbcks>
}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <stwMain>:
// position of the top of the stopwatch total value
uint8_t stw_time_y_pos = 40;

// functions to execute when menu item entered
void stwMain(void){
 8005bb0:	b590      	push	{r4, r7, lr}
 8005bb2:	b091      	sub	sp, #68	; 0x44
 8005bb4:	af04      	add	r7, sp, #16
//	lcdPutIcon(2, 200, accept_icon);
//	lcdPutIcon(370, 106, play_pause_icon);
//	lcdPutIcon(2, 106, cancel_icon);

	// statusbar
	lcdPutIcon(320, 5, full_battery_icon);
 8005bb6:	4aa4      	ldr	r2, [pc, #656]	; (8005e48 <stwMain+0x298>)
 8005bb8:	2105      	movs	r1, #5
 8005bba:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8005bbe:	f7fd f83d 	bl	8002c3c <lcdPutIcon>
	char timeString[6] = {0};
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	sprintf(&timeString, "%02d:%02d", RtcTime.Hours, RtcTime.Minutes);
 8005bca:	4ba0      	ldr	r3, [pc, #640]	; (8005e4c <stwMain+0x29c>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4b9e      	ldr	r3, [pc, #632]	; (8005e4c <stwMain+0x29c>)
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005bd8:	499d      	ldr	r1, [pc, #628]	; (8005e50 <stwMain+0x2a0>)
 8005bda:	f00a fdb1 	bl	8010740 <siprintf>
	lcdPutStr(400 - 5 - (*font_12_zekton.font_Width) * strlen(timeString), 5, timeString, font_12_zekton);
 8005bde:	2309      	movs	r3, #9
 8005be0:	b29c      	uxth	r4, r3
 8005be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fa fb02 	bl	80001f0 <strlen>
 8005bec:	4603      	mov	r3, r0
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	fb14 f303 	smulbb	r3, r4, r3
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f5c3 73c5 	rsb	r3, r3, #394	; 0x18a
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	b298      	uxth	r0, r3
 8005bfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c02:	4b94      	ldr	r3, [pc, #592]	; (8005e54 <stwMain+0x2a4>)
 8005c04:	2105      	movs	r1, #5
 8005c06:	f7fd f8e1 	bl	8002dcc <lcdPutStr>
	char tempStr2[30] = {0};
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	f107 030c 	add.w	r3, r7, #12
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	611a      	str	r2, [r3, #16]
 8005c1e:	615a      	str	r2, [r3, #20]
 8005c20:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "Stopwatch");
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	498c      	ldr	r1, [pc, #560]	; (8005e58 <stwMain+0x2a8>)
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f00a fd89 	bl	8010740 <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 8005c2e:	f107 0208 	add.w	r2, r7, #8
 8005c32:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <stwMain+0x2a4>)
 8005c34:	2105      	movs	r1, #5
 8005c36:	2005      	movs	r0, #5
 8005c38:	f7fd f8c8 	bl	8002dcc <lcdPutStr>

	// update stopwatch value
	getStw(&stw_val, &stwS);
 8005c3c:	4987      	ldr	r1, [pc, #540]	; (8005e5c <stwMain+0x2ac>)
 8005c3e:	4888      	ldr	r0, [pc, #544]	; (8005e60 <stwMain+0x2b0>)
 8005c40:	f7fe fe40 	bl	80048c4 <getStw>

	// main STW view
	//show hours if exist
	if(stw_val.hours != 0){
 8005c44:	4b86      	ldr	r3, [pc, #536]	; (8005e60 <stwMain+0x2b0>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d025      	beq.n	8005c98 <stwMain+0xe8>
//	if(1){
		sprintf(&tempStr2, "%02dh %02d'%02d\"", stw_val.hours, stw_val.min, stw_val.sec);
 8005c4c:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <stwMain+0x2b0>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b83      	ldr	r3, [pc, #524]	; (8005e60 <stwMain+0x2b0>)
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	4619      	mov	r1, r3
 8005c58:	4b81      	ldr	r3, [pc, #516]	; (8005e60 <stwMain+0x2b0>)
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	f107 0008 	add.w	r0, r7, #8
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	460b      	mov	r3, r1
 8005c64:	497f      	ldr	r1, [pc, #508]	; (8005e64 <stwMain+0x2b4>)
 8005c66:	f00a fd6b 	bl	8010740 <siprintf>
		lcdPutStr(380-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005c6a:	2322      	movs	r3, #34	; 0x22
 8005c6c:	b29c      	uxth	r4, r3
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fa fabc 	bl	80001f0 <strlen>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	fb14 f303 	smulbb	r3, r4, r3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 8005c86:	b298      	uxth	r0, r3
 8005c88:	4b77      	ldr	r3, [pc, #476]	; (8005e68 <stwMain+0x2b8>)
 8005c8a:	7819      	ldrb	r1, [r3, #0]
 8005c8c:	f107 0208 	add.w	r2, r7, #8
 8005c90:	4b76      	ldr	r3, [pc, #472]	; (8005e6c <stwMain+0x2bc>)
 8005c92:	f7fd f89b 	bl	8002dcc <lcdPutStr>
 8005c96:	e025      	b.n	8005ce4 <stwMain+0x134>
//	} else if(stw_val.min != 0){
	} else {
		sprintf(&tempStr2, "%02d'%02d.%02d\"", stw_val.min, stw_val.sec, stw_val.csec);
 8005c98:	4b71      	ldr	r3, [pc, #452]	; (8005e60 <stwMain+0x2b0>)
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b70      	ldr	r3, [pc, #448]	; (8005e60 <stwMain+0x2b0>)
 8005ca0:	789b      	ldrb	r3, [r3, #2]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4b6e      	ldr	r3, [pc, #440]	; (8005e60 <stwMain+0x2b0>)
 8005ca6:	78db      	ldrb	r3, [r3, #3]
 8005ca8:	f107 0008 	add.w	r0, r7, #8
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	496f      	ldr	r1, [pc, #444]	; (8005e70 <stwMain+0x2c0>)
 8005cb2:	f00a fd45 	bl	8010740 <siprintf>
		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
 8005cb6:	2322      	movs	r3, #34	; 0x22
 8005cb8:	b29c      	uxth	r4, r3
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fa96 	bl	80001f0 <strlen>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	fb14 f303 	smulbb	r3, r4, r3
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b298      	uxth	r0, r3
 8005cd6:	4b64      	ldr	r3, [pc, #400]	; (8005e68 <stwMain+0x2b8>)
 8005cd8:	7819      	ldrb	r1, [r3, #0]
 8005cda:	f107 0208 	add.w	r2, r7, #8
 8005cde:	4b63      	ldr	r3, [pc, #396]	; (8005e6c <stwMain+0x2bc>)
 8005ce0:	f7fd f874 	bl	8002dcc <lcdPutStr>
//		sprintf(&tempStr2, "%02d.%02d\"", stw_val.sec, stw_val.csec);
//		lcdPutStr(365-(*(zekton45font.font_Width)*strlen(tempStr2)), stw_time_y_pos, tempStr2, zekton45font);
//	}

	stw_counter_t lapTimeCnt;
	switch(stwSubView){
 8005ce4:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <stwMain+0x2c4>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <stwMain+0x144>
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f000 80a7 	beq.w	8005e40 <stwMain+0x290>
 8005cf2:	e117      	b.n	8005f24 <stwMain+0x374>
//		case 0:
//			sprintf(&tempStr2, "Stopwatch ready", getLapNum());
//			lcdPutStr(55, 100, tempStr2, zekton24font);
//			break;
		case 0:
			if(getLapNum()>0){
 8005cf4:	f7fe fd90 	bl	8004818 <getLapNum>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd3e      	ble.n	8005d7c <stwMain+0x1cc>
				sprintf(&tempStr2, "LAP %d", getLapNum());
 8005cfe:	f7fe fd8b 	bl	8004818 <getLapNum>
 8005d02:	4602      	mov	r2, r0
 8005d04:	f107 0308 	add.w	r3, r7, #8
 8005d08:	495b      	ldr	r1, [pc, #364]	; (8005e78 <stwMain+0x2c8>)
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f00a fd18 	bl	8010740 <siprintf>
				lcdPutStr(250, 112, tempStr2, font_12_zekton);
 8005d10:	f107 0208 	add.w	r2, r7, #8
 8005d14:	4b4f      	ldr	r3, [pc, #316]	; (8005e54 <stwMain+0x2a4>)
 8005d16:	2170      	movs	r1, #112	; 0x70
 8005d18:	20fa      	movs	r0, #250	; 0xfa
 8005d1a:	f7fd f857 	bl	8002dcc <lcdPutStr>
				counterDiff(&lapTimeCnt, stwS.cnt, &stw_splits[getLapNum()-1]);
 8005d1e:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <stwMain+0x2ac>)
 8005d20:	681c      	ldr	r4, [r3, #0]
 8005d22:	f7fe fd79 	bl	8004818 <getLapNum>
 8005d26:	4603      	mov	r3, r0
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <stwMain+0x2cc>)
 8005d2e:	441a      	add	r2, r3
 8005d30:	463b      	mov	r3, r7
 8005d32:	4621      	mov	r1, r4
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe fe5f 	bl	80049f8 <counterDiff>
				counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4850      	ldr	r0, [pc, #320]	; (8005e80 <stwMain+0x2d0>)
 8005d40:	f7fe fe92 	bl	8004a68 <counterToStopwatch>
				stwprintf(&tempStr2, &stw_lap_val);
 8005d44:	f107 0308 	add.w	r3, r7, #8
 8005d48:	494d      	ldr	r1, [pc, #308]	; (8005e80 <stwMain+0x2d0>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fee0 	bl	8004b10 <stwprintf>
				lcdPutStr(60, 100, tempStr2, zekton24font);
 8005d50:	f107 0208 	add.w	r2, r7, #8
 8005d54:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <stwMain+0x2d4>)
 8005d56:	2164      	movs	r1, #100	; 0x64
 8005d58:	203c      	movs	r0, #60	; 0x3c
 8005d5a:	f7fd f837 	bl	8002dcc <lcdPutStr>
				lcdRoundedRect2(240, 305, 110, 124, 2, LCD_RECT_PATTERN_FILL, 0, 2);
 8005d5e:	2302      	movs	r3, #2
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	2301      	movs	r3, #1
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	237c      	movs	r3, #124	; 0x7c
 8005d70:	226e      	movs	r2, #110	; 0x6e
 8005d72:	f240 1131 	movw	r1, #305	; 0x131
 8005d76:	20f0      	movs	r0, #240	; 0xf0
 8005d78:	f7fd fe19 	bl	80039ae <lcdRoundedRect2>
			}
			for(uint8_t i = 1; i<=4; i++){
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d82:	e058      	b.n	8005e36 <stwMain+0x286>
				if(getLapNum()>i){
 8005d84:	f7fe fd48 	bl	8004818 <getLapNum>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	dd4c      	ble.n	8005e2c <stwMain+0x27c>
					sprintf(&tempStr2, "LAP %d", getLapNum()-i);
 8005d92:	f7fe fd41 	bl	8004818 <getLapNum>
 8005d96:	4602      	mov	r2, r0
 8005d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d9c:	1ad2      	subs	r2, r2, r3
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	4935      	ldr	r1, [pc, #212]	; (8005e78 <stwMain+0x2c8>)
 8005da4:	4618      	mov	r0, r3
 8005da6:	f00a fccb 	bl	8010740 <siprintf>
					lcdPutStr(250, 112+i*28, tempStr2, font_12_zekton);
 8005daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dae:	461a      	mov	r2, r3
 8005db0:	00d2      	lsls	r2, r2, #3
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	3370      	adds	r3, #112	; 0x70
 8005dba:	b2d9      	uxtb	r1, r3
 8005dbc:	f107 0208 	add.w	r2, r7, #8
 8005dc0:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <stwMain+0x2a4>)
 8005dc2:	20fa      	movs	r0, #250	; 0xfa
 8005dc4:	f7fd f802 	bl	8002dcc <lcdPutStr>
					counterDiff(&lapTimeCnt, &stw_splits[getLapNum()-i], &stw_splits[getLapNum()-1-i]);
 8005dc8:	f7fe fd26 	bl	8004818 <getLapNum>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <stwMain+0x2cc>)
 8005dd8:	189c      	adds	r4, r3, r2
 8005dda:	f7fe fd1d 	bl	8004818 <getLapNum>
 8005dde:	4603      	mov	r3, r0
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <stwMain+0x2cc>)
 8005dec:	441a      	add	r2, r3
 8005dee:	463b      	mov	r3, r7
 8005df0:	4621      	mov	r1, r4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fe00 	bl	80049f8 <counterDiff>
					counterToStopwatch(&stw_lap_val, &lapTimeCnt);
 8005df8:	463b      	mov	r3, r7
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4820      	ldr	r0, [pc, #128]	; (8005e80 <stwMain+0x2d0>)
 8005dfe:	f7fe fe33 	bl	8004a68 <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	491e      	ldr	r1, [pc, #120]	; (8005e80 <stwMain+0x2d0>)
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fe81 	bl	8004b10 <stwprintf>
					lcdPutStr(60, 100+28*i, tempStr2, zekton24font);
 8005e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e12:	461a      	mov	r2, r3
 8005e14:	00d2      	lsls	r2, r2, #3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	3364      	adds	r3, #100	; 0x64
 8005e1e:	b2d9      	uxtb	r1, r3
 8005e20:	f107 0208 	add.w	r2, r7, #8
 8005e24:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <stwMain+0x2d4>)
 8005e26:	203c      	movs	r0, #60	; 0x3c
 8005e28:	f7fc ffd0 	bl	8002dcc <lcdPutStr>
			for(uint8_t i = 1; i<=4; i++){
 8005e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e30:	3301      	adds	r3, #1
 8005e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d9a2      	bls.n	8005d84 <stwMain+0x1d4>
				}
			}
			break;
 8005e3e:	e075      	b.n	8005f2c <stwMain+0x37c>
		case 1:
			// split/lap table
			for(uint8_t i = 1; i<=5; i++){
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005e46:	e068      	b.n	8005f1a <stwMain+0x36a>
 8005e48:	0801c71c 	.word	0x0801c71c
 8005e4c:	20005570 	.word	0x20005570
 8005e50:	08013cf4 	.word	0x08013cf4
 8005e54:	0801c754 	.word	0x0801c754
 8005e58:	08013d00 	.word	0x08013d00
 8005e5c:	20000088 	.word	0x20000088
 8005e60:	20005c2c 	.word	0x20005c2c
 8005e64:	08013d0c 	.word	0x08013d0c
 8005e68:	2000009a 	.word	0x2000009a
 8005e6c:	0801f044 	.word	0x0801f044
 8005e70:	08013d20 	.word	0x08013d20
 8005e74:	20005c2b 	.word	0x20005c2b
 8005e78:	08013d30 	.word	0x08013d30
 8005e7c:	20005924 	.word	0x20005924
 8005e80:	20005c30 	.word	0x20005c30
 8005e84:	0801d1dc 	.word	0x0801d1dc
				if(getLapNum()>i){
 8005e88:	f7fe fcc6 	bl	8004818 <getLapNum>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005e92:	429a      	cmp	r2, r3
 8005e94:	dd3c      	ble.n	8005f10 <stwMain+0x360>
					counterToStopwatch(&stw_lap_val, &stw_splits[getLapNum()-i]);
 8005e96:	f7fe fcbf 	bl	8004818 <getLapNum>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <stwMain+0x384>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4823      	ldr	r0, [pc, #140]	; (8005f38 <stwMain+0x388>)
 8005eac:	f7fe fddc 	bl	8004a68 <counterToStopwatch>
					stwprintf(&tempStr2, &stw_lap_val);
 8005eb0:	f107 0308 	add.w	r3, r7, #8
 8005eb4:	4920      	ldr	r1, [pc, #128]	; (8005f38 <stwMain+0x388>)
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fe2a 	bl	8004b10 <stwprintf>
					lcdPutStr(60, 100+28*(i-1), tempStr2, zekton24font);
 8005ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	00d2      	lsls	r2, r2, #3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	3348      	adds	r3, #72	; 0x48
 8005ecc:	b2d9      	uxtb	r1, r3
 8005ece:	f107 0208 	add.w	r2, r7, #8
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <stwMain+0x38c>)
 8005ed4:	203c      	movs	r0, #60	; 0x3c
 8005ed6:	f7fc ff79 	bl	8002dcc <lcdPutStr>

					sprintf(&tempStr2, "SPLIT %d", getLapNum()-i);
 8005eda:	f7fe fc9d 	bl	8004818 <getLapNum>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	f107 0308 	add.w	r3, r7, #8
 8005eea:	4915      	ldr	r1, [pc, #84]	; (8005f40 <stwMain+0x390>)
 8005eec:	4618      	mov	r0, r3
 8005eee:	f00a fc27 	bl	8010740 <siprintf>
					lcdPutStr(250, 112+(i-1)*28, tempStr2, font_12_zekton);
 8005ef2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	00d2      	lsls	r2, r2, #3
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	3354      	adds	r3, #84	; 0x54
 8005f02:	b2d9      	uxtb	r1, r3
 8005f04:	f107 0208 	add.w	r2, r7, #8
 8005f08:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <stwMain+0x394>)
 8005f0a:	20fa      	movs	r0, #250	; 0xfa
 8005f0c:	f7fc ff5e 	bl	8002dcc <lcdPutStr>
			for(uint8_t i = 1; i<=5; i++){
 8005f10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f14:	3301      	adds	r3, #1
 8005f16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005f1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d9b2      	bls.n	8005e88 <stwMain+0x2d8>

				}
			}
			break;
 8005f22:	e003      	b.n	8005f2c <stwMain+0x37c>
		default:
			stwSubView = 0;
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <stwMain+0x398>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]





}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	3734      	adds	r7, #52	; 0x34
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd90      	pop	{r4, r7, pc}
 8005f34:	20005924 	.word	0x20005924
 8005f38:	20005c30 	.word	0x20005c30
 8005f3c:	0801d1dc 	.word	0x0801d1dc
 8005f40:	08013d38 	.word	0x08013d38
 8005f44:	0801c754 	.word	0x0801c754
 8005f48:	20005c2b 	.word	0x20005c2b

08005f4c <add_counter>:
uint8_t longPressCount = 0;
uint8_t doublePressCount = 0;
uint8_t releaseCount = 0;
uint8_t holdCyclicCount = 0;

void add_counter(Button_Event event){
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
	switch (event) {
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d839      	bhi.n	8005fd0 <add_counter+0x84>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <add_counter+0x18>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f8b 	.word	0x08005f8b
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fa7 	.word	0x08005fa7
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005fc3 	.word	0x08005fc3
	        case BUTTON_EVENT_DOWN:
	        	singlePressCount++;
 8005f7c:	4b18      	ldr	r3, [pc, #96]	; (8005fe0 <add_counter+0x94>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <add_counter+0x94>)
 8005f86:	701a      	strb	r2, [r3, #0]
	            break;
 8005f88:	e023      	b.n	8005fd2 <add_counter+0x86>
	        case BUTTON_EVENT_SHORT_PRESS:
	        	shortPressCount++;
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <add_counter+0x98>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <add_counter+0x98>)
 8005f94:	701a      	strb	r2, [r3, #0]
	            break;
 8005f96:	e01c      	b.n	8005fd2 <add_counter+0x86>
	        case BUTTON_EVENT_DOUBLE_PRESS:
	        	doublePressCount++;
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <add_counter+0x9c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <add_counter+0x9c>)
 8005fa2:	701a      	strb	r2, [r3, #0]
	            break;
 8005fa4:	e015      	b.n	8005fd2 <add_counter+0x86>
	        case BUTTON_EVENT_LONG_PRESS:
	        	longPressCount++;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <add_counter+0xa0>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <add_counter+0xa0>)
 8005fb0:	701a      	strb	r2, [r3, #0]
	            break;
 8005fb2:	e00e      	b.n	8005fd2 <add_counter+0x86>
	        case BUTTON_EVENT_RELEASE:
	        	releaseCount++;
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <add_counter+0xa4>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <add_counter+0xa4>)
 8005fbe:	701a      	strb	r2, [r3, #0]
	            break;
 8005fc0:	e007      	b.n	8005fd2 <add_counter+0x86>
	        case BUTTON_EVENT_HOLD_CYCLIC:
	        	holdCyclicCount++;
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <add_counter+0xa8>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <add_counter+0xa8>)
 8005fcc:	701a      	strb	r2, [r3, #0]
	            break;
 8005fce:	e000      	b.n	8005fd2 <add_counter+0x86>
	        default:
	            break;
 8005fd0:	bf00      	nop
	    }
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20005c34 	.word	0x20005c34
 8005fe4:	20005c35 	.word	0x20005c35
 8005fe8:	20005c37 	.word	0x20005c37
 8005fec:	20005c36 	.word	0x20005c36
 8005ff0:	20005c38 	.word	0x20005c38
 8005ff4:	20005c39 	.word	0x20005c39

08005ff8 <setDefaultClbcks>:

static void setDefaultClbcks(void){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	// module callbacks
	btn_BA.onSinglePressHandler = &nextScreen;
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <setDefaultClbcks+0x34>)
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	; (8006030 <setDefaultClbcks+0x38>)
 8006000:	611a      	str	r2, [r3, #16]
	btn_BC.onSinglePressHandler = &prevScreen;
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <setDefaultClbcks+0x3c>)
 8006004:	4a0c      	ldr	r2, [pc, #48]	; (8006038 <setDefaultClbcks+0x40>)
 8006006:	611a      	str	r2, [r3, #16]

	//new button handlers
	button_set_hold_cycle_time(1, 1000);
 8006008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800600c:	2001      	movs	r0, #1
 800600e:	f7fb fddb 	bl	8001bc8 <button_set_hold_cycle_time>
	button_set_long_press_time(1, 500);
 8006012:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006016:	2001      	movs	r0, #1
 8006018:	f7fb fdbe 	bl	8001b98 <button_set_long_press_time>
	button_set_handler(1, add_counter, NULL);
 800601c:	2200      	movs	r2, #0
 800601e:	4907      	ldr	r1, [pc, #28]	; (800603c <setDefaultClbcks+0x44>)
 8006020:	2001      	movs	r0, #1
 8006022:	f7fb fde9 	bl	8001bf8 <button_set_handler>
}
 8006026:	bf00      	nop
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20002480 	.word	0x20002480
 8006030:	080027c1 	.word	0x080027c1
 8006034:	20002510 	.word	0x20002510
 8006038:	080027d1 	.word	0x080027d1
 800603c:	08005f4d 	.word	0x08005f4d

08006040 <faceSetup>:
}
static void setDateAction(void){
	guiApplyView(&dateInputModule);
}

void faceSetup(void){
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
	setDefaultClbcks();
 8006044:	f7ff ffd8 	bl	8005ff8 <setDefaultClbcks>
}
 8006048:	bf00      	nop
 800604a:	bd80      	pop	{r7, pc}

0800604c <faceMain>:


void faceMain(void){
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b0b9      	sub	sp, #228	; 0xe4
 8006050:	af00      	add	r7, sp, #0

	char tempStr2[30] = {0};
 8006052:	2300      	movs	r3, #0
 8006054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006058:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	611a      	str	r2, [r3, #16]
 8006068:	615a      	str	r2, [r3, #20]
 800606a:	831a      	strh	r2, [r3, #24]
	sprintf(&tempStr2, "short: %d, long: %d", shortPressCount, longPressCount);
 800606c:	4bad      	ldr	r3, [pc, #692]	; (8006324 <faceMain+0x2d8>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	4bad      	ldr	r3, [pc, #692]	; (8006328 <faceMain+0x2dc>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800607a:	49ac      	ldr	r1, [pc, #688]	; (800632c <faceMain+0x2e0>)
 800607c:	f00a fb60 	bl	8010740 <siprintf>
	lcdPutStr(5, 5, tempStr2, font_12_zekton);
 8006080:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8006084:	4baa      	ldr	r3, [pc, #680]	; (8006330 <faceMain+0x2e4>)
 8006086:	2105      	movs	r1, #5
 8006088:	2005      	movs	r0, #5
 800608a:	f7fc fe9f 	bl	8002dcc <lcdPutStr>
	sprintf(&tempStr2, "double: %d, release: %d", doublePressCount, releaseCount);
 800608e:	4ba9      	ldr	r3, [pc, #676]	; (8006334 <faceMain+0x2e8>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	4ba8      	ldr	r3, [pc, #672]	; (8006338 <faceMain+0x2ec>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800609c:	49a7      	ldr	r1, [pc, #668]	; (800633c <faceMain+0x2f0>)
 800609e:	f00a fb4f 	bl	8010740 <siprintf>
	lcdPutStr(5, 20, tempStr2, font_12_zekton);
 80060a2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80060a6:	4ba2      	ldr	r3, [pc, #648]	; (8006330 <faceMain+0x2e4>)
 80060a8:	2114      	movs	r1, #20
 80060aa:	2005      	movs	r0, #5
 80060ac:	f7fc fe8e 	bl	8002dcc <lcdPutStr>
	sprintf(&tempStr2, "single: %d", singlePressCount);
 80060b0:	4ba3      	ldr	r3, [pc, #652]	; (8006340 <faceMain+0x2f4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060ba:	49a2      	ldr	r1, [pc, #648]	; (8006344 <faceMain+0x2f8>)
 80060bc:	4618      	mov	r0, r3
 80060be:	f00a fb3f 	bl	8010740 <siprintf>
	lcdPutStr(5, 35, tempStr2, font_12_zekton);
 80060c2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80060c6:	4b9a      	ldr	r3, [pc, #616]	; (8006330 <faceMain+0x2e4>)
 80060c8:	2123      	movs	r1, #35	; 0x23
 80060ca:	2005      	movs	r0, #5
 80060cc:	f7fc fe7e 	bl	8002dcc <lcdPutStr>
	sprintf(&tempStr2, "total: %d, cyclic: %d", shortPressCount+longPressCount+2*doublePressCount, holdCyclicCount);
 80060d0:	4b94      	ldr	r3, [pc, #592]	; (8006324 <faceMain+0x2d8>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b94      	ldr	r3, [pc, #592]	; (8006328 <faceMain+0x2dc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	441a      	add	r2, r3
 80060dc:	4b95      	ldr	r3, [pc, #596]	; (8006334 <faceMain+0x2e8>)
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	441a      	add	r2, r3
 80060e4:	4b98      	ldr	r3, [pc, #608]	; (8006348 <faceMain+0x2fc>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80060ec:	4997      	ldr	r1, [pc, #604]	; (800634c <faceMain+0x300>)
 80060ee:	f00a fb27 	bl	8010740 <siprintf>
	lcdPutStr(5, 50, tempStr2, font_12_zekton);
 80060f2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80060f6:	4b8e      	ldr	r3, [pc, #568]	; (8006330 <faceMain+0x2e4>)
 80060f8:	2132      	movs	r1, #50	; 0x32
 80060fa:	2005      	movs	r0, #5
 80060fc:	f7fc fe66 	bl	8002dcc <lcdPutStr>

	char temperature[30] = {0};
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006106:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	609a      	str	r2, [r3, #8]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	611a      	str	r2, [r3, #16]
 8006116:	615a      	str	r2, [r3, #20]
 8006118:	831a      	strh	r2, [r3, #24]
	sprintf(&temperature, "%4.1f`C", bmpData.temperature);
 800611a:	4b8d      	ldr	r3, [pc, #564]	; (8006350 <faceMain+0x304>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fa fa22 	bl	8000568 <__aeabi_f2d>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800612c:	4989      	ldr	r1, [pc, #548]	; (8006354 <faceMain+0x308>)
 800612e:	f00a fb07 	bl	8010740 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(temperature))), 14, temperature, zekton24font);
 8006132:	2314      	movs	r3, #20
 8006134:	b29c      	uxth	r4, r3
 8006136:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800613a:	4618      	mov	r0, r3
 800613c:	f7fa f858 	bl	80001f0 <strlen>
 8006140:	4603      	mov	r3, r0
 8006142:	f1c3 030d 	rsb	r3, r3, #13
 8006146:	b29b      	uxth	r3, r3
 8006148:	fb14 f303 	smulbb	r3, r4, r3
 800614c:	b29b      	uxth	r3, r3
 800614e:	3323      	adds	r3, #35	; 0x23
 8006150:	b298      	uxth	r0, r3
 8006152:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8006156:	4b80      	ldr	r3, [pc, #512]	; (8006358 <faceMain+0x30c>)
 8006158:	210e      	movs	r1, #14
 800615a:	f7fc fe37 	bl	8002dcc <lcdPutStr>
	char baroStr[30] = {0};
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006164:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	611a      	str	r2, [r3, #16]
 8006174:	615a      	str	r2, [r3, #20]
 8006176:	831a      	strh	r2, [r3, #24]
	sprintf(&baroStr, "%4.0f hPa", ((float)bmpData.pressure/100));
 8006178:	4b75      	ldr	r3, [pc, #468]	; (8006350 <faceMain+0x304>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	ee07 3a90 	vmov	s15, r3
 8006180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006184:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800635c <faceMain+0x310>
 8006188:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800618c:	ee16 0a90 	vmov	r0, s13
 8006190:	f7fa f9ea 	bl	8000568 <__aeabi_f2d>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800619c:	4970      	ldr	r1, [pc, #448]	; (8006360 <faceMain+0x314>)
 800619e:	f00a facf 	bl	8010740 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(baroStr))), 42, baroStr, zekton24font);
 80061a2:	2314      	movs	r3, #20
 80061a4:	b29c      	uxth	r4, r3
 80061a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa f820 	bl	80001f0 <strlen>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f1c3 030d 	rsb	r3, r3, #13
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	fb14 f303 	smulbb	r3, r4, r3
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3323      	adds	r3, #35	; 0x23
 80061c0:	b298      	uxth	r0, r3
 80061c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80061c6:	4b64      	ldr	r3, [pc, #400]	; (8006358 <faceMain+0x30c>)
 80061c8:	212a      	movs	r1, #42	; 0x2a
 80061ca:	f7fc fdff 	bl	8002dcc <lcdPutStr>

	char fracStr[30] = {0};
 80061ce:	2300      	movs	r3, #0
 80061d0:	663b      	str	r3, [r7, #96]	; 0x60
 80061d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	609a      	str	r2, [r3, #8]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	611a      	str	r2, [r3, #16]
 80061e2:	615a      	str	r2, [r3, #20]
 80061e4:	831a      	strh	r2, [r3, #24]
	char timeStr[30] = {0};
 80061e6:	2300      	movs	r3, #0
 80061e8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	615a      	str	r2, [r3, #20]
 80061fc:	831a      	strh	r2, [r3, #24]
	char timeStr2[30] = {0};
 80061fe:	2300      	movs	r3, #0
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	605a      	str	r2, [r3, #4]
 800620c:	609a      	str	r2, [r3, #8]
 800620e:	60da      	str	r2, [r3, #12]
 8006210:	611a      	str	r2, [r3, #16]
 8006212:	615a      	str	r2, [r3, #20]
 8006214:	831a      	strh	r2, [r3, #24]
	sprintf(&timeStr, "%02d", RtcTime.Hours);
 8006216:	4b53      	ldr	r3, [pc, #332]	; (8006364 <faceMain+0x318>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006220:	4951      	ldr	r1, [pc, #324]	; (8006368 <faceMain+0x31c>)
 8006222:	4618      	mov	r0, r3
 8006224:	f00a fa8c 	bl	8010740 <siprintf>
	sprintf(&timeStr2, "%02d", RtcTime.Minutes);
 8006228:	4b4e      	ldr	r3, [pc, #312]	; (8006364 <faceMain+0x318>)
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	461a      	mov	r2, r3
 800622e:	f107 0320 	add.w	r3, r7, #32
 8006232:	494d      	ldr	r1, [pc, #308]	; (8006368 <faceMain+0x31c>)
 8006234:	4618      	mov	r0, r3
 8006236:	f00a fa83 	bl	8010740 <siprintf>
	sprintf(&fracStr, "%02d", RtcTime.Seconds);
 800623a:	4b4a      	ldr	r3, [pc, #296]	; (8006364 <faceMain+0x318>)
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	461a      	mov	r2, r3
 8006240:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006244:	4948      	ldr	r1, [pc, #288]	; (8006368 <faceMain+0x31c>)
 8006246:	4618      	mov	r0, r3
 8006248:	f00a fa7a 	bl	8010740 <siprintf>
	lcdPutStr(20, 76, timeStr, zekton84font);
 800624c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006250:	4b46      	ldr	r3, [pc, #280]	; (800636c <faceMain+0x320>)
 8006252:	214c      	movs	r1, #76	; 0x4c
 8006254:	2014      	movs	r0, #20
 8006256:	f7fc fdb9 	bl	8002dcc <lcdPutStr>
	lcdPutStr(170, 76, timeStr2, zekton84font);
 800625a:	f107 0220 	add.w	r2, r7, #32
 800625e:	4b43      	ldr	r3, [pc, #268]	; (800636c <faceMain+0x320>)
 8006260:	214c      	movs	r1, #76	; 0x4c
 8006262:	20aa      	movs	r0, #170	; 0xaa
 8006264:	f7fc fdb2 	bl	8002dcc <lcdPutStr>
	lcdPutStr(315, 76, fracStr, zekton45font);
 8006268:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <faceMain+0x324>)
 800626e:	214c      	movs	r1, #76	; 0x4c
 8006270:	f240 103b 	movw	r0, #315	; 0x13b
 8006274:	f7fc fdaa 	bl	8002dcc <lcdPutStr>

	char buffString[30] = {0};
 8006278:	2300      	movs	r3, #0
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	609a      	str	r2, [r3, #8]
 8006286:	60da      	str	r2, [r3, #12]
 8006288:	611a      	str	r2, [r3, #16]
 800628a:	615a      	str	r2, [r3, #20]
 800628c:	831a      	strh	r2, [r3, #24]
	sprintf(&buffString, "September 2022");
 800628e:	463b      	mov	r3, r7
 8006290:	4938      	ldr	r1, [pc, #224]	; (8006374 <faceMain+0x328>)
 8006292:	4618      	mov	r0, r3
 8006294:	f00a fa54 	bl	8010740 <siprintf>
	sprintf(&buffString, "%s %d", months[RtcDate.Month], 2000+RtcDate.Year);
 8006298:	4b37      	ldr	r3, [pc, #220]	; (8006378 <faceMain+0x32c>)
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	461a      	mov	r2, r3
 800629e:	4b37      	ldr	r3, [pc, #220]	; (800637c <faceMain+0x330>)
 80062a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062a4:	4b34      	ldr	r3, [pc, #208]	; (8006378 <faceMain+0x32c>)
 80062a6:	78db      	ldrb	r3, [r3, #3]
 80062a8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80062ac:	4638      	mov	r0, r7
 80062ae:	4934      	ldr	r1, [pc, #208]	; (8006380 <faceMain+0x334>)
 80062b0:	f00a fa46 	bl	8010740 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 174, buffString, zekton24font);
 80062b4:	2314      	movs	r3, #20
 80062b6:	b29c      	uxth	r4, r3
 80062b8:	463b      	mov	r3, r7
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7f9 ff98 	bl	80001f0 <strlen>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f1c3 030d 	rsb	r3, r3, #13
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	fb14 f303 	smulbb	r3, r4, r3
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3323      	adds	r3, #35	; 0x23
 80062d0:	b298      	uxth	r0, r3
 80062d2:	463a      	mov	r2, r7
 80062d4:	4b20      	ldr	r3, [pc, #128]	; (8006358 <faceMain+0x30c>)
 80062d6:	21ae      	movs	r1, #174	; 0xae
 80062d8:	f7fc fd78 	bl	8002dcc <lcdPutStr>
	sprintf(&buffString, "%s %d", weekDays[RtcDate.WeekDay], RtcDate.Date);
 80062dc:	4b26      	ldr	r3, [pc, #152]	; (8006378 <faceMain+0x32c>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b28      	ldr	r3, [pc, #160]	; (8006384 <faceMain+0x338>)
 80062e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062e8:	4b23      	ldr	r3, [pc, #140]	; (8006378 <faceMain+0x32c>)
 80062ea:	789b      	ldrb	r3, [r3, #2]
 80062ec:	4638      	mov	r0, r7
 80062ee:	4924      	ldr	r1, [pc, #144]	; (8006380 <faceMain+0x334>)
 80062f0:	f00a fa26 	bl	8010740 <siprintf>
	lcdPutStr(35+(*(zekton24font.font_Width)*(13-strlen(buffString))), 202, buffString, zekton24font);
 80062f4:	2314      	movs	r3, #20
 80062f6:	b29c      	uxth	r4, r3
 80062f8:	463b      	mov	r3, r7
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7f9 ff78 	bl	80001f0 <strlen>
 8006300:	4603      	mov	r3, r0
 8006302:	f1c3 030d 	rsb	r3, r3, #13
 8006306:	b29b      	uxth	r3, r3
 8006308:	fb14 f303 	smulbb	r3, r4, r3
 800630c:	b29b      	uxth	r3, r3
 800630e:	3323      	adds	r3, #35	; 0x23
 8006310:	b298      	uxth	r0, r3
 8006312:	463a      	mov	r2, r7
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <faceMain+0x30c>)
 8006316:	21ca      	movs	r1, #202	; 0xca
 8006318:	f7fc fd58 	bl	8002dcc <lcdPutStr>
}
 800631c:	bf00      	nop
 800631e:	37e4      	adds	r7, #228	; 0xe4
 8006320:	46bd      	mov	sp, r7
 8006322:	bd90      	pop	{r4, r7, pc}
 8006324:	20005c35 	.word	0x20005c35
 8006328:	20005c36 	.word	0x20005c36
 800632c:	08013dfc 	.word	0x08013dfc
 8006330:	0802468c 	.word	0x0802468c
 8006334:	20005c37 	.word	0x20005c37
 8006338:	20005c38 	.word	0x20005c38
 800633c:	08013e10 	.word	0x08013e10
 8006340:	20005c34 	.word	0x20005c34
 8006344:	08013e28 	.word	0x08013e28
 8006348:	20005c39 	.word	0x20005c39
 800634c:	08013e34 	.word	0x08013e34
 8006350:	200023b0 	.word	0x200023b0
 8006354:	08013e4c 	.word	0x08013e4c
 8006358:	08025114 	.word	0x08025114
 800635c:	42c80000 	.word	0x42c80000
 8006360:	08013e54 	.word	0x08013e54
 8006364:	20005570 	.word	0x20005570
 8006368:	08013e60 	.word	0x08013e60
 800636c:	0802c5c4 	.word	0x0802c5c4
 8006370:	08026f7c 	.word	0x08026f7c
 8006374:	08013e68 	.word	0x08013e68
 8006378:	20005584 	.word	0x20005584
 800637c:	200000bc 	.word	0x200000bc
 8006380:	08013e78 	.word	0x08013e78
 8006384:	2000009c 	.word	0x2000009c

08006388 <cbuf_init>:
//	uint16_t head, tail, elemNum, maxSize;
//	size_t elemSize;
//} cbuf_t;

// initialize buffer, element size, element num
void cbuf_init(cbuf_t* b, size_t elemSize, uint16_t maxSize){
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
	b->elemSize = elemSize;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	60da      	str	r2, [r3, #12]
	b->maxSize = maxSize;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	815a      	strh	r2, [r3, #10]
	b->elements = malloc(elemSize*b->maxSize);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	895b      	ldrh	r3, [r3, #10]
 80063a6:	461a      	mov	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4618      	mov	r0, r3
 80063b0:	f009 faec 	bl	800f98c <malloc>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]
	b->elemNum = 0;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	741a      	strb	r2, [r3, #16]
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <cbuf_isFull>:
// isEmpty
uint8_t cbuf_isEmpty(cbuf_t* b){
	return(b->elemNum==0);
}
// isFull
uint8_t cbuf_isFull(cbuf_t* b){
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	return(b->elemNum==b->maxSize);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	891a      	ldrh	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	895b      	ldrh	r3, [r3, #10]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <cbuf_ovw>:
	return 1;
}
// remove element
void* cbuf_pop(cbuf_t* b);
// overwrite element
uint8_t cbuf_ovw(cbuf_t* b, void* element){
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
	if(cbuf_isFull(b)){
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ffe5 	bl	80063dc <cbuf_isFull>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d02b      	beq.n	8006470 <cbuf_ovw+0x6e>
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	88db      	ldrh	r3, [r3, #6]
 8006420:	4619      	mov	r1, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	18d0      	adds	r0, r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	461a      	mov	r2, r3
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	f009 faba 	bl	800f9ac <memcpy>
		b->tail = (b->tail + 1) % b->maxSize;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	3301      	adds	r3, #1
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	8952      	ldrh	r2, [r2, #10]
 8006442:	fb93 f1f2 	sdiv	r1, r3, r2
 8006446:	fb01 f202 	mul.w	r2, r1, r2
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	b29a      	uxth	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->maxSize;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	889b      	ldrh	r3, [r3, #4]
 8006456:	3301      	adds	r3, #1
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	8952      	ldrh	r2, [r2, #10]
 800645c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006460:	fb01 f202 	mul.w	r2, r1, r2
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	809a      	strh	r2, [r3, #4]
		return 0;
 800646c:	2300      	movs	r3, #0
 800646e:	e023      	b.n	80064b8 <cbuf_ovw+0xb6>
	} else{
		memcpy(b->elements+b->tail*b->elemSize, element, b->elemSize);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	88db      	ldrh	r3, [r3, #6]
 8006478:	4619      	mov	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	18d0      	adds	r0, r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	461a      	mov	r2, r3
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	f009 fa8e 	bl	800f9ac <memcpy>
		b->elemNum++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	891b      	ldrh	r3, [r3, #8]
 8006494:	3301      	adds	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->maxSize;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	3301      	adds	r3, #1
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	8952      	ldrh	r2, [r2, #10]
 80064a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80064aa:	fb01 f202 	mul.w	r2, r1, r2
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	80da      	strh	r2, [r3, #6]
		return 1;
 80064b6:	2301      	movs	r3, #1
	}
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <init_ring_buffer>:

#include "ringBuffer.h"



void init_ring_buffer(RingBuffer_t* b, uint16_t maxSize){
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	807b      	strh	r3, [r7, #2]
	b->size = maxSize;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	815a      	strh	r2, [r3, #10]
	b->values = malloc(sizeof(int)*b->size);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	895b      	ldrh	r3, [r3, #10]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4618      	mov	r0, r3
 80064da:	f009 fa57 	bl	800f98c <malloc>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
	b->num_entries = 0;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	811a      	strh	r2, [r3, #8]
	b->head = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	809a      	strh	r2, [r3, #4]
	b->tail = 0;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	80da      	strh	r2, [r3, #6]
	b->isReady = 1;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	731a      	strb	r2, [r3, #12]
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <ring_buffer_full>:

uint8_t ring_buffer_empty(RingBuffer_t* b){
	return(b->num_entries==0);
}
uint8_t ring_buffer_full(RingBuffer_t* b){
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
	return(b->num_entries==b->size);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	891a      	ldrh	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	895b      	ldrh	r3, [r3, #10]
 8006516:	429a      	cmp	r2, r3
 8006518:	bf0c      	ite	eq
 800651a:	2301      	moveq	r3, #1
 800651c:	2300      	movne	r3, #0
 800651e:	b2db      	uxtb	r3, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <add_ovw_ring_buffer>:
	b->head = (b->head + 1) % b->size;
	b->num_entries--;
	return result;
}

uint8_t add_ovw_ring_buffer(RingBuffer_t* b, int value){
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
	if(ring_buffer_full(b)){
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ffe5 	bl	8006506 <ring_buffer_full>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d023      	beq.n	800658a <add_ovw_ring_buffer+0x5e>
		b->values[b->tail] = value;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	88db      	ldrh	r3, [r3, #6]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	601a      	str	r2, [r3, #0]
		b->tail = (b->tail + 1) % b->size;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	88db      	ldrh	r3, [r3, #6]
 8006556:	3301      	adds	r3, #1
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	8952      	ldrh	r2, [r2, #10]
 800655c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006560:	fb01 f202 	mul.w	r2, r1, r2
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	80da      	strh	r2, [r3, #6]
		b->head = (b->head + 1) % b->size;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	889b      	ldrh	r3, [r3, #4]
 8006570:	3301      	adds	r3, #1
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	8952      	ldrh	r2, [r2, #10]
 8006576:	fb93 f1f2 	sdiv	r1, r3, r2
 800657a:	fb01 f202 	mul.w	r2, r1, r2
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	809a      	strh	r2, [r3, #4]
		return 0;
 8006586:	2300      	movs	r3, #0
 8006588:	e01b      	b.n	80065c2 <add_ovw_ring_buffer+0x96>
	} else{
		b->values[b->tail] = value;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	601a      	str	r2, [r3, #0]
		b->num_entries++;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	891b      	ldrh	r3, [r3, #8]
 800659e:	3301      	adds	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	811a      	strh	r2, [r3, #8]
		b->tail = (b->tail + 1) % b->size;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	88db      	ldrh	r3, [r3, #6]
 80065aa:	3301      	adds	r3, #1
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	8952      	ldrh	r2, [r2, #10]
 80065b0:	fb93 f1f2 	sdiv	r1, r3, r2
 80065b4:	fb01 f202 	mul.w	r2, r1, r2
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	80da      	strh	r2, [r3, #6]
		return 1;
 80065c0:	2301      	movs	r3, #1
	}
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <createTimer>:
 *      Author: wojch
 */

#include "timerUtils.h"

timer_T* createTimer(void){
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
	timer_T* timerPtr = malloc(sizeof(timer_T));
 80065d0:	200c      	movs	r0, #12
 80065d2:	f009 f9db 	bl	800f98c <malloc>
 80065d6:	4603      	mov	r3, r0
 80065d8:	607b      	str	r3, [r7, #4]
	timerPtr->timerStatus = TIMER_STATUS_UNSET;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	721a      	strb	r2, [r3, #8]
	return timerPtr;
 80065e0:	687b      	ldr	r3, [r7, #4]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <setTimerAAA>:
void deleteTimer(timer_T* timer){
	free(timer);
}
uint8_t setTimerAAA(timer_T* timer, uint16_t targetTime, void* callback){
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	460b      	mov	r3, r1
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	817b      	strh	r3, [r7, #10]
	timer->currentValue = 0;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	801a      	strh	r2, [r3, #0]
	timer->targetValue = targetTime;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	897a      	ldrh	r2, [r7, #10]
 8006602:	805a      	strh	r2, [r3, #2]
	timer->callback = callback;
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	605a      	str	r2, [r3, #4]
	timer->timerStatus = TIMER_STATUS_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	721a      	strb	r2, [r3, #8]
}
 8006610:	bf00      	nop
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <runTimerAAA>:

uint8_t runTimerAAA(timer_T* timer){
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	if((timer->timerStatus == TIMER_STATUS_READY) || (timer->timerStatus == TIMER_STATUS_PAUSED)){
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	7a1b      	ldrb	r3, [r3, #8]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d003      	beq.n	8006636 <runTimerAAA+0x18>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	7a1b      	ldrb	r3, [r3, #8]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d102      	bne.n	800663c <runTimerAAA+0x1e>
		timer->timerStatus = TIMER_STATUS_RUNNING;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	721a      	strb	r2, [r3, #8]
	}
}
 800663c:	bf00      	nop
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <tickTimer>:
uint8_t resetTimerAAA(timer_T* timer){
	timer->currentValue = 0;
	timer->timerStatus = TIMER_STATUS_READY;
}

void tickTimer(timer_T* timer){
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
	if(timer->timerStatus == TIMER_STATUS_RUNNING) timer->currentValue++;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7a1b      	ldrb	r3, [r3, #8]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d105      	bne.n	8006666 <tickTimer+0x1c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	801a      	strh	r2, [r3, #0]
	if(timer->currentValue == timer->targetValue){
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	885b      	ldrh	r3, [r3, #2]
 800666e:	429a      	cmp	r2, r3
 8006670:	d106      	bne.n	8006680 <tickTimer+0x36>
		timer->timerStatus = TIMER_STATUS_ELAPSED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2204      	movs	r2, #4
 8006676:	721a      	strb	r2, [r3, #8]
		// callback will be executed in the TMR interrupt!
		timer->callback(NULL);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2000      	movs	r0, #0
 800667e:	4798      	blx	r3
	}
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800668c:	480d      	ldr	r0, [pc, #52]	; (80066c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800668e:	490e      	ldr	r1, [pc, #56]	; (80066c8 <LoopFillZerobss+0x1a>)
                                         ldr r2, =_sidata
 8006690:	4a0e      	ldr	r2, [pc, #56]	; (80066cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006694:	e002      	b.n	800669c <LoopCopyDataInit>

08006696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800669a:	3304      	adds	r3, #4

0800669c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800669c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800669e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066a0:	d3f9      	bcc.n	8006696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066a2:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066a4:	4c0b      	ldr	r4, [pc, #44]	; (80066d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066a8:	e001      	b.n	80066ae <LoopFillZerobss>

080066aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066ac:	3204      	adds	r2, #4

080066ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066b0:	d3fb      	bcc.n	80066aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80066b2:	f7fe fb17 	bl	8004ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066b6:	f009 f945 	bl	800f944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ba:	f7fd fc55 	bl	8003f68 <main>
  bx  lr    
 80066be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80066c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80066c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066c8:	200002c8 	.word	0x200002c8
                                         ldr r2, =_sidata
 80066cc:	0802e970 	.word	0x0802e970
  ldr r2, =_sbss
 80066d0:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 80066d4:	20005c8c 	.word	0x20005c8c

080066d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066d8:	e7fe      	b.n	80066d8 <ADC_IRQHandler>
	...

080066dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <HAL_Init+0x40>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <HAL_Init+0x40>)
 80066e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_Init+0x40>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_Init+0x40>)
 80066f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066f8:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_Init+0x40>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a07      	ldr	r2, [pc, #28]	; (800671c <HAL_Init+0x40>)
 80066fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006704:	2003      	movs	r0, #3
 8006706:	f000 f94f 	bl	80069a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800670a:	2000      	movs	r0, #0
 800670c:	f000 f808 	bl	8006720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006710:	f7fd ffec 	bl	80046ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40023c00 	.word	0x40023c00

08006720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_InitTick+0x54>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_InitTick+0x58>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006736:	fbb3 f3f1 	udiv	r3, r3, r1
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f967 	bl	8006a12 <HAL_SYSTICK_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e00e      	b.n	800676c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b0f      	cmp	r3, #15
 8006752:	d80a      	bhi.n	800676a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006754:	2200      	movs	r2, #0
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	f04f 30ff 	mov.w	r0, #4294967295
 800675c:	f000 f92f 	bl	80069be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006760:	4a06      	ldr	r2, [pc, #24]	; (800677c <HAL_InitTick+0x5c>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000094 	.word	0x20000094
 8006778:	200000f4 	.word	0x200000f4
 800677c:	200000f0 	.word	0x200000f0

08006780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_IncTick+0x20>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <HAL_IncTick+0x24>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4413      	add	r3, r2
 8006790:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <HAL_IncTick+0x24>)
 8006792:	6013      	str	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	200000f4 	.word	0x200000f4
 80067a4:	20005c3c 	.word	0x20005c3c

080067a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return uwTick;
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_GetTick+0x14>)
 80067ae:	681b      	ldr	r3, [r3, #0]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20005c3c 	.word	0x20005c3c

080067c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067c8:	f7ff ffee 	bl	80067a8 <HAL_GetTick>
 80067cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d005      	beq.n	80067e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <HAL_Delay+0x44>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067e6:	bf00      	nop
 80067e8:	f7ff ffde 	bl	80067a8 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d8f7      	bhi.n	80067e8 <HAL_Delay+0x28>
  {
  }
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200000f4 	.word	0x200000f4

08006808 <__NVIC_SetPriorityGrouping>:
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <__NVIC_SetPriorityGrouping+0x44>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006824:	4013      	ands	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800683a:	4a04      	ldr	r2, [pc, #16]	; (800684c <__NVIC_SetPriorityGrouping+0x44>)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	60d3      	str	r3, [r2, #12]
}
 8006840:	bf00      	nop
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <__NVIC_GetPriorityGrouping>:
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <__NVIC_GetPriorityGrouping+0x18>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	0a1b      	lsrs	r3, r3, #8
 800685a:	f003 0307 	and.w	r3, r3, #7
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	e000ed00 	.word	0xe000ed00

0800686c <__NVIC_EnableIRQ>:
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800687a:	2b00      	cmp	r3, #0
 800687c:	db0b      	blt.n	8006896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	f003 021f 	and.w	r2, r3, #31
 8006884:	4907      	ldr	r1, [pc, #28]	; (80068a4 <__NVIC_EnableIRQ+0x38>)
 8006886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	2001      	movs	r0, #1
 800688e:	fa00 f202 	lsl.w	r2, r0, r2
 8006892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	e000e100 	.word	0xe000e100

080068a8 <__NVIC_SetPriority>:
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	db0a      	blt.n	80068d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	490c      	ldr	r1, [pc, #48]	; (80068f4 <__NVIC_SetPriority+0x4c>)
 80068c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c6:	0112      	lsls	r2, r2, #4
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	440b      	add	r3, r1
 80068cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068d0:	e00a      	b.n	80068e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4908      	ldr	r1, [pc, #32]	; (80068f8 <__NVIC_SetPriority+0x50>)
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	3b04      	subs	r3, #4
 80068e0:	0112      	lsls	r2, r2, #4
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	440b      	add	r3, r1
 80068e6:	761a      	strb	r2, [r3, #24]
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	e000e100 	.word	0xe000e100
 80068f8:	e000ed00 	.word	0xe000ed00

080068fc <NVIC_EncodePriority>:
{
 80068fc:	b480      	push	{r7}
 80068fe:	b089      	sub	sp, #36	; 0x24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f1c3 0307 	rsb	r3, r3, #7
 8006916:	2b04      	cmp	r3, #4
 8006918:	bf28      	it	cs
 800691a:	2304      	movcs	r3, #4
 800691c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	3304      	adds	r3, #4
 8006922:	2b06      	cmp	r3, #6
 8006924:	d902      	bls.n	800692c <NVIC_EncodePriority+0x30>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3b03      	subs	r3, #3
 800692a:	e000      	b.n	800692e <NVIC_EncodePriority+0x32>
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43da      	mvns	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	401a      	ands	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006944:	f04f 31ff 	mov.w	r1, #4294967295
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	43d9      	mvns	r1, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006954:	4313      	orrs	r3, r2
}
 8006956:	4618      	mov	r0, r3
 8006958:	3724      	adds	r7, #36	; 0x24
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <SysTick_Config>:
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006974:	d301      	bcc.n	800697a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006976:	2301      	movs	r3, #1
 8006978:	e00f      	b.n	800699a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800697a:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <SysTick_Config+0x40>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3b01      	subs	r3, #1
 8006980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006982:	210f      	movs	r1, #15
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	f7ff ff8e 	bl	80068a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <SysTick_Config+0x40>)
 800698e:	2200      	movs	r2, #0
 8006990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <SysTick_Config+0x40>)
 8006994:	2207      	movs	r2, #7
 8006996:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	e000e010 	.word	0xe000e010

080069a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff29 	bl	8006808 <__NVIC_SetPriorityGrouping>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	4603      	mov	r3, r0
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069d0:	f7ff ff3e 	bl	8006850 <__NVIC_GetPriorityGrouping>
 80069d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	68b9      	ldr	r1, [r7, #8]
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	f7ff ff8e 	bl	80068fc <NVIC_EncodePriority>
 80069e0:	4602      	mov	r2, r0
 80069e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e6:	4611      	mov	r1, r2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff ff5d 	bl	80068a8 <__NVIC_SetPriority>
}
 80069ee:	bf00      	nop
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	4603      	mov	r3, r0
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ff31 	bl	800686c <__NVIC_EnableIRQ>
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ffa2 	bl	8006964 <SysTick_Config>
 8006a20:	4603      	mov	r3, r0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_DMA_Start_IT+0x26>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e040      	b.n	8006ad2 <HAL_DMA_Start_IT+0xa8>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d12f      	bne.n	8006ac4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f82e 	bl	8006ada <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a82:	223f      	movs	r2, #63	; 0x3f
 8006a84:	409a      	lsls	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0216 	orr.w	r2, r2, #22
 8006a98:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0208 	orr.w	r2, r2, #8
 8006ab0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0201 	orr.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e005      	b.n	8006ad0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006af6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d108      	bne.n	8006b1a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b18:	e007      	b.n	8006b2a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	60da      	str	r2, [r3, #12]
}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b089      	sub	sp, #36	; 0x24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	e177      	b.n	8006e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b54:	2201      	movs	r2, #1
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4013      	ands	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	f040 8166 	bne.w	8006e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d005      	beq.n	8006b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d130      	bne.n	8006bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	2203      	movs	r2, #3
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	091b      	lsrs	r3, r3, #4
 8006bd6:	f003 0201 	and.w	r2, r3, #1
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d017      	beq.n	8006c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	2203      	movs	r2, #3
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d123      	bne.n	8006c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	08da      	lsrs	r2, r3, #3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3208      	adds	r2, #8
 8006c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	220f      	movs	r2, #15
 8006c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c50:	43db      	mvns	r3, r3
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	4013      	ands	r3, r2
 8006c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0307 	and.w	r3, r3, #7
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	08da      	lsrs	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3208      	adds	r2, #8
 8006c76:	69b9      	ldr	r1, [r7, #24]
 8006c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	2203      	movs	r2, #3
 8006c88:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4013      	ands	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 0203 	and.w	r2, r3, #3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80c0 	beq.w	8006e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	4b66      	ldr	r3, [pc, #408]	; (8006e5c <HAL_GPIO_Init+0x324>)
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <HAL_GPIO_Init+0x324>)
 8006cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8006cce:	4b63      	ldr	r3, [pc, #396]	; (8006e5c <HAL_GPIO_Init+0x324>)
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cda:	4a61      	ldr	r2, [pc, #388]	; (8006e60 <HAL_GPIO_Init+0x328>)
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	220f      	movs	r2, #15
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a58      	ldr	r2, [pc, #352]	; (8006e64 <HAL_GPIO_Init+0x32c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d037      	beq.n	8006d76 <HAL_GPIO_Init+0x23e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a57      	ldr	r2, [pc, #348]	; (8006e68 <HAL_GPIO_Init+0x330>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d031      	beq.n	8006d72 <HAL_GPIO_Init+0x23a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a56      	ldr	r2, [pc, #344]	; (8006e6c <HAL_GPIO_Init+0x334>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02b      	beq.n	8006d6e <HAL_GPIO_Init+0x236>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a55      	ldr	r2, [pc, #340]	; (8006e70 <HAL_GPIO_Init+0x338>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d025      	beq.n	8006d6a <HAL_GPIO_Init+0x232>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a54      	ldr	r2, [pc, #336]	; (8006e74 <HAL_GPIO_Init+0x33c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01f      	beq.n	8006d66 <HAL_GPIO_Init+0x22e>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a53      	ldr	r2, [pc, #332]	; (8006e78 <HAL_GPIO_Init+0x340>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d019      	beq.n	8006d62 <HAL_GPIO_Init+0x22a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a52      	ldr	r2, [pc, #328]	; (8006e7c <HAL_GPIO_Init+0x344>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_GPIO_Init+0x226>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a51      	ldr	r2, [pc, #324]	; (8006e80 <HAL_GPIO_Init+0x348>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00d      	beq.n	8006d5a <HAL_GPIO_Init+0x222>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a50      	ldr	r2, [pc, #320]	; (8006e84 <HAL_GPIO_Init+0x34c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <HAL_GPIO_Init+0x21e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_GPIO_Init+0x350>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <HAL_GPIO_Init+0x21a>
 8006d4e:	2309      	movs	r3, #9
 8006d50:	e012      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d52:	230a      	movs	r3, #10
 8006d54:	e010      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d56:	2308      	movs	r3, #8
 8006d58:	e00e      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d5a:	2307      	movs	r3, #7
 8006d5c:	e00c      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d5e:	2306      	movs	r3, #6
 8006d60:	e00a      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d62:	2305      	movs	r3, #5
 8006d64:	e008      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d66:	2304      	movs	r3, #4
 8006d68:	e006      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e004      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e002      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <HAL_GPIO_Init+0x240>
 8006d76:	2300      	movs	r3, #0
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	f002 0203 	and.w	r2, r2, #3
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	4093      	lsls	r3, r2
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d88:	4935      	ldr	r1, [pc, #212]	; (8006e60 <HAL_GPIO_Init+0x328>)
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	3302      	adds	r3, #2
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d96:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4013      	ands	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dba:	4a34      	ldr	r2, [pc, #208]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dc0:	4b32      	ldr	r3, [pc, #200]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006de4:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006dea:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	4013      	ands	r3, r2
 8006df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e0e:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	4013      	ands	r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e38:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <HAL_GPIO_Init+0x354>)
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	3301      	adds	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b0f      	cmp	r3, #15
 8006e48:	f67f ae84 	bls.w	8006b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	3724      	adds	r7, #36	; 0x24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40013800 	.word	0x40013800
 8006e64:	40020000 	.word	0x40020000
 8006e68:	40020400 	.word	0x40020400
 8006e6c:	40020800 	.word	0x40020800
 8006e70:	40020c00 	.word	0x40020c00
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40021400 	.word	0x40021400
 8006e7c:	40021800 	.word	0x40021800
 8006e80:	40021c00 	.word	0x40021c00
 8006e84:	40022000 	.word	0x40022000
 8006e88:	40022400 	.word	0x40022400
 8006e8c:	40013c00 	.word	0x40013c00

08006e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e001      	b.n	8006eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	807b      	strh	r3, [r7, #2]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ed0:	787b      	ldrb	r3, [r7, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006edc:	e003      	b.n	8006ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ede:	887b      	ldrh	r3, [r7, #2]
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	619a      	str	r2, [r3, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f04:	887a      	ldrh	r2, [r7, #2]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	041a      	lsls	r2, r3, #16
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	43d9      	mvns	r1, r3
 8006f10:	887b      	ldrh	r3, [r7, #2]
 8006f12:	400b      	ands	r3, r1
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	619a      	str	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f32:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f34:	695a      	ldr	r2, [r3, #20]
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d006      	beq.n	8006f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f3e:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f806 	bl	8006f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40013c00 	.word	0x40013c00

08006f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e12b      	b.n	80071da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fb fcce 	bl	8002938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2224      	movs	r2, #36	; 0x24
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f001 fc76 	bl	80088c4 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4a81      	ldr	r2, [pc, #516]	; (80071e4 <HAL_I2C_Init+0x274>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d807      	bhi.n	8006ff4 <HAL_I2C_Init+0x84>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a80      	ldr	r2, [pc, #512]	; (80071e8 <HAL_I2C_Init+0x278>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	bf94      	ite	ls
 8006fec:	2301      	movls	r3, #1
 8006fee:	2300      	movhi	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e006      	b.n	8007002 <HAL_I2C_Init+0x92>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4a7d      	ldr	r2, [pc, #500]	; (80071ec <HAL_I2C_Init+0x27c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	bf94      	ite	ls
 8006ffc:	2301      	movls	r3, #1
 8006ffe:	2300      	movhi	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e0e7      	b.n	80071da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4a78      	ldr	r2, [pc, #480]	; (80071f0 <HAL_I2C_Init+0x280>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	0c9b      	lsrs	r3, r3, #18
 8007014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <HAL_I2C_Init+0x274>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d802      	bhi.n	8007044 <HAL_I2C_Init+0xd4>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	3301      	adds	r3, #1
 8007042:	e009      	b.n	8007058 <HAL_I2C_Init+0xe8>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	4a69      	ldr	r2, [pc, #420]	; (80071f4 <HAL_I2C_Init+0x284>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	3301      	adds	r3, #1
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	430b      	orrs	r3, r1
 800705e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800706a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	495c      	ldr	r1, [pc, #368]	; (80071e4 <HAL_I2C_Init+0x274>)
 8007074:	428b      	cmp	r3, r1
 8007076:	d819      	bhi.n	80070ac <HAL_I2C_Init+0x13c>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1e59      	subs	r1, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	fbb1 f3f3 	udiv	r3, r1, r3
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	f640 73fc 	movw	r3, #4092	; 0xffc
 800708c:	400b      	ands	r3, r1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <HAL_I2C_Init+0x138>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1e59      	subs	r1, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a0:	3301      	adds	r3, #1
 80070a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a6:	e051      	b.n	800714c <HAL_I2C_Init+0x1dc>
 80070a8:	2304      	movs	r3, #4
 80070aa:	e04f      	b.n	800714c <HAL_I2C_Init+0x1dc>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d111      	bne.n	80070d8 <HAL_I2C_Init+0x168>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	1e58      	subs	r0, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	440b      	add	r3, r1
 80070c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070c6:	3301      	adds	r3, #1
 80070c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e012      	b.n	80070fe <HAL_I2C_Init+0x18e>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1e58      	subs	r0, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6859      	ldr	r1, [r3, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	0099      	lsls	r1, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ee:	3301      	adds	r3, #1
 80070f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <HAL_I2C_Init+0x196>
 8007102:	2301      	movs	r3, #1
 8007104:	e022      	b.n	800714c <HAL_I2C_Init+0x1dc>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10e      	bne.n	800712c <HAL_I2C_Init+0x1bc>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1e58      	subs	r0, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	440b      	add	r3, r1
 800711c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007120:	3301      	adds	r3, #1
 8007122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712a:	e00f      	b.n	800714c <HAL_I2C_Init+0x1dc>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	1e58      	subs	r0, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6859      	ldr	r1, [r3, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	0099      	lsls	r1, r3, #2
 800713c:	440b      	add	r3, r1
 800713e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007142:	3301      	adds	r3, #1
 8007144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	6809      	ldr	r1, [r1, #0]
 8007150:	4313      	orrs	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69da      	ldr	r2, [r3, #28]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800717a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6911      	ldr	r1, [r2, #16]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	68d2      	ldr	r2, [r2, #12]
 8007186:	4311      	orrs	r1, r2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	430b      	orrs	r3, r1
 800718e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	000186a0 	.word	0x000186a0
 80071e8:	001e847f 	.word	0x001e847f
 80071ec:	003d08ff 	.word	0x003d08ff
 80071f0:	431bde83 	.word	0x431bde83
 80071f4:	10624dd3 	.word	0x10624dd3

080071f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007212:	f7ff fac9 	bl	80067a8 <HAL_GetTick>
 8007216:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b20      	cmp	r3, #32
 8007222:	f040 80d9 	bne.w	80073d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2319      	movs	r3, #25
 800722c:	2201      	movs	r2, #1
 800722e:	496d      	ldr	r1, [pc, #436]	; (80073e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fc7f 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
 800723e:	e0cc      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_I2C_Mem_Write+0x56>
 800724a:	2302      	movs	r3, #2
 800724c:	e0c5      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b01      	cmp	r3, #1
 8007262:	d007      	beq.n	8007274 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2221      	movs	r2, #33	; 0x21
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2240      	movs	r2, #64	; 0x40
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a4d      	ldr	r2, [pc, #308]	; (80073e8 <HAL_I2C_Mem_Write+0x1f0>)
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072b6:	88f8      	ldrh	r0, [r7, #6]
 80072b8:	893a      	ldrh	r2, [r7, #8]
 80072ba:	8979      	ldrh	r1, [r7, #10]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	4603      	mov	r3, r0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fab6 	bl	8007838 <I2C_RequestMemoryWrite>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d052      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e081      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fd00 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d107      	bne.n	80072fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e06b      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b04      	cmp	r3, #4
 800733e:	d11b      	bne.n	8007378 <HAL_I2C_Mem_Write+0x180>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	2b00      	cmp	r3, #0
 8007346:	d017      	beq.n	8007378 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1aa      	bne.n	80072d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fcec 	bl	8007d62 <I2C_WaitOnBTFFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00d      	beq.n	80073ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	2b04      	cmp	r3, #4
 8007396:	d107      	bne.n	80073a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e016      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	00100002 	.word	0x00100002
 80073e8:	ffff0000 	.word	0xffff0000

080073ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08c      	sub	sp, #48	; 0x30
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	460b      	mov	r3, r1
 8007400:	813b      	strh	r3, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007406:	f7ff f9cf 	bl	80067a8 <HAL_GetTick>
 800740a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b20      	cmp	r3, #32
 8007416:	f040 8208 	bne.w	800782a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2319      	movs	r3, #25
 8007420:	2201      	movs	r2, #1
 8007422:	497b      	ldr	r1, [pc, #492]	; (8007610 <HAL_I2C_Mem_Read+0x224>)
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fb85 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
 8007432:	e1fb      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_I2C_Mem_Read+0x56>
 800743e:	2302      	movs	r3, #2
 8007440:	e1f4      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	2b01      	cmp	r3, #1
 8007456:	d007      	beq.n	8007468 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2222      	movs	r2, #34	; 0x22
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2240      	movs	r2, #64	; 0x40
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a5b      	ldr	r2, [pc, #364]	; (8007614 <HAL_I2C_Mem_Read+0x228>)
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074aa:	88f8      	ldrh	r0, [r7, #6]
 80074ac:	893a      	ldrh	r2, [r7, #8]
 80074ae:	8979      	ldrh	r1, [r7, #10]
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4603      	mov	r3, r0
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fa52 	bl	8007964 <I2C_RequestMemoryRead>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e1b0      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d113      	bne.n	80074fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d2:	2300      	movs	r3, #0
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e184      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d11b      	bne.n	800753a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	e164      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753e:	2b02      	cmp	r3, #2
 8007540:	d11b      	bne.n	800757a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007562:	2300      	movs	r3, #0
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	61bb      	str	r3, [r7, #24]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	e144      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757a:	2300      	movs	r3, #0
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	617b      	str	r3, [r7, #20]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007590:	e138      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007596:	2b03      	cmp	r3, #3
 8007598:	f200 80f1 	bhi.w	800777e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d123      	bne.n	80075ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fc1b 	bl	8007de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e139      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075ea:	e10b      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d14e      	bne.n	8007692 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fa:	2200      	movs	r2, #0
 80075fc:	4906      	ldr	r1, [pc, #24]	; (8007618 <HAL_I2C_Mem_Read+0x22c>)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 fa98 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e10e      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
 800760e:	bf00      	nop
 8007610:	00100002 	.word	0x00100002
 8007614:	ffff0000 	.word	0xffff0000
 8007618:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007690:	e0b8      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	9300      	str	r3, [sp, #0]
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	2200      	movs	r2, #0
 800769a:	4966      	ldr	r1, [pc, #408]	; (8007834 <HAL_I2C_Mem_Read+0x448>)
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fa49 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0bf      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2200      	movs	r2, #0
 80076f6:	494f      	ldr	r1, [pc, #316]	; (8007834 <HAL_I2C_Mem_Read+0x448>)
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fa1b 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e091      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691a      	ldr	r2, [r3, #16]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	b2d2      	uxtb	r2, r2
 8007724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	b2d2      	uxtb	r2, r2
 8007756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800777c:	e042      	b.n	8007804 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fb2e 	bl	8007de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e04c      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d118      	bne.n	8007804 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691a      	ldr	r2, [r3, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f aec2 	bne.w	8007592 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e000      	b.n	800782c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800782a:	2302      	movs	r3, #2
  }
}
 800782c:	4618      	mov	r0, r3
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	00010004 	.word	0x00010004

08007838 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af02      	add	r7, sp, #8
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	4608      	mov	r0, r1
 8007842:	4611      	mov	r1, r2
 8007844:	461a      	mov	r2, r3
 8007846:	4603      	mov	r3, r0
 8007848:	817b      	strh	r3, [r7, #10]
 800784a:	460b      	mov	r3, r1
 800784c:	813b      	strh	r3, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	2200      	movs	r2, #0
 800786a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f960 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007888:	d103      	bne.n	8007892 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e05f      	b.n	8007956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007896:	897b      	ldrh	r3, [r7, #10]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	6a3a      	ldr	r2, [r7, #32]
 80078aa:	492d      	ldr	r1, [pc, #180]	; (8007960 <I2C_RequestMemoryWrite+0x128>)
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f998 	bl	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e04c      	b.n	8007956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d4:	6a39      	ldr	r1, [r7, #32]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fa02 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00d      	beq.n	80078fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d107      	bne.n	80078fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e02b      	b.n	8007956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d105      	bne.n	8007910 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007904:	893b      	ldrh	r3, [r7, #8]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	611a      	str	r2, [r3, #16]
 800790e:	e021      	b.n	8007954 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b29b      	uxth	r3, r3
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007920:	6a39      	ldr	r1, [r7, #32]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f9dc 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	2b04      	cmp	r3, #4
 8007934:	d107      	bne.n	8007946 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e005      	b.n	8007956 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800794a:	893b      	ldrh	r3, [r7, #8]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	00010002 	.word	0x00010002

08007964 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	461a      	mov	r2, r3
 8007972:	4603      	mov	r3, r0
 8007974:	817b      	strh	r3, [r7, #10]
 8007976:	460b      	mov	r3, r1
 8007978:	813b      	strh	r3, [r7, #8]
 800797a:	4613      	mov	r3, r2
 800797c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800798c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800799c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f8c2 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c4:	d103      	bne.n	80079ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e0aa      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079d2:	897b      	ldrh	r3, [r7, #10]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	4952      	ldr	r1, [pc, #328]	; (8007b30 <I2C_RequestMemoryRead+0x1cc>)
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f8fa 	bl	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e097      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6a39      	ldr	r1, [r7, #32]
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f964 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00d      	beq.n	8007a3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d107      	bne.n	8007a36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e076      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a3a:	88fb      	ldrh	r3, [r7, #6]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d105      	bne.n	8007a4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a40:	893b      	ldrh	r3, [r7, #8]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	611a      	str	r2, [r3, #16]
 8007a4a:	e021      	b.n	8007a90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a4c:	893b      	ldrh	r3, [r7, #8]
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5c:	6a39      	ldr	r1, [r7, #32]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f93e 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00d      	beq.n	8007a86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d107      	bne.n	8007a82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e050      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a86:	893b      	ldrh	r3, [r7, #8]
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a92:	6a39      	ldr	r1, [r7, #32]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 f923 	bl	8007ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00d      	beq.n	8007abc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d107      	bne.n	8007ab8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e035      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f82b 	bl	8007b34 <I2C_WaitOnFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af2:	d103      	bne.n	8007afc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e013      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b00:	897b      	ldrh	r3, [r7, #10]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	6a3a      	ldr	r2, [r7, #32]
 8007b14:	4906      	ldr	r1, [pc, #24]	; (8007b30 <I2C_RequestMemoryRead+0x1cc>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f863 	bl	8007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	00010002 	.word	0x00010002

08007b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b44:	e025      	b.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d021      	beq.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4e:	f7fe fe2b 	bl	80067a8 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d116      	bne.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0220 	orr.w	r2, r3, #32
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e023      	b.n	8007bda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d10d      	bne.n	8007bb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf0c      	ite	eq
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	2300      	movne	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	e00c      	b.n	8007bd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bf0c      	ite	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	2300      	movne	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d0b6      	beq.n	8007b46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bf0:	e051      	b.n	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c00:	d123      	bne.n	8007c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f043 0204 	orr.w	r2, r3, #4
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e046      	b.n	8007cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c50:	d021      	beq.n	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c52:	f7fe fda9 	bl	80067a8 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d116      	bne.n	8007c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f043 0220 	orr.w	r2, r3, #32
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e020      	b.n	8007cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	0c1b      	lsrs	r3, r3, #16
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10c      	bne.n	8007cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	43da      	mvns	r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4013      	ands	r3, r2
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bf14      	ite	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	2300      	moveq	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	e00b      	b.n	8007cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	43da      	mvns	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d18d      	bne.n	8007bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cec:	e02d      	b.n	8007d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f8ce 	bl	8007e90 <I2C_IsAcknowledgeFailed>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e02d      	b.n	8007d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d021      	beq.n	8007d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d06:	f7fe fd4f 	bl	80067a8 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d302      	bcc.n	8007d1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d116      	bne.n	8007d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e007      	b.n	8007d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d54:	2b80      	cmp	r3, #128	; 0x80
 8007d56:	d1ca      	bne.n	8007cee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d6e:	e02d      	b.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f88d 	bl	8007e90 <I2C_IsAcknowledgeFailed>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e02d      	b.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d86:	d021      	beq.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d88:	f7fe fd0e 	bl	80067a8 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d302      	bcc.n	8007d9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d116      	bne.n	8007dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db8:	f043 0220 	orr.w	r2, r3, #32
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e007      	b.n	8007ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	f003 0304 	and.w	r3, r3, #4
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d1ca      	bne.n	8007d70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007df0:	e042      	b.n	8007e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d119      	bne.n	8007e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0210 	mvn.w	r2, #16
 8007e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e029      	b.n	8007e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e34:	f7fe fcb8 	bl	80067a8 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d116      	bne.n	8007e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e007      	b.n	8007e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d1b5      	bne.n	8007df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea6:	d11b      	bne.n	8007ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	f043 0204 	orr.w	r2, r3, #4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d129      	bne.n	8007f58 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0201 	bic.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0210 	bic.w	r2, r2, #16
 8007f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e000      	b.n	8007f5a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d12a      	bne.n	8007fd6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	; 0x24
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
 8007fa2:	f023 030f 	bic.w	r3, r3, #15
 8007fa6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	89fb      	ldrh	r3, [r7, #14]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	89fa      	ldrh	r2, [r7, #14]
 8007fb8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e000      	b.n	8007fd8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007fd6:	2302      	movs	r3, #2
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3714      	adds	r7, #20
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e267      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d075      	beq.n	80080ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008002:	4b88      	ldr	r3, [pc, #544]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 030c 	and.w	r3, r3, #12
 800800a:	2b04      	cmp	r3, #4
 800800c:	d00c      	beq.n	8008028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800800e:	4b85      	ldr	r3, [pc, #532]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008016:	2b08      	cmp	r3, #8
 8008018:	d112      	bne.n	8008040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800801a:	4b82      	ldr	r3, [pc, #520]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008026:	d10b      	bne.n	8008040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008028:	4b7e      	ldr	r3, [pc, #504]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d05b      	beq.n	80080ec <HAL_RCC_OscConfig+0x108>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d157      	bne.n	80080ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e242      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008048:	d106      	bne.n	8008058 <HAL_RCC_OscConfig+0x74>
 800804a:	4b76      	ldr	r3, [pc, #472]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a75      	ldr	r2, [pc, #468]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e01d      	b.n	8008094 <HAL_RCC_OscConfig+0xb0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008060:	d10c      	bne.n	800807c <HAL_RCC_OscConfig+0x98>
 8008062:	4b70      	ldr	r3, [pc, #448]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a6f      	ldr	r2, [pc, #444]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	4b6d      	ldr	r3, [pc, #436]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a6c      	ldr	r2, [pc, #432]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e00b      	b.n	8008094 <HAL_RCC_OscConfig+0xb0>
 800807c:	4b69      	ldr	r3, [pc, #420]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a68      	ldr	r2, [pc, #416]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	4b66      	ldr	r3, [pc, #408]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a65      	ldr	r2, [pc, #404]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 800808e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d013      	beq.n	80080c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800809c:	f7fe fb84 	bl	80067a8 <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080a4:	f7fe fb80 	bl	80067a8 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b64      	cmp	r3, #100	; 0x64
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e207      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080b6:	4b5b      	ldr	r3, [pc, #364]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d0f0      	beq.n	80080a4 <HAL_RCC_OscConfig+0xc0>
 80080c2:	e014      	b.n	80080ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c4:	f7fe fb70 	bl	80067a8 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080cc:	f7fe fb6c 	bl	80067a8 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b64      	cmp	r3, #100	; 0x64
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e1f3      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080de:	4b51      	ldr	r3, [pc, #324]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1f0      	bne.n	80080cc <HAL_RCC_OscConfig+0xe8>
 80080ea:	e000      	b.n	80080ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d063      	beq.n	80081c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080fa:	4b4a      	ldr	r3, [pc, #296]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f003 030c 	and.w	r3, r3, #12
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008106:	4b47      	ldr	r3, [pc, #284]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800810e:	2b08      	cmp	r3, #8
 8008110:	d11c      	bne.n	800814c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008112:	4b44      	ldr	r3, [pc, #272]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d116      	bne.n	800814c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d005      	beq.n	8008136 <HAL_RCC_OscConfig+0x152>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d001      	beq.n	8008136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e1c7      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	4937      	ldr	r1, [pc, #220]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800814a:	e03a      	b.n	80081c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d020      	beq.n	8008196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008154:	4b34      	ldr	r3, [pc, #208]	; (8008228 <HAL_RCC_OscConfig+0x244>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815a:	f7fe fb25 	bl	80067a8 <HAL_GetTick>
 800815e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008162:	f7fe fb21 	bl	80067a8 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e1a8      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008174:	4b2b      	ldr	r3, [pc, #172]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	4925      	ldr	r1, [pc, #148]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 8008190:	4313      	orrs	r3, r2
 8008192:	600b      	str	r3, [r1, #0]
 8008194:	e015      	b.n	80081c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008196:	4b24      	ldr	r3, [pc, #144]	; (8008228 <HAL_RCC_OscConfig+0x244>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819c:	f7fe fb04 	bl	80067a8 <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081a4:	f7fe fb00 	bl	80067a8 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e187      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081b6:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f0      	bne.n	80081a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d036      	beq.n	800823c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d016      	beq.n	8008204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <HAL_RCC_OscConfig+0x248>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081dc:	f7fe fae4 	bl	80067a8 <HAL_GetTick>
 80081e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081e4:	f7fe fae0 	bl	80067a8 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e167      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <HAL_RCC_OscConfig+0x240>)
 80081f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCC_OscConfig+0x200>
 8008202:	e01b      	b.n	800823c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008204:	4b09      	ldr	r3, [pc, #36]	; (800822c <HAL_RCC_OscConfig+0x248>)
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800820a:	f7fe facd 	bl	80067a8 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008210:	e00e      	b.n	8008230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008212:	f7fe fac9 	bl	80067a8 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d907      	bls.n	8008230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e150      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
 8008224:	40023800 	.word	0x40023800
 8008228:	42470000 	.word	0x42470000
 800822c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008230:	4b88      	ldr	r3, [pc, #544]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1ea      	bne.n	8008212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8097 	beq.w	8008378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800824e:	4b81      	ldr	r3, [pc, #516]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10f      	bne.n	800827a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
 800825e:	4b7d      	ldr	r3, [pc, #500]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	4a7c      	ldr	r2, [pc, #496]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008268:	6413      	str	r3, [r2, #64]	; 0x40
 800826a:	4b7a      	ldr	r3, [pc, #488]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008276:	2301      	movs	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800827a:	4b77      	ldr	r3, [pc, #476]	; (8008458 <HAL_RCC_OscConfig+0x474>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d118      	bne.n	80082b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008286:	4b74      	ldr	r3, [pc, #464]	; (8008458 <HAL_RCC_OscConfig+0x474>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a73      	ldr	r2, [pc, #460]	; (8008458 <HAL_RCC_OscConfig+0x474>)
 800828c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008292:	f7fe fa89 	bl	80067a8 <HAL_GetTick>
 8008296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008298:	e008      	b.n	80082ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800829a:	f7fe fa85 	bl	80067a8 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e10c      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ac:	4b6a      	ldr	r3, [pc, #424]	; (8008458 <HAL_RCC_OscConfig+0x474>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0f0      	beq.n	800829a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d106      	bne.n	80082ce <HAL_RCC_OscConfig+0x2ea>
 80082c0:	4b64      	ldr	r3, [pc, #400]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c4:	4a63      	ldr	r2, [pc, #396]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	6713      	str	r3, [r2, #112]	; 0x70
 80082cc:	e01c      	b.n	8008308 <HAL_RCC_OscConfig+0x324>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	d10c      	bne.n	80082f0 <HAL_RCC_OscConfig+0x30c>
 80082d6:	4b5f      	ldr	r3, [pc, #380]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	4a5e      	ldr	r2, [pc, #376]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082dc:	f043 0304 	orr.w	r3, r3, #4
 80082e0:	6713      	str	r3, [r2, #112]	; 0x70
 80082e2:	4b5c      	ldr	r3, [pc, #368]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	4a5b      	ldr	r2, [pc, #364]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	6713      	str	r3, [r2, #112]	; 0x70
 80082ee:	e00b      	b.n	8008308 <HAL_RCC_OscConfig+0x324>
 80082f0:	4b58      	ldr	r3, [pc, #352]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f4:	4a57      	ldr	r2, [pc, #348]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082f6:	f023 0301 	bic.w	r3, r3, #1
 80082fa:	6713      	str	r3, [r2, #112]	; 0x70
 80082fc:	4b55      	ldr	r3, [pc, #340]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	4a54      	ldr	r2, [pc, #336]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008302:	f023 0304 	bic.w	r3, r3, #4
 8008306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d015      	beq.n	800833c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008310:	f7fe fa4a 	bl	80067a8 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008316:	e00a      	b.n	800832e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008318:	f7fe fa46 	bl	80067a8 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	f241 3288 	movw	r2, #5000	; 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e0cb      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800832e:	4b49      	ldr	r3, [pc, #292]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0ee      	beq.n	8008318 <HAL_RCC_OscConfig+0x334>
 800833a:	e014      	b.n	8008366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800833c:	f7fe fa34 	bl	80067a8 <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008342:	e00a      	b.n	800835a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008344:	f7fe fa30 	bl	80067a8 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008352:	4293      	cmp	r3, r2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e0b5      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800835a:	4b3e      	ldr	r3, [pc, #248]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1ee      	bne.n	8008344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d105      	bne.n	8008378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800836c:	4b39      	ldr	r3, [pc, #228]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	4a38      	ldr	r2, [pc, #224]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80a1 	beq.w	80084c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008382:	4b34      	ldr	r3, [pc, #208]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 030c 	and.w	r3, r3, #12
 800838a:	2b08      	cmp	r3, #8
 800838c:	d05c      	beq.n	8008448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d141      	bne.n	800841a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008396:	4b31      	ldr	r3, [pc, #196]	; (800845c <HAL_RCC_OscConfig+0x478>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839c:	f7fe fa04 	bl	80067a8 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083a4:	f7fe fa00 	bl	80067a8 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e087      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083b6:	4b27      	ldr	r3, [pc, #156]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	019b      	lsls	r3, r3, #6
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	085b      	lsrs	r3, r3, #1
 80083da:	3b01      	subs	r3, #1
 80083dc:	041b      	lsls	r3, r3, #16
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	061b      	lsls	r3, r3, #24
 80083e6:	491b      	ldr	r1, [pc, #108]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <HAL_RCC_OscConfig+0x478>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f2:	f7fe f9d9 	bl	80067a8 <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083fa:	f7fe f9d5 	bl	80067a8 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e05c      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800840c:	4b11      	ldr	r3, [pc, #68]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x416>
 8008418:	e054      	b.n	80084c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800841a:	4b10      	ldr	r3, [pc, #64]	; (800845c <HAL_RCC_OscConfig+0x478>)
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008420:	f7fe f9c2 	bl	80067a8 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008428:	f7fe f9be 	bl	80067a8 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e045      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <HAL_RCC_OscConfig+0x470>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1f0      	bne.n	8008428 <HAL_RCC_OscConfig+0x444>
 8008446:	e03d      	b.n	80084c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d107      	bne.n	8008460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e038      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
 8008454:	40023800 	.word	0x40023800
 8008458:	40007000 	.word	0x40007000
 800845c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008460:	4b1b      	ldr	r3, [pc, #108]	; (80084d0 <HAL_RCC_OscConfig+0x4ec>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d028      	beq.n	80084c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008478:	429a      	cmp	r2, r3
 800847a:	d121      	bne.n	80084c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008486:	429a      	cmp	r2, r3
 8008488:	d11a      	bne.n	80084c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008490:	4013      	ands	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008498:	4293      	cmp	r3, r2
 800849a:	d111      	bne.n	80084c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	3b01      	subs	r3, #1
 80084aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d107      	bne.n	80084c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40023800 	.word	0x40023800

080084d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0cc      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084e8:	4b68      	ldr	r3, [pc, #416]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90c      	bls.n	8008510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084f6:	4b65      	ldr	r3, [pc, #404]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084fe:	4b63      	ldr	r3, [pc, #396]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d001      	beq.n	8008510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0b8      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d020      	beq.n	800855e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008528:	4b59      	ldr	r3, [pc, #356]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	4a58      	ldr	r2, [pc, #352]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008540:	4b53      	ldr	r3, [pc, #332]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a52      	ldr	r2, [pc, #328]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800854a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800854c:	4b50      	ldr	r3, [pc, #320]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	494d      	ldr	r1, [pc, #308]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 800855a:	4313      	orrs	r3, r2
 800855c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d044      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d107      	bne.n	8008582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008572:	4b47      	ldr	r3, [pc, #284]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d119      	bne.n	80085b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e07f      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d003      	beq.n	8008592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800858e:	2b03      	cmp	r3, #3
 8008590:	d107      	bne.n	80085a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008592:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e06f      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085a2:	4b3b      	ldr	r3, [pc, #236]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e067      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085b2:	4b37      	ldr	r3, [pc, #220]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f023 0203 	bic.w	r2, r3, #3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4934      	ldr	r1, [pc, #208]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085c4:	f7fe f8f0 	bl	80067a8 <HAL_GetTick>
 80085c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ca:	e00a      	b.n	80085e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085cc:	f7fe f8ec 	bl	80067a8 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085da:	4293      	cmp	r3, r2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e04f      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e2:	4b2b      	ldr	r3, [pc, #172]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f003 020c 	and.w	r2, r3, #12
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d1eb      	bne.n	80085cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085f4:	4b25      	ldr	r3, [pc, #148]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d20c      	bcs.n	800861c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008602:	4b22      	ldr	r3, [pc, #136]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800860a:	4b20      	ldr	r3, [pc, #128]	; (800868c <HAL_RCC_ClockConfig+0x1b8>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d001      	beq.n	800861c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e032      	b.n	8008682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008628:	4b19      	ldr	r3, [pc, #100]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	4916      	ldr	r1, [pc, #88]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	4313      	orrs	r3, r2
 8008638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d009      	beq.n	800865a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008646:	4b12      	ldr	r3, [pc, #72]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	490e      	ldr	r1, [pc, #56]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008656:	4313      	orrs	r3, r2
 8008658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800865a:	f000 f821 	bl	80086a0 <HAL_RCC_GetSysClockFreq>
 800865e:	4602      	mov	r2, r0
 8008660:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	091b      	lsrs	r3, r3, #4
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	490a      	ldr	r1, [pc, #40]	; (8008694 <HAL_RCC_ClockConfig+0x1c0>)
 800866c:	5ccb      	ldrb	r3, [r1, r3]
 800866e:	fa22 f303 	lsr.w	r3, r2, r3
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <HAL_RCC_ClockConfig+0x1c4>)
 8008674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <HAL_RCC_ClockConfig+0x1c8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe f850 	bl	8006720 <HAL_InitTick>

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	40023c00 	.word	0x40023c00
 8008690:	40023800 	.word	0x40023800
 8008694:	08015da4 	.word	0x08015da4
 8008698:	20000094 	.word	0x20000094
 800869c:	200000f0 	.word	0x200000f0

080086a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a4:	b094      	sub	sp, #80	; 0x50
 80086a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	647b      	str	r3, [r7, #68]	; 0x44
 80086ac:	2300      	movs	r3, #0
 80086ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b0:	2300      	movs	r3, #0
 80086b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086b8:	4b79      	ldr	r3, [pc, #484]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 030c 	and.w	r3, r3, #12
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d00d      	beq.n	80086e0 <HAL_RCC_GetSysClockFreq+0x40>
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	f200 80e1 	bhi.w	800888c <HAL_RCC_GetSysClockFreq+0x1ec>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <HAL_RCC_GetSysClockFreq+0x34>
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d003      	beq.n	80086da <HAL_RCC_GetSysClockFreq+0x3a>
 80086d2:	e0db      	b.n	800888c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086d4:	4b73      	ldr	r3, [pc, #460]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80086d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80086d8:	e0db      	b.n	8008892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086da:	4b73      	ldr	r3, [pc, #460]	; (80088a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80086dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80086de:	e0d8      	b.n	8008892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086e0:	4b6f      	ldr	r3, [pc, #444]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086ea:	4b6d      	ldr	r3, [pc, #436]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d063      	beq.n	80087be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086f6:	4b6a      	ldr	r3, [pc, #424]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	099b      	lsrs	r3, r3, #6
 80086fc:	2200      	movs	r2, #0
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008708:	633b      	str	r3, [r7, #48]	; 0x30
 800870a:	2300      	movs	r3, #0
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
 800870e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008712:	4622      	mov	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	f04f 0000 	mov.w	r0, #0
 800871a:	f04f 0100 	mov.w	r1, #0
 800871e:	0159      	lsls	r1, r3, #5
 8008720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008724:	0150      	lsls	r0, r2, #5
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4621      	mov	r1, r4
 800872c:	1a51      	subs	r1, r2, r1
 800872e:	6139      	str	r1, [r7, #16]
 8008730:	4629      	mov	r1, r5
 8008732:	eb63 0301 	sbc.w	r3, r3, r1
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008744:	4659      	mov	r1, fp
 8008746:	018b      	lsls	r3, r1, #6
 8008748:	4651      	mov	r1, sl
 800874a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800874e:	4651      	mov	r1, sl
 8008750:	018a      	lsls	r2, r1, #6
 8008752:	4651      	mov	r1, sl
 8008754:	ebb2 0801 	subs.w	r8, r2, r1
 8008758:	4659      	mov	r1, fp
 800875a:	eb63 0901 	sbc.w	r9, r3, r1
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800876a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800876e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008772:	4690      	mov	r8, r2
 8008774:	4699      	mov	r9, r3
 8008776:	4623      	mov	r3, r4
 8008778:	eb18 0303 	adds.w	r3, r8, r3
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	462b      	mov	r3, r5
 8008780:	eb49 0303 	adc.w	r3, r9, r3
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	f04f 0200 	mov.w	r2, #0
 800878a:	f04f 0300 	mov.w	r3, #0
 800878e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008792:	4629      	mov	r1, r5
 8008794:	024b      	lsls	r3, r1, #9
 8008796:	4621      	mov	r1, r4
 8008798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800879c:	4621      	mov	r1, r4
 800879e:	024a      	lsls	r2, r1, #9
 80087a0:	4610      	mov	r0, r2
 80087a2:	4619      	mov	r1, r3
 80087a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a6:	2200      	movs	r2, #0
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087b0:	f7f8 fa7a 	bl	8000ca8 <__aeabi_uldivmod>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4613      	mov	r3, r2
 80087ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087bc:	e058      	b.n	8008870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087be:	4b38      	ldr	r3, [pc, #224]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	099b      	lsrs	r3, r3, #6
 80087c4:	2200      	movs	r2, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	4611      	mov	r1, r2
 80087ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80087ce:	623b      	str	r3, [r7, #32]
 80087d0:	2300      	movs	r3, #0
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
 80087d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	f04f 0000 	mov.w	r0, #0
 80087e0:	f04f 0100 	mov.w	r1, #0
 80087e4:	0159      	lsls	r1, r3, #5
 80087e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087ea:	0150      	lsls	r0, r2, #5
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4641      	mov	r1, r8
 80087f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80087f6:	4649      	mov	r1, r9
 80087f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800880c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008810:	ebb2 040a 	subs.w	r4, r2, sl
 8008814:	eb63 050b 	sbc.w	r5, r3, fp
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	00eb      	lsls	r3, r5, #3
 8008822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008826:	00e2      	lsls	r2, r4, #3
 8008828:	4614      	mov	r4, r2
 800882a:	461d      	mov	r5, r3
 800882c:	4643      	mov	r3, r8
 800882e:	18e3      	adds	r3, r4, r3
 8008830:	603b      	str	r3, [r7, #0]
 8008832:	464b      	mov	r3, r9
 8008834:	eb45 0303 	adc.w	r3, r5, r3
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008846:	4629      	mov	r1, r5
 8008848:	028b      	lsls	r3, r1, #10
 800884a:	4621      	mov	r1, r4
 800884c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008850:	4621      	mov	r1, r4
 8008852:	028a      	lsls	r2, r1, #10
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800885a:	2200      	movs	r2, #0
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	61fa      	str	r2, [r7, #28]
 8008860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008864:	f7f8 fa20 	bl	8000ca8 <__aeabi_uldivmod>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4613      	mov	r3, r2
 800886e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	0c1b      	lsrs	r3, r3, #16
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	3301      	adds	r3, #1
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008884:	fbb2 f3f3 	udiv	r3, r2, r3
 8008888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800888a:	e002      	b.n	8008892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800888c:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008894:	4618      	mov	r0, r3
 8008896:	3750      	adds	r7, #80	; 0x50
 8008898:	46bd      	mov	sp, r7
 800889a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800889e:	bf00      	nop
 80088a0:	40023800 	.word	0x40023800
 80088a4:	00f42400 	.word	0x00f42400
 80088a8:	007a1200 	.word	0x007a1200

080088ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088b0:	4b03      	ldr	r3, [pc, #12]	; (80088c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80088b2:	681b      	ldr	r3, [r3, #0]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000094 	.word	0x20000094

080088c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088c8:	f7ff fff0 	bl	80088ac <HAL_RCC_GetHCLKFreq>
 80088cc:	4602      	mov	r2, r0
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	0a9b      	lsrs	r3, r3, #10
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	4903      	ldr	r1, [pc, #12]	; (80088e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088da:	5ccb      	ldrb	r3, [r1, r3]
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	40023800 	.word	0x40023800
 80088e8:	08015db4 	.word	0x08015db4

080088ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088f0:	f7ff ffdc 	bl	80088ac <HAL_RCC_GetHCLKFreq>
 80088f4:	4602      	mov	r2, r0
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <HAL_RCC_GetPCLK2Freq+0x20>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	0b5b      	lsrs	r3, r3, #13
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	4903      	ldr	r1, [pc, #12]	; (8008910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008902:	5ccb      	ldrb	r3, [r1, r3]
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008908:	4618      	mov	r0, r3
 800890a:	bd80      	pop	{r7, pc}
 800890c:	40023800 	.word	0x40023800
 8008910:	08015db4 	.word	0x08015db4

08008914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008944:	2b00      	cmp	r3, #0
 8008946:	d075      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008948:	4b91      	ldr	r3, [pc, #580]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800894e:	f7fd ff2b 	bl	80067a8 <HAL_GetTick>
 8008952:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008954:	e008      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008956:	f7fd ff27 	bl	80067a8 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e189      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008968:	4b8a      	ldr	r3, [pc, #552]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1f0      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	019a      	lsls	r2, r3, #6
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	071b      	lsls	r3, r3, #28
 800898c:	4981      	ldr	r1, [pc, #516]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800898e:	4313      	orrs	r3, r2
 8008990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01f      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089a0:	4b7c      	ldr	r3, [pc, #496]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089a6:	0f1b      	lsrs	r3, r3, #28
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	019a      	lsls	r2, r3, #6
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	431a      	orrs	r2, r3
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	071b      	lsls	r3, r3, #28
 80089c0:	4974      	ldr	r1, [pc, #464]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80089c8:	4b72      	ldr	r3, [pc, #456]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ce:	f023 021f 	bic.w	r2, r3, #31
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	496e      	ldr	r1, [pc, #440]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00d      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	019a      	lsls	r2, r3, #6
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	071b      	lsls	r3, r3, #28
 8008a00:	4964      	ldr	r1, [pc, #400]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a08:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a0e:	f7fd fecb 	bl	80067a8 <HAL_GetTick>
 8008a12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a14:	e008      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a16:	f7fd fec7 	bl	80067a8 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e129      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a28:	4b5a      	ldr	r3, [pc, #360]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f0      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d105      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d079      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a4c:	4b52      	ldr	r3, [pc, #328]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a52:	f7fd fea9 	bl	80067a8 <HAL_GetTick>
 8008a56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a58:	e008      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008a5a:	f7fd fea5 	bl	80067a8 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e107      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a6c:	4b49      	ldr	r3, [pc, #292]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a78:	d0ef      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d020      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a86:	4b43      	ldr	r3, [pc, #268]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8c:	0f1b      	lsrs	r3, r3, #28
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	019a      	lsls	r2, r3, #6
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	071b      	lsls	r3, r3, #28
 8008aa6:	493b      	ldr	r1, [pc, #236]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008aae:	4b39      	ldr	r3, [pc, #228]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	4934      	ldr	r1, [pc, #208]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01e      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ad4:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ada:	0e1b      	lsrs	r3, r3, #24
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	019a      	lsls	r2, r3, #6
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	071b      	lsls	r3, r3, #28
 8008af4:	4927      	ldr	r1, [pc, #156]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	4922      	ldr	r1, [pc, #136]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b12:	4b21      	ldr	r3, [pc, #132]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b18:	f7fd fe46 	bl	80067a8 <HAL_GetTick>
 8008b1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008b20:	f7fd fe42 	bl	80067a8 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e0a4      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b32:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b3e:	d1ef      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 808b 	beq.w	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	4a0f      	ldr	r2, [pc, #60]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a0b      	ldr	r2, [pc, #44]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b76:	f7fd fe17 	bl	80067a8 <HAL_GetTick>
 8008b7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008b7c:	e010      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008b7e:	f7fd fe13 	bl	80067a8 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d909      	bls.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e075      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008b90:	42470068 	.word	0x42470068
 8008b94:	40023800 	.word	0x40023800
 8008b98:	42470070 	.word	0x42470070
 8008b9c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ba0:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0e8      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d02f      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d028      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bca:	4b2f      	ldr	r3, [pc, #188]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bd4:	4b2d      	ldr	r3, [pc, #180]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008bda:	4b2c      	ldr	r3, [pc, #176]	; (8008c8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008be0:	4a29      	ldr	r2, [pc, #164]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008be6:	4b28      	ldr	r3, [pc, #160]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d114      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008bf2:	f7fd fdd9 	bl	80067a8 <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bf8:	e00a      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008bfa:	f7fd fdd5 	bl	80067a8 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d901      	bls.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e035      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c10:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0ee      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c28:	d10d      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008c2a:	4b17      	ldr	r3, [pc, #92]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3e:	4912      	ldr	r1, [pc, #72]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	608b      	str	r3, [r1, #8]
 8008c44:	e005      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	4a0f      	ldr	r2, [pc, #60]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c50:	6093      	str	r3, [r2, #8]
 8008c52:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c5e:	490a      	ldr	r1, [pc, #40]	; (8008c88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008c78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	40007000 	.word	0x40007000
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	42470e40 	.word	0x42470e40
 8008c90:	424711e0 	.word	0x424711e0

08008c94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e066      	b.n	8008d78 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	7f5b      	ldrb	r3, [r3, #29]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d105      	bne.n	8008cc0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fb fbe6 	bl	800448c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	22ca      	movs	r2, #202	; 0xca
 8008ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2253      	movs	r2, #83	; 0x53
 8008cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f927 	bl	8008f2a <RTC_EnterInitMode>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d12c      	bne.n	8008d40 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6812      	ldr	r2, [r2, #0]
 8008cf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6899      	ldr	r1, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	68d2      	ldr	r2, [r2, #12]
 8008d20:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6919      	ldr	r1, [r3, #16]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	041a      	lsls	r2, r3, #16
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f92e 	bl	8008f98 <RTC_ExitInitMode>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d113      	bne.n	8008d6e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d54:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699a      	ldr	r2, [r3, #24]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	22ff      	movs	r2, #255	; 0xff
 8008d74:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008db2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008db6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	0d9b      	lsrs	r3, r3, #22
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d11a      	bne.n	8008e32 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f8ee 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008e06:	4603      	mov	r3, r0
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f8e5 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	789b      	ldrb	r3, [r3, #2]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f8dc 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	0a1b      	lsrs	r3, r3, #8
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f003 031f 	and.w	r3, r3, #31
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	0b5b      	lsrs	r3, r3, #13
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d11a      	bne.n	8008ed0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	78db      	ldrb	r3, [r3, #3]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f89f 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f896 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	789b      	ldrb	r3, [r3, #2]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 f88d 	bl	8008fe2 <RTC_Bcd2ToByte>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ef4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ef6:	f7fd fc57 	bl	80067a8 <HAL_GetTick>
 8008efa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008efc:	e009      	b.n	8008f12 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008efe:	f7fd fc53 	bl	80067a8 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f0c:	d901      	bls.n	8008f12 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e007      	b.n	8008f22 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0ee      	beq.n	8008efe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d122      	bne.n	8008f8e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f58:	f7fd fc26 	bl	80067a8 <HAL_GetTick>
 8008f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f5e:	e00c      	b.n	8008f7a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f60:	f7fd fc22 	bl	80067a8 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f6e:	d904      	bls.n	8008f7a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2204      	movs	r2, #4
 8008f74:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <RTC_EnterInitMode+0x64>
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d1e8      	bne.n	8008f60 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fb2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff ff89 	bl	8008eda <HAL_RTC_WaitForSynchro>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	4603      	mov	r3, r0
 8008fea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	091b      	lsrs	r3, r3, #4
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	0092      	lsls	r2, r2, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	b2da      	uxtb	r2, r3
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4413      	add	r3, r2
 800900c:	b2db      	uxtb	r3, r3
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e022      	b.n	8009072 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d105      	bne.n	8009044 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7fb fa6e 	bl	8004520 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2203      	movs	r2, #3
 8009048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f815 	bl	800907c <HAL_SD_InitCard>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e00a      	b.n	8009072 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800907c:	b5b0      	push	{r4, r5, r7, lr}
 800907e:	b08e      	sub	sp, #56	; 0x38
 8009080:	af04      	add	r7, sp, #16
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009084:	2300      	movs	r3, #0
 8009086:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800908c:	2300      	movs	r3, #0
 800908e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009094:	2300      	movs	r3, #0
 8009096:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009098:	2376      	movs	r3, #118	; 0x76
 800909a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681d      	ldr	r5, [r3, #0]
 80090a0:	466c      	mov	r4, sp
 80090a2:	f107 0314 	add.w	r3, r7, #20
 80090a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090ae:	f107 0308 	add.w	r3, r7, #8
 80090b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090b4:	4628      	mov	r0, r5
 80090b6:	f002 ffb9 	bl	800c02c <SDIO_Init>
 80090ba:	4603      	mov	r3, r0
 80090bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80090c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e04f      	b.n	800916c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80090cc:	4b29      	ldr	r3, [pc, #164]	; (8009174 <HAL_SD_InitCard+0xf8>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 fff1 	bl	800c0be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80090dc:	4b25      	ldr	r3, [pc, #148]	; (8009174 <HAL_SD_InitCard+0xf8>)
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80090e2:	2002      	movs	r0, #2
 80090e4:	f7fd fb6c 	bl	80067c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fe69 	bl	8009dc0 <SD_PowerON>
 80090ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e02e      	b.n	800916c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fd88 	bl	8009c24 <SD_InitCard>
 8009114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e01b      	b.n	800916c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800913c:	4618      	mov	r0, r3
 800913e:	f003 f850 	bl	800c1e2 <SDMMC_CmdBlockLength>
 8009142:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00f      	beq.n	800916a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <HAL_SD_InitCard+0xfc>)
 8009150:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	431a      	orrs	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	bdb0      	pop	{r4, r5, r7, pc}
 8009174:	422580a0 	.word	0x422580a0
 8009178:	004005ff 	.word	0x004005ff

0800917c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b092      	sub	sp, #72	; 0x48
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800918a:	f7fd fb0d 	bl	80067a8 <HAL_GetTick>
 800918e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d107      	bne.n	80091ae <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e1bd      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	f040 81b0 	bne.w	800951c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	441a      	add	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d907      	bls.n	80091e0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e1a4      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2203      	movs	r2, #3
 80091e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2200      	movs	r2, #0
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d002      	beq.n	80091fe <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	025b      	lsls	r3, r3, #9
 80091fc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009202:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	025b      	lsls	r3, r3, #9
 8009208:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800920a:	2390      	movs	r3, #144	; 0x90
 800920c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800920e:	2302      	movs	r3, #2
 8009210:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009212:	2300      	movs	r3, #0
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009216:	2301      	movs	r3, #1
 8009218:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f107 0214 	add.w	r2, r7, #20
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f002 ffb0 	bl	800c18a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d90a      	bls.n	8009246 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2202      	movs	r2, #2
 8009234:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800923c:	4618      	mov	r0, r3
 800923e:	f003 f814 	bl	800c26a <SDMMC_CmdReadMultiBlock>
 8009242:	6478      	str	r0, [r7, #68]	; 0x44
 8009244:	e009      	b.n	800925a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009252:	4618      	mov	r0, r3
 8009254:	f002 ffe7 	bl	800c226 <SDMMC_CmdReadSingleBlock>
 8009258:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800925a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800925c:	2b00      	cmp	r3, #0
 800925e:	d012      	beq.n	8009286 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a7a      	ldr	r2, [pc, #488]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 8009266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800926e:	431a      	orrs	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e151      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800928a:	e061      	b.n	8009350 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d03c      	beq.n	8009314 <HAL_SD_ReadBlocks+0x198>
 800929a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d039      	beq.n	8009314 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80092a0:	2300      	movs	r3, #0
 80092a2:	643b      	str	r3, [r7, #64]	; 0x40
 80092a4:	e033      	b.n	800930e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f002 fee9 	bl	800c082 <SDIO_ReadFIFO>
 80092b0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	3301      	adds	r3, #1
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	3b01      	subs	r3, #1
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d2:	3301      	adds	r3, #1
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	3b01      	subs	r3, #1
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	3301      	adds	r3, #1
 80092ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80092ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ee:	3b01      	subs	r3, #1
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	0e1b      	lsrs	r3, r3, #24
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80092fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fe:	3301      	adds	r3, #1
 8009300:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	3b01      	subs	r3, #1
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800930a:	3301      	adds	r3, #1
 800930c:	643b      	str	r3, [r7, #64]	; 0x40
 800930e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009310:	2b07      	cmp	r3, #7
 8009312:	d9c8      	bls.n	80092a6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009314:	f7fd fa48 	bl	80067a8 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009320:	429a      	cmp	r2, r3
 8009322:	d902      	bls.n	800932a <HAL_SD_ReadBlocks+0x1ae>
 8009324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009326:	2b00      	cmp	r3, #0
 8009328:	d112      	bne.n	8009350 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a48      	ldr	r2, [pc, #288]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 8009330:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e0ec      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009356:	f240 332a 	movw	r3, #810	; 0x32a
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d095      	beq.n	800928c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936a:	2b00      	cmp	r3, #0
 800936c:	d022      	beq.n	80093b4 <HAL_SD_ReadBlocks+0x238>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d91f      	bls.n	80093b4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009378:	2b03      	cmp	r3, #3
 800937a:	d01b      	beq.n	80093b4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f002 ffd9 	bl	800c338 <SDMMC_CmdStopTransfer>
 8009386:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800938a:	2b00      	cmp	r3, #0
 800938c:	d012      	beq.n	80093b4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a2f      	ldr	r2, [pc, #188]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e0ba      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d012      	beq.n	80093e8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a22      	ldr	r2, [pc, #136]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 80093c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	f043 0208 	orr.w	r2, r3, #8
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0a0      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d012      	beq.n	800941c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a15      	ldr	r2, [pc, #84]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e086      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d063      	beq.n	80094f2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a08      	ldr	r2, [pc, #32]	; (8009450 <HAL_SD_ReadBlocks+0x2d4>)
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	f043 0220 	orr.w	r2, r3, #32
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e06c      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
 8009450:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4618      	mov	r0, r3
 800945a:	f002 fe12 	bl	800c082 <SDIO_ReadFIFO>
 800945e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	b2da      	uxtb	r2, r3
 8009464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009466:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946a:	3301      	adds	r3, #1
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800946e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009470:	3b01      	subs	r3, #1
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	0a1b      	lsrs	r3, r3, #8
 8009478:	b2da      	uxtb	r2, r3
 800947a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800947c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800947e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009480:	3301      	adds	r3, #1
 8009482:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009486:	3b01      	subs	r3, #1
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	0c1b      	lsrs	r3, r3, #16
 800948e:	b2da      	uxtb	r2, r3
 8009490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009492:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009496:	3301      	adds	r3, #1
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	3b01      	subs	r3, #1
 800949e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	0e1b      	lsrs	r3, r3, #24
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80094aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ac:	3301      	adds	r3, #1
 80094ae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	3b01      	subs	r3, #1
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80094b6:	f7fd f977 	bl	80067a8 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d902      	bls.n	80094cc <HAL_SD_ReadBlocks+0x350>
 80094c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d112      	bne.n	80094f2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a18      	ldr	r2, [pc, #96]	; (8009534 <HAL_SD_ReadBlocks+0x3b8>)
 80094d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e01b      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <HAL_SD_ReadBlocks+0x38a>
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1a6      	bne.n	8009454 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f240 523a 	movw	r2, #1338	; 0x53a
 800950e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e006      	b.n	800952a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
  }
}
 800952a:	4618      	mov	r0, r3
 800952c:	3748      	adds	r7, #72	; 0x48
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	004005ff 	.word	0x004005ff

08009538 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b092      	sub	sp, #72	; 0x48
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009546:	f7fd f92f 	bl	80067a8 <HAL_GetTick>
 800954a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d107      	bne.n	800956a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e166      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	f040 8159 	bne.w	800982a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800957e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009588:	429a      	cmp	r2, r3
 800958a:	d907      	bls.n	800959c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e14d      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2203      	movs	r2, #3
 80095a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2200      	movs	r2, #0
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d002      	beq.n	80095ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	025b      	lsls	r3, r3, #9
 80095b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	025b      	lsls	r3, r3, #9
 80095c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80095c6:	2390      	movs	r3, #144	; 0x90
 80095c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80095ca:	2300      	movs	r3, #0
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f107 0218 	add.w	r2, r7, #24
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f002 fdd2 	bl	800c18a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d90a      	bls.n	8009602 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2220      	movs	r2, #32
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f8:	4618      	mov	r0, r3
 80095fa:	f002 fe7a 	bl	800c2f2 <SDMMC_CmdWriteMultiBlock>
 80095fe:	6478      	str	r0, [r7, #68]	; 0x44
 8009600:	e009      	b.n	8009616 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2210      	movs	r2, #16
 8009606:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800960e:	4618      	mov	r0, r3
 8009610:	f002 fe4d 	bl	800c2ae <SDMMC_CmdWriteSingleBlock>
 8009614:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009618:	2b00      	cmp	r3, #0
 800961a:	d012      	beq.n	8009642 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a87      	ldr	r2, [pc, #540]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 8009622:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800962a:	431a      	orrs	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e0fa      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009646:	e065      	b.n	8009714 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d040      	beq.n	80096d8 <HAL_SD_WriteBlocks+0x1a0>
 8009656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d03d      	beq.n	80096d8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800965c:	2300      	movs	r3, #0
 800965e:	643b      	str	r3, [r7, #64]	; 0x40
 8009660:	e037      	b.n	80096d2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	3301      	adds	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800966e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009670:	3b01      	subs	r3, #1
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	021a      	lsls	r2, r3, #8
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	3301      	adds	r3, #1
 8009684:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009688:	3b01      	subs	r3, #1
 800968a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	041a      	lsls	r2, r3, #16
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969a:	3301      	adds	r3, #1
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800969e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a0:	3b01      	subs	r3, #1
 80096a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	061a      	lsls	r2, r3, #24
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80096b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b2:	3301      	adds	r3, #1
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80096b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b8:	3b01      	subs	r3, #1
 80096ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f107 0214 	add.w	r2, r7, #20
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f002 fce8 	bl	800c09c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80096cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ce:	3301      	adds	r3, #1
 80096d0:	643b      	str	r3, [r7, #64]	; 0x40
 80096d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d4:	2b07      	cmp	r3, #7
 80096d6:	d9c4      	bls.n	8009662 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80096d8:	f7fd f866 	bl	80067a8 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d902      	bls.n	80096ee <HAL_SD_WriteBlocks+0x1b6>
 80096e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d112      	bne.n	8009714 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a53      	ldr	r2, [pc, #332]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fc:	431a      	orrs	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e091      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800971a:	f240 331a 	movw	r3, #794	; 0x31a
 800971e:	4013      	ands	r3, r2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d091      	beq.n	8009648 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972e:	2b00      	cmp	r3, #0
 8009730:	d022      	beq.n	8009778 <HAL_SD_WriteBlocks+0x240>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d91f      	bls.n	8009778 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973c:	2b03      	cmp	r3, #3
 800973e:	d01b      	beq.n	8009778 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f002 fdf7 	bl	800c338 <SDMMC_CmdStopTransfer>
 800974a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800974c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974e:	2b00      	cmp	r3, #0
 8009750:	d012      	beq.n	8009778 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a3a      	ldr	r2, [pc, #232]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 8009758:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009760:	431a      	orrs	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e05f      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	f003 0308 	and.w	r3, r3, #8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d012      	beq.n	80097ac <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a2d      	ldr	r2, [pc, #180]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 800978c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	f043 0208 	orr.w	r2, r3, #8
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e045      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b2:	f003 0302 	and.w	r3, r3, #2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d012      	beq.n	80097e0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a20      	ldr	r2, [pc, #128]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	f043 0202 	orr.w	r2, r3, #2
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e02b      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	f003 0310 	and.w	r3, r3, #16
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d012      	beq.n	8009814 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a13      	ldr	r2, [pc, #76]	; (8009840 <HAL_SD_WriteBlocks+0x308>)
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f043 0210 	orr.w	r2, r3, #16
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e011      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f240 523a 	movw	r2, #1338	; 0x53a
 800981c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	e006      	b.n	8009838 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
  }
}
 8009838:	4618      	mov	r0, r3
 800983a:	3748      	adds	r7, #72	; 0x48
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	004005ff 	.word	0x004005ff

08009844 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009852:	0f9b      	lsrs	r3, r3, #30
 8009854:	b2da      	uxtb	r2, r3
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985e:	0e9b      	lsrs	r3, r3, #26
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	b2da      	uxtb	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009870:	0e1b      	lsrs	r3, r3, #24
 8009872:	b2db      	uxtb	r3, r3
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	b2da      	uxtb	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	b2da      	uxtb	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800989a:	b2da      	uxtb	r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098a4:	0d1b      	lsrs	r3, r3, #20
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	f003 030f 	and.w	r3, r3, #15
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098c2:	0bdb      	lsrs	r3, r3, #15
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	0b9b      	lsrs	r3, r3, #14
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e6:	0b5b      	lsrs	r3, r3, #13
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0301 	and.w	r3, r3, #1
 80098ee:	b2da      	uxtb	r2, r3
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098f8:	0b1b      	lsrs	r3, r3, #12
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	b2da      	uxtb	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2200      	movs	r2, #0
 800990a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009910:	2b00      	cmp	r3, #0
 8009912:	d163      	bne.n	80099dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009918:	009a      	lsls	r2, r3, #2
 800991a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800991e:	4013      	ands	r3, r2
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009924:	0f92      	lsrs	r2, r2, #30
 8009926:	431a      	orrs	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009930:	0edb      	lsrs	r3, r3, #27
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	b2da      	uxtb	r2, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009942:	0e1b      	lsrs	r3, r3, #24
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009954:	0d5b      	lsrs	r3, r3, #21
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 0307 	and.w	r3, r3, #7
 800995c:	b2da      	uxtb	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009966:	0c9b      	lsrs	r3, r3, #18
 8009968:	b2db      	uxtb	r3, r3
 800996a:	f003 0307 	and.w	r3, r3, #7
 800996e:	b2da      	uxtb	r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009978:	0bdb      	lsrs	r3, r3, #15
 800997a:	b2db      	uxtb	r3, r3
 800997c:	f003 0307 	and.w	r3, r3, #7
 8009980:	b2da      	uxtb	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	7e1b      	ldrb	r3, [r3, #24]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	3302      	adds	r3, #2
 800999c:	2201      	movs	r2, #1
 800999e:	fa02 f303 	lsl.w	r3, r2, r3
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80099a6:	fb03 f202 	mul.w	r2, r3, r2
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	7a1b      	ldrb	r3, [r3, #8]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 030f 	and.w	r3, r3, #15
 80099b8:	2201      	movs	r2, #1
 80099ba:	409a      	lsls	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80099c8:	0a52      	lsrs	r2, r2, #9
 80099ca:	fb03 f202 	mul.w	r2, r3, r2
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099d8:	661a      	str	r2, [r3, #96]	; 0x60
 80099da:	e031      	b.n	8009a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d11d      	bne.n	8009a20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e8:	041b      	lsls	r3, r3, #16
 80099ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f2:	0c1b      	lsrs	r3, r3, #16
 80099f4:	431a      	orrs	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	3301      	adds	r3, #1
 8009a00:	029a      	lsls	r2, r3, #10
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a14:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	661a      	str	r2, [r3, #96]	; 0x60
 8009a1e:	e00f      	b.n	8009a40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a58      	ldr	r2, [pc, #352]	; (8009b88 <HAL_SD_GetCardCSD+0x344>)
 8009a26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e09d      	b.n	8009b7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a44:	0b9b      	lsrs	r3, r3, #14
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a56:	09db      	lsrs	r3, r3, #7
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a78:	0fdb      	lsrs	r3, r3, #31
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a84:	0f5b      	lsrs	r3, r3, #29
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 0303 	and.w	r3, r3, #3
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a96:	0e9b      	lsrs	r3, r3, #26
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa8:	0d9b      	lsrs	r3, r3, #22
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aba:	0d5b      	lsrs	r3, r3, #21
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad6:	0c1b      	lsrs	r3, r3, #16
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	b2da      	uxtb	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aea:	0bdb      	lsrs	r3, r3, #15
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009afe:	0b9b      	lsrs	r3, r3, #14
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b12:	0b5b      	lsrs	r3, r3, #13
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b26:	0b1b      	lsrs	r3, r3, #12
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3a:	0a9b      	lsrs	r3, r3, #10
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	0a1b      	lsrs	r3, r3, #8
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	004005ff 	.word	0x004005ff

08009b8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009bf0:	f107 030c 	add.w	r3, r7, #12
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f970 	bl	8009edc <SD_SendStatus>
 8009bfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	0a5b      	lsrs	r3, r3, #9
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009c1a:	693b      	ldr	r3, [r7, #16]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b094      	sub	sp, #80	; 0x50
 8009c28:	af04      	add	r7, sp, #16
 8009c2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f002 fa50 	bl	800c0da <SDIO_GetPowerState>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009c44:	e0b8      	b.n	8009db8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d02f      	beq.n	8009cae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f002 fc37 	bl	800c4c6 <SDMMC_CmdSendCID>
 8009c58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <SD_InitCard+0x40>
    {
      return errorstate;
 8009c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c62:	e0a9      	b.n	8009db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f002 fa7a 	bl	800c164 <SDIO_GetResponse>
 8009c70:	4602      	mov	r2, r0
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2104      	movs	r1, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f002 fa71 	bl	800c164 <SDIO_GetResponse>
 8009c82:	4602      	mov	r2, r0
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2108      	movs	r1, #8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f002 fa68 	bl	800c164 <SDIO_GetResponse>
 8009c94:	4602      	mov	r2, r0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	210c      	movs	r1, #12
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f002 fa5f 	bl	800c164 <SDIO_GetResponse>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d00d      	beq.n	8009cd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f107 020e 	add.w	r2, r7, #14
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f002 fc3d 	bl	800c540 <SDMMC_CmdSetRelAdd>
 8009cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8009cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd0:	e072      	b.n	8009db8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d036      	beq.n	8009d48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009cda:	89fb      	ldrh	r3, [r7, #14]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cea:	041b      	lsls	r3, r3, #16
 8009cec:	4619      	mov	r1, r3
 8009cee:	4610      	mov	r0, r2
 8009cf0:	f002 fc07 	bl	800c502 <SDMMC_CmdSendCSD>
 8009cf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	e05b      	b.n	8009db8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f002 fa2c 	bl	800c164 <SDIO_GetResponse>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2104      	movs	r1, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f002 fa23 	bl	800c164 <SDIO_GetResponse>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2108      	movs	r1, #8
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 fa1a 	bl	800c164 <SDIO_GetResponse>
 8009d30:	4602      	mov	r2, r0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	210c      	movs	r1, #12
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f002 fa11 	bl	800c164 <SDIO_GetResponse>
 8009d42:	4602      	mov	r2, r0
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f002 fa08 	bl	800c164 <SDIO_GetResponse>
 8009d54:	4603      	mov	r3, r0
 8009d56:	0d1a      	lsrs	r2, r3, #20
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009d5c:	f107 0310 	add.w	r3, r7, #16
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fd6e 	bl	8009844 <HAL_SD_GetCardCSD>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d72:	e021      	b.n	8009db8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6819      	ldr	r1, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7c:	041b      	lsls	r3, r3, #16
 8009d7e:	2200      	movs	r2, #0
 8009d80:	461c      	mov	r4, r3
 8009d82:	4615      	mov	r5, r2
 8009d84:	4622      	mov	r2, r4
 8009d86:	462b      	mov	r3, r5
 8009d88:	4608      	mov	r0, r1
 8009d8a:	f002 faf7 	bl	800c37c <SDMMC_CmdSelDesel>
 8009d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <SD_InitCard+0x176>
  {
    return errorstate;
 8009d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d98:	e00e      	b.n	8009db8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681d      	ldr	r5, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	466c      	mov	r4, sp
 8009da2:	f103 0210 	add.w	r2, r3, #16
 8009da6:	ca07      	ldmia	r2, {r0, r1, r2}
 8009da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dac:	3304      	adds	r3, #4
 8009dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009db0:	4628      	mov	r0, r5
 8009db2:	f002 f93b 	bl	800c02c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3740      	adds	r7, #64	; 0x40
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bdb0      	pop	{r4, r5, r7, pc}

08009dc0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 faf2 	bl	800c3c2 <SDMMC_CmdGoIdleState>
 8009dde:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <SD_PowerON+0x2a>
  {
    return errorstate;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	e072      	b.n	8009ed0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fb05 	bl	800c3fe <SDMMC_CmdOperCond>
 8009df4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00d      	beq.n	8009e18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 fadb 	bl	800c3c2 <SDMMC_CmdGoIdleState>
 8009e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	e05b      	b.n	8009ed0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d137      	bne.n	8009e96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f002 fb05 	bl	800c43c <SDMMC_CmdAppCommand>
 8009e32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d02d      	beq.n	8009e96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e3e:	e047      	b.n	8009ed0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f002 faf8 	bl	800c43c <SDMMC_CmdAppCommand>
 8009e4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <SD_PowerON+0x98>
    {
      return errorstate;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	e03b      	b.n	8009ed0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	491e      	ldr	r1, [pc, #120]	; (8009ed8 <SD_PowerON+0x118>)
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f002 fb0e 	bl	800c480 <SDMMC_CmdAppOperCommand>
 8009e64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e70:	e02e      	b.n	8009ed0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f002 f973 	bl	800c164 <SDIO_GetResponse>
 8009e7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	0fdb      	lsrs	r3, r3, #31
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <SD_PowerON+0xcc>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <SD_PowerON+0xce>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]

    count++;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d802      	bhi.n	8009ea6 <SD_PowerON+0xe6>
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0cc      	beq.n	8009e40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d902      	bls.n	8009eb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009eb4:	e00c      	b.n	8009ed0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	645a      	str	r2, [r3, #68]	; 0x44
 8009ec6:	e002      	b.n	8009ece <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	c1100000 	.word	0xc1100000

08009edc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ef0:	e018      	b.n	8009f24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f002 fb3f 	bl	800c582 <SDMMC_CmdSendStatus>
 8009f04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	e009      	b.n	8009f24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2100      	movs	r1, #0
 8009f16:	4618      	mov	r0, r3
 8009f18:	f002 f924 	bl	800c164 <SDIO_GetResponse>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e07b      	b.n	800a036 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d108      	bne.n	8009f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f4e:	d009      	beq.n	8009f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	61da      	str	r2, [r3, #28]
 8009f56:	e005      	b.n	8009f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7fa fb6c 	bl	800465c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe8:	ea42 0103 	orr.w	r1, r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	f003 0104 	and.w	r1, r3, #4
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	f003 0210 	and.w	r2, r3, #16
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	69da      	ldr	r2, [r3, #28]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b088      	sub	sp, #32
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4613      	mov	r3, r2
 800a04c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_SPI_Transmit+0x22>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e126      	b.n	800a2ae <HAL_SPI_Transmit+0x270>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a068:	f7fc fb9e 	bl	80067a8 <HAL_GetTick>
 800a06c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a06e:	88fb      	ldrh	r3, [r7, #6]
 800a070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d002      	beq.n	800a084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a07e:	2302      	movs	r3, #2
 800a080:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a082:	e10b      	b.n	800a29c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <HAL_SPI_Transmit+0x52>
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a094:	e102      	b.n	800a29c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2203      	movs	r2, #3
 800a09a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	88fa      	ldrh	r2, [r7, #6]
 800a0ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0dc:	d10f      	bne.n	800a0fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a108:	2b40      	cmp	r3, #64	; 0x40
 800a10a:	d007      	beq.n	800a11c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a11a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a124:	d14b      	bne.n	800a1be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <HAL_SPI_Transmit+0xf6>
 800a12e:	8afb      	ldrh	r3, [r7, #22]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d13e      	bne.n	800a1b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a138:	881a      	ldrh	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a144:	1c9a      	adds	r2, r3, #2
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a158:	e02b      	b.n	800a1b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b02      	cmp	r3, #2
 800a166:	d112      	bne.n	800a18e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16c:	881a      	ldrh	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a178:	1c9a      	adds	r2, r3, #2
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	86da      	strh	r2, [r3, #54]	; 0x36
 800a18c:	e011      	b.n	800a1b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a18e:	f7fc fb0b 	bl	80067a8 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d803      	bhi.n	800a1a6 <HAL_SPI_Transmit+0x168>
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a4:	d102      	bne.n	800a1ac <HAL_SPI_Transmit+0x16e>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a1b0:	e074      	b.n	800a29c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1ce      	bne.n	800a15a <HAL_SPI_Transmit+0x11c>
 800a1bc:	e04c      	b.n	800a258 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <HAL_SPI_Transmit+0x18e>
 800a1c6:	8afb      	ldrh	r3, [r7, #22]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d140      	bne.n	800a24e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	7812      	ldrb	r2, [r2, #0]
 800a1d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a1f2:	e02c      	b.n	800a24e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d113      	bne.n	800a22a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	330c      	adds	r3, #12
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a21e:	b29b      	uxth	r3, r3
 800a220:	3b01      	subs	r3, #1
 800a222:	b29a      	uxth	r2, r3
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	86da      	strh	r2, [r3, #54]	; 0x36
 800a228:	e011      	b.n	800a24e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a22a:	f7fc fabd 	bl	80067a8 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d803      	bhi.n	800a242 <HAL_SPI_Transmit+0x204>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d102      	bne.n	800a248 <HAL_SPI_Transmit+0x20a>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a24c:	e026      	b.n	800a29c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1cd      	bne.n	800a1f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f8b3 	bl	800a3c8 <SPI_EndRxTxTransaction>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10a      	bne.n	800a28c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	613b      	str	r3, [r7, #16]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e000      	b.n	800a29c <HAL_SPI_Transmit+0x25e>
  }

error:
 800a29a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a2ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2c8:	f7fc fa6e 	bl	80067a8 <HAL_GetTick>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a2d8:	f7fc fa66 	bl	80067a8 <HAL_GetTick>
 800a2dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a2de:	4b39      	ldr	r3, [pc, #228]	; (800a3c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	015b      	lsls	r3, r3, #5
 800a2e4:	0d1b      	lsrs	r3, r3, #20
 800a2e6:	69fa      	ldr	r2, [r7, #28]
 800a2e8:	fb02 f303 	mul.w	r3, r2, r3
 800a2ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ee:	e054      	b.n	800a39a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f6:	d050      	beq.n	800a39a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a2f8:	f7fc fa56 	bl	80067a8 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	429a      	cmp	r2, r3
 800a306:	d902      	bls.n	800a30e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d13d      	bne.n	800a38a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a31c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a326:	d111      	bne.n	800a34c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a330:	d004      	beq.n	800a33c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a33a:	d107      	bne.n	800a34c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a34a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a354:	d10f      	bne.n	800a376 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e017      	b.n	800a3ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	3b01      	subs	r3, #1
 800a398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	bf0c      	ite	eq
 800a3aa:	2301      	moveq	r3, #1
 800a3ac:	2300      	movne	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d19b      	bne.n	800a2f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20000094 	.word	0x20000094

0800a3c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a3d4:	4b1b      	ldr	r3, [pc, #108]	; (800a444 <SPI_EndRxTxTransaction+0x7c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a1b      	ldr	r2, [pc, #108]	; (800a448 <SPI_EndRxTxTransaction+0x80>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	0d5b      	lsrs	r3, r3, #21
 800a3e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3e4:	fb02 f303 	mul.w	r3, r2, r3
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3f2:	d112      	bne.n	800a41a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2180      	movs	r1, #128	; 0x80
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7ff ff5a 	bl	800a2b8 <SPI_WaitFlagStateUntilTimeout>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d016      	beq.n	800a438 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	f043 0220 	orr.w	r2, r3, #32
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e00f      	b.n	800a43a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	3b01      	subs	r3, #1
 800a424:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a430:	2b80      	cmp	r3, #128	; 0x80
 800a432:	d0f2      	beq.n	800a41a <SPI_EndRxTxTransaction+0x52>
 800a434:	e000      	b.n	800a438 <SPI_EndRxTxTransaction+0x70>
        break;
 800a436:	bf00      	nop
  }

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3718      	adds	r7, #24
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000094 	.word	0x20000094
 800a448:	165e9f81 	.word	0x165e9f81

0800a44c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e041      	b.n	800a4e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a464:	b2db      	uxtb	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d106      	bne.n	800a478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7fa fda4 	bl	8004fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2202      	movs	r2, #2
 800a47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3304      	adds	r3, #4
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f000 fca8 	bl	800ade0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d001      	beq.n	800a504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e04e      	b.n	800a5a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a23      	ldr	r2, [pc, #140]	; (800a5b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d022      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52e:	d01d      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a1f      	ldr	r2, [pc, #124]	; (800a5b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d018      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a1e      	ldr	r2, [pc, #120]	; (800a5b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d013      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <HAL_TIM_Base_Start_IT+0xd0>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00e      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a1b      	ldr	r2, [pc, #108]	; (800a5c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d009      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a19      	ldr	r2, [pc, #100]	; (800a5c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d004      	beq.n	800a56c <HAL_TIM_Base_Start_IT+0x80>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a18      	ldr	r2, [pc, #96]	; (800a5c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d111      	bne.n	800a590 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b06      	cmp	r3, #6
 800a57c:	d010      	beq.n	800a5a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a58e:	e007      	b.n	800a5a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0201 	orr.w	r2, r2, #1
 800a59e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40010000 	.word	0x40010000
 800a5b4:	40000400 	.word	0x40000400
 800a5b8:	40000800 	.word	0x40000800
 800a5bc:	40000c00 	.word	0x40000c00
 800a5c0:	40010400 	.word	0x40010400
 800a5c4:	40014000 	.word	0x40014000
 800a5c8:	40001800 	.word	0x40001800

0800a5cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f022 0201 	bic.w	r2, r2, #1
 800a5e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6a1a      	ldr	r2, [r3, #32]
 800a5ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10f      	bne.n	800a614 <HAL_TIM_Base_Stop_IT+0x48>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	f240 4344 	movw	r3, #1092	; 0x444
 800a5fe:	4013      	ands	r3, r2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d107      	bne.n	800a614 <HAL_TIM_Base_Stop_IT+0x48>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f022 0201 	bic.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e041      	b.n	800a6c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d106      	bne.n	800a656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f839 	bl	800a6c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2202      	movs	r2, #2
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f000 fbb9 	bl	800ade0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d109      	bne.n	800a700 <HAL_TIM_PWM_Start+0x24>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	bf14      	ite	ne
 800a6f8:	2301      	movne	r3, #1
 800a6fa:	2300      	moveq	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	e022      	b.n	800a746 <HAL_TIM_PWM_Start+0x6a>
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b04      	cmp	r3, #4
 800a704:	d109      	bne.n	800a71a <HAL_TIM_PWM_Start+0x3e>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b01      	cmp	r3, #1
 800a710:	bf14      	ite	ne
 800a712:	2301      	movne	r3, #1
 800a714:	2300      	moveq	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	e015      	b.n	800a746 <HAL_TIM_PWM_Start+0x6a>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d109      	bne.n	800a734 <HAL_TIM_PWM_Start+0x58>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	bf14      	ite	ne
 800a72c:	2301      	movne	r3, #1
 800a72e:	2300      	moveq	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	e008      	b.n	800a746 <HAL_TIM_PWM_Start+0x6a>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	bf14      	ite	ne
 800a740:	2301      	movne	r3, #1
 800a742:	2300      	moveq	r3, #0
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e07c      	b.n	800a848 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d104      	bne.n	800a75e <HAL_TIM_PWM_Start+0x82>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a75c:	e013      	b.n	800a786 <HAL_TIM_PWM_Start+0xaa>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b04      	cmp	r3, #4
 800a762:	d104      	bne.n	800a76e <HAL_TIM_PWM_Start+0x92>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a76c:	e00b      	b.n	800a786 <HAL_TIM_PWM_Start+0xaa>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b08      	cmp	r3, #8
 800a772:	d104      	bne.n	800a77e <HAL_TIM_PWM_Start+0xa2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a77c:	e003      	b.n	800a786 <HAL_TIM_PWM_Start+0xaa>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2202      	movs	r2, #2
 800a782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2201      	movs	r2, #1
 800a78c:	6839      	ldr	r1, [r7, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fe10 	bl	800b3b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a2d      	ldr	r2, [pc, #180]	; (800a850 <HAL_TIM_PWM_Start+0x174>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d004      	beq.n	800a7a8 <HAL_TIM_PWM_Start+0xcc>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a2c      	ldr	r2, [pc, #176]	; (800a854 <HAL_TIM_PWM_Start+0x178>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d101      	bne.n	800a7ac <HAL_TIM_PWM_Start+0xd0>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <HAL_TIM_PWM_Start+0xd2>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a22      	ldr	r2, [pc, #136]	; (800a850 <HAL_TIM_PWM_Start+0x174>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d022      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d01d      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a1f      	ldr	r2, [pc, #124]	; (800a858 <HAL_TIM_PWM_Start+0x17c>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d018      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a1d      	ldr	r2, [pc, #116]	; (800a85c <HAL_TIM_PWM_Start+0x180>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a1c      	ldr	r2, [pc, #112]	; (800a860 <HAL_TIM_PWM_Start+0x184>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00e      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a16      	ldr	r2, [pc, #88]	; (800a854 <HAL_TIM_PWM_Start+0x178>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d009      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a18      	ldr	r2, [pc, #96]	; (800a864 <HAL_TIM_PWM_Start+0x188>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d004      	beq.n	800a812 <HAL_TIM_PWM_Start+0x136>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a16      	ldr	r2, [pc, #88]	; (800a868 <HAL_TIM_PWM_Start+0x18c>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d111      	bne.n	800a836 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2b06      	cmp	r3, #6
 800a822:	d010      	beq.n	800a846 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f042 0201 	orr.w	r2, r2, #1
 800a832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a834:	e007      	b.n	800a846 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0201 	orr.w	r2, r2, #1
 800a844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	40010000 	.word	0x40010000
 800a854:	40010400 	.word	0x40010400
 800a858:	40000400 	.word	0x40000400
 800a85c:	40000800 	.word	0x40000800
 800a860:	40000c00 	.word	0x40000c00
 800a864:	40014000 	.word	0x40014000
 800a868:	40001800 	.word	0x40001800

0800a86c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d122      	bne.n	800a8c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d11b      	bne.n	800a8c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f06f 0202 	mvn.w	r2, #2
 800a898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa77 	bl	800ada2 <HAL_TIM_IC_CaptureCallback>
 800a8b4:	e005      	b.n	800a8c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 fa69 	bl	800ad8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fa7a 	bl	800adb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f003 0304 	and.w	r3, r3, #4
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	d122      	bne.n	800a91c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d11b      	bne.n	800a91c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f06f 0204 	mvn.w	r2, #4
 800a8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa4d 	bl	800ada2 <HAL_TIM_IC_CaptureCallback>
 800a908:	e005      	b.n	800a916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 fa3f 	bl	800ad8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fa50 	bl	800adb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0308 	and.w	r3, r3, #8
 800a926:	2b08      	cmp	r3, #8
 800a928:	d122      	bne.n	800a970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b08      	cmp	r3, #8
 800a936:	d11b      	bne.n	800a970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f06f 0208 	mvn.w	r2, #8
 800a940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2204      	movs	r2, #4
 800a946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 fa23 	bl	800ada2 <HAL_TIM_IC_CaptureCallback>
 800a95c:	e005      	b.n	800a96a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa15 	bl	800ad8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fa26 	bl	800adb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0310 	and.w	r3, r3, #16
 800a97a:	2b10      	cmp	r3, #16
 800a97c:	d122      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0310 	and.w	r3, r3, #16
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d11b      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0210 	mvn.w	r2, #16
 800a994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2208      	movs	r2, #8
 800a99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f9f9 	bl	800ada2 <HAL_TIM_IC_CaptureCallback>
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f9eb 	bl	800ad8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f9fc 	bl	800adb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d10e      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d107      	bne.n	800a9f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0201 	mvn.w	r2, #1
 800a9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7f9 fc36 	bl	800425c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fa:	2b80      	cmp	r3, #128	; 0x80
 800a9fc:	d10e      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa08:	2b80      	cmp	r3, #128	; 0x80
 800aa0a:	d107      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fdca 	bl	800b5b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa26:	2b40      	cmp	r3, #64	; 0x40
 800aa28:	d10e      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa34:	2b40      	cmp	r3, #64	; 0x40
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f9c1 	bl	800adca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b20      	cmp	r3, #32
 800aa54:	d10e      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b20      	cmp	r3, #32
 800aa62:	d107      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0220 	mvn.w	r2, #32
 800aa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fd94 	bl	800b59c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d101      	bne.n	800aa9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa96:	2302      	movs	r3, #2
 800aa98:	e0ae      	b.n	800abf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b0c      	cmp	r3, #12
 800aaa6:	f200 809f 	bhi.w	800abe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aaaa:	a201      	add	r2, pc, #4	; (adr r2, 800aab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800aae5 	.word	0x0800aae5
 800aab4:	0800abe9 	.word	0x0800abe9
 800aab8:	0800abe9 	.word	0x0800abe9
 800aabc:	0800abe9 	.word	0x0800abe9
 800aac0:	0800ab25 	.word	0x0800ab25
 800aac4:	0800abe9 	.word	0x0800abe9
 800aac8:	0800abe9 	.word	0x0800abe9
 800aacc:	0800abe9 	.word	0x0800abe9
 800aad0:	0800ab67 	.word	0x0800ab67
 800aad4:	0800abe9 	.word	0x0800abe9
 800aad8:	0800abe9 	.word	0x0800abe9
 800aadc:	0800abe9 	.word	0x0800abe9
 800aae0:	0800aba7 	.word	0x0800aba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fa18 	bl	800af20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f042 0208 	orr.w	r2, r2, #8
 800aafe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0204 	bic.w	r2, r2, #4
 800ab0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6999      	ldr	r1, [r3, #24]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	619a      	str	r2, [r3, #24]
      break;
 800ab22:	e064      	b.n	800abee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 fa68 	bl	800b000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	699a      	ldr	r2, [r3, #24]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6999      	ldr	r1, [r3, #24]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	021a      	lsls	r2, r3, #8
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	619a      	str	r2, [r3, #24]
      break;
 800ab64:	e043      	b.n	800abee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68b9      	ldr	r1, [r7, #8]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fabd 	bl	800b0ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f042 0208 	orr.w	r2, r2, #8
 800ab80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69da      	ldr	r2, [r3, #28]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0204 	bic.w	r2, r2, #4
 800ab90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69d9      	ldr	r1, [r3, #28]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691a      	ldr	r2, [r3, #16]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	61da      	str	r2, [r3, #28]
      break;
 800aba4:	e023      	b.n	800abee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fb11 	bl	800b1d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69da      	ldr	r2, [r3, #28]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	69da      	ldr	r2, [r3, #28]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	69d9      	ldr	r1, [r3, #28]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	021a      	lsls	r2, r3, #8
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	61da      	str	r2, [r3, #28]
      break;
 800abe6:	e002      	b.n	800abee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	75fb      	strb	r3, [r7, #23]
      break;
 800abec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d101      	bne.n	800ac1c <HAL_TIM_ConfigClockSource+0x1c>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	e0b4      	b.n	800ad86 <HAL_TIM_ConfigClockSource+0x186>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac54:	d03e      	beq.n	800acd4 <HAL_TIM_ConfigClockSource+0xd4>
 800ac56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac5a:	f200 8087 	bhi.w	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac62:	f000 8086 	beq.w	800ad72 <HAL_TIM_ConfigClockSource+0x172>
 800ac66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6a:	d87f      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac6c:	2b70      	cmp	r3, #112	; 0x70
 800ac6e:	d01a      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0xa6>
 800ac70:	2b70      	cmp	r3, #112	; 0x70
 800ac72:	d87b      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac74:	2b60      	cmp	r3, #96	; 0x60
 800ac76:	d050      	beq.n	800ad1a <HAL_TIM_ConfigClockSource+0x11a>
 800ac78:	2b60      	cmp	r3, #96	; 0x60
 800ac7a:	d877      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac7c:	2b50      	cmp	r3, #80	; 0x50
 800ac7e:	d03c      	beq.n	800acfa <HAL_TIM_ConfigClockSource+0xfa>
 800ac80:	2b50      	cmp	r3, #80	; 0x50
 800ac82:	d873      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	d058      	beq.n	800ad3a <HAL_TIM_ConfigClockSource+0x13a>
 800ac88:	2b40      	cmp	r3, #64	; 0x40
 800ac8a:	d86f      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac8c:	2b30      	cmp	r3, #48	; 0x30
 800ac8e:	d064      	beq.n	800ad5a <HAL_TIM_ConfigClockSource+0x15a>
 800ac90:	2b30      	cmp	r3, #48	; 0x30
 800ac92:	d86b      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d060      	beq.n	800ad5a <HAL_TIM_ConfigClockSource+0x15a>
 800ac98:	2b20      	cmp	r3, #32
 800ac9a:	d867      	bhi.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d05c      	beq.n	800ad5a <HAL_TIM_ConfigClockSource+0x15a>
 800aca0:	2b10      	cmp	r3, #16
 800aca2:	d05a      	beq.n	800ad5a <HAL_TIM_ConfigClockSource+0x15a>
 800aca4:	e062      	b.n	800ad6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	6899      	ldr	r1, [r3, #8]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f000 fb5d 	bl	800b374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	609a      	str	r2, [r3, #8]
      break;
 800acd2:	e04f      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6899      	ldr	r1, [r3, #8]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f000 fb46 	bl	800b374 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689a      	ldr	r2, [r3, #8]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acf6:	609a      	str	r2, [r3, #8]
      break;
 800acf8:	e03c      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6818      	ldr	r0, [r3, #0]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	6859      	ldr	r1, [r3, #4]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f000 faba 	bl	800b280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2150      	movs	r1, #80	; 0x50
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fb13 	bl	800b33e <TIM_ITRx_SetConfig>
      break;
 800ad18:	e02c      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6818      	ldr	r0, [r3, #0]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	6859      	ldr	r1, [r3, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f000 fad9 	bl	800b2de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2160      	movs	r1, #96	; 0x60
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 fb03 	bl	800b33e <TIM_ITRx_SetConfig>
      break;
 800ad38:	e01c      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	6859      	ldr	r1, [r3, #4]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f000 fa9a 	bl	800b280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2140      	movs	r1, #64	; 0x40
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 faf3 	bl	800b33e <TIM_ITRx_SetConfig>
      break;
 800ad58:	e00c      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f000 faea 	bl	800b33e <TIM_ITRx_SetConfig>
      break;
 800ad6a:	e003      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad70:	e000      	b.n	800ad74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad96:	bf00      	nop
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adbe:	bf00      	nop
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800add2:	bf00      	nop
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a40      	ldr	r2, [pc, #256]	; (800aef4 <TIM_Base_SetConfig+0x114>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d013      	beq.n	800ae20 <TIM_Base_SetConfig+0x40>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adfe:	d00f      	beq.n	800ae20 <TIM_Base_SetConfig+0x40>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a3d      	ldr	r2, [pc, #244]	; (800aef8 <TIM_Base_SetConfig+0x118>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_Base_SetConfig+0x40>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a3c      	ldr	r2, [pc, #240]	; (800aefc <TIM_Base_SetConfig+0x11c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_Base_SetConfig+0x40>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a3b      	ldr	r2, [pc, #236]	; (800af00 <TIM_Base_SetConfig+0x120>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_Base_SetConfig+0x40>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a3a      	ldr	r2, [pc, #232]	; (800af04 <TIM_Base_SetConfig+0x124>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d108      	bne.n	800ae32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a2f      	ldr	r2, [pc, #188]	; (800aef4 <TIM_Base_SetConfig+0x114>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d02b      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae40:	d027      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a2c      	ldr	r2, [pc, #176]	; (800aef8 <TIM_Base_SetConfig+0x118>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d023      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a2b      	ldr	r2, [pc, #172]	; (800aefc <TIM_Base_SetConfig+0x11c>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d01f      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a2a      	ldr	r2, [pc, #168]	; (800af00 <TIM_Base_SetConfig+0x120>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d01b      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a29      	ldr	r2, [pc, #164]	; (800af04 <TIM_Base_SetConfig+0x124>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d017      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a28      	ldr	r2, [pc, #160]	; (800af08 <TIM_Base_SetConfig+0x128>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d013      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a27      	ldr	r2, [pc, #156]	; (800af0c <TIM_Base_SetConfig+0x12c>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d00f      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a26      	ldr	r2, [pc, #152]	; (800af10 <TIM_Base_SetConfig+0x130>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00b      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a25      	ldr	r2, [pc, #148]	; (800af14 <TIM_Base_SetConfig+0x134>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d007      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a24      	ldr	r2, [pc, #144]	; (800af18 <TIM_Base_SetConfig+0x138>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <TIM_Base_SetConfig+0xb2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a23      	ldr	r2, [pc, #140]	; (800af1c <TIM_Base_SetConfig+0x13c>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d108      	bne.n	800aea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a0a      	ldr	r2, [pc, #40]	; (800aef4 <TIM_Base_SetConfig+0x114>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_Base_SetConfig+0xf8>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a0c      	ldr	r2, [pc, #48]	; (800af04 <TIM_Base_SetConfig+0x124>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d103      	bne.n	800aee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	615a      	str	r2, [r3, #20]
}
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40000400 	.word	0x40000400
 800aefc:	40000800 	.word	0x40000800
 800af00:	40000c00 	.word	0x40000c00
 800af04:	40010400 	.word	0x40010400
 800af08:	40014000 	.word	0x40014000
 800af0c:	40014400 	.word	0x40014400
 800af10:	40014800 	.word	0x40014800
 800af14:	40001800 	.word	0x40001800
 800af18:	40001c00 	.word	0x40001c00
 800af1c:	40002000 	.word	0x40002000

0800af20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f023 0201 	bic.w	r2, r3, #1
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f023 0303 	bic.w	r3, r3, #3
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f023 0302 	bic.w	r3, r3, #2
 800af68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a20      	ldr	r2, [pc, #128]	; (800aff8 <TIM_OC1_SetConfig+0xd8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d003      	beq.n	800af84 <TIM_OC1_SetConfig+0x64>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a1f      	ldr	r2, [pc, #124]	; (800affc <TIM_OC1_SetConfig+0xdc>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d10c      	bne.n	800af9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f023 0308 	bic.w	r3, r3, #8
 800af8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	4313      	orrs	r3, r2
 800af94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f023 0304 	bic.w	r3, r3, #4
 800af9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a15      	ldr	r2, [pc, #84]	; (800aff8 <TIM_OC1_SetConfig+0xd8>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d003      	beq.n	800afae <TIM_OC1_SetConfig+0x8e>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a14      	ldr	r2, [pc, #80]	; (800affc <TIM_OC1_SetConfig+0xdc>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d111      	bne.n	800afd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	4313      	orrs	r3, r2
 800afd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	621a      	str	r2, [r3, #32]
}
 800afec:	bf00      	nop
 800afee:	371c      	adds	r7, #28
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	40010000 	.word	0x40010000
 800affc:	40010400 	.word	0x40010400

0800b000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	f023 0210 	bic.w	r2, r3, #16
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f023 0320 	bic.w	r3, r3, #32
 800b04a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a22      	ldr	r2, [pc, #136]	; (800b0e4 <TIM_OC2_SetConfig+0xe4>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_OC2_SetConfig+0x68>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a21      	ldr	r2, [pc, #132]	; (800b0e8 <TIM_OC2_SetConfig+0xe8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10d      	bne.n	800b084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a17      	ldr	r2, [pc, #92]	; (800b0e4 <TIM_OC2_SetConfig+0xe4>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d003      	beq.n	800b094 <TIM_OC2_SetConfig+0x94>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a16      	ldr	r2, [pc, #88]	; (800b0e8 <TIM_OC2_SetConfig+0xe8>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d113      	bne.n	800b0bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b09a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	695b      	ldr	r3, [r3, #20]
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	621a      	str	r2, [r3, #32]
}
 800b0d6:	bf00      	nop
 800b0d8:	371c      	adds	r7, #28
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	40010400 	.word	0x40010400

0800b0ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0303 	bic.w	r3, r3, #3
 800b122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	4313      	orrs	r3, r2
 800b140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a21      	ldr	r2, [pc, #132]	; (800b1cc <TIM_OC3_SetConfig+0xe0>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC3_SetConfig+0x66>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a20      	ldr	r2, [pc, #128]	; (800b1d0 <TIM_OC3_SetConfig+0xe4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d10d      	bne.n	800b16e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	697a      	ldr	r2, [r7, #20]
 800b162:	4313      	orrs	r3, r2
 800b164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b16c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a16      	ldr	r2, [pc, #88]	; (800b1cc <TIM_OC3_SetConfig+0xe0>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d003      	beq.n	800b17e <TIM_OC3_SetConfig+0x92>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a15      	ldr	r2, [pc, #84]	; (800b1d0 <TIM_OC3_SetConfig+0xe4>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d113      	bne.n	800b1a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b18c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4313      	orrs	r3, r2
 800b198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	621a      	str	r2, [r3, #32]
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	40010000 	.word	0x40010000
 800b1d0:	40010400 	.word	0x40010400

0800b1d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	031b      	lsls	r3, r3, #12
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a12      	ldr	r2, [pc, #72]	; (800b278 <TIM_OC4_SetConfig+0xa4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d003      	beq.n	800b23c <TIM_OC4_SetConfig+0x68>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a11      	ldr	r2, [pc, #68]	; (800b27c <TIM_OC4_SetConfig+0xa8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d109      	bne.n	800b250 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	019b      	lsls	r3, r3, #6
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	621a      	str	r2, [r3, #32]
}
 800b26a:	bf00      	nop
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	40010000 	.word	0x40010000
 800b27c:	40010400 	.word	0x40010400

0800b280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	f023 0201 	bic.w	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f023 030a 	bic.w	r3, r3, #10
 800b2bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b087      	sub	sp, #28
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	f023 0210 	bic.w	r2, r3, #16
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	031b      	lsls	r3, r3, #12
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	4313      	orrs	r3, r2
 800b312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b31a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	011b      	lsls	r3, r3, #4
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	4313      	orrs	r3, r2
 800b324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	621a      	str	r2, [r3, #32]
}
 800b332:	bf00      	nop
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b33e:	b480      	push	{r7}
 800b340:	b085      	sub	sp, #20
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	f043 0307 	orr.w	r3, r3, #7
 800b360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	609a      	str	r2, [r3, #8]
}
 800b368:	bf00      	nop
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b374:	b480      	push	{r7}
 800b376:	b087      	sub	sp, #28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b38e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	021a      	lsls	r2, r3, #8
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	431a      	orrs	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	609a      	str	r2, [r3, #8]
}
 800b3a8:	bf00      	nop
 800b3aa:	371c      	adds	r7, #28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f003 031f 	and.w	r3, r3, #31
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6a1a      	ldr	r2, [r3, #32]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	401a      	ands	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6a1a      	ldr	r2, [r3, #32]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	621a      	str	r2, [r3, #32]
}
 800b3f2:	bf00      	nop
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
	...

0800b400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b414:	2302      	movs	r3, #2
 800b416:	e05a      	b.n	800b4ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b43e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4313      	orrs	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a21      	ldr	r2, [pc, #132]	; (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d022      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b464:	d01d      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a1d      	ldr	r2, [pc, #116]	; (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d018      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a1b      	ldr	r2, [pc, #108]	; (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d013      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a1a      	ldr	r2, [pc, #104]	; (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00e      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a18      	ldr	r2, [pc, #96]	; (800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d009      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a17      	ldr	r2, [pc, #92]	; (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d004      	beq.n	800b4a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a15      	ldr	r2, [pc, #84]	; (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d10c      	bne.n	800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	40010000 	.word	0x40010000
 800b4e0:	40000400 	.word	0x40000400
 800b4e4:	40000800 	.word	0x40000800
 800b4e8:	40000c00 	.word	0x40000c00
 800b4ec:	40010400 	.word	0x40010400
 800b4f0:	40014000 	.word	0x40014000
 800b4f4:	40001800 	.word	0x40001800

0800b4f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b510:	2302      	movs	r3, #2
 800b512:	e03d      	b.n	800b590 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	4313      	orrs	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	4313      	orrs	r3, r2
 800b560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	4313      	orrs	r3, r2
 800b56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d101      	bne.n	800b5d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e03f      	b.n	800b656 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d106      	bne.n	800b5f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7f9 fe40 	bl	8005270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2224      	movs	r2, #36	; 0x24
 800b5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fa9b 	bl	800bb44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b61c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	695a      	ldr	r2, [r3, #20]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b62c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68da      	ldr	r2, [r3, #12]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b63c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2220      	movs	r2, #32
 800b648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	4613      	mov	r3, r2
 800b66a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b20      	cmp	r3, #32
 800b676:	d11d      	bne.n	800b6b4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <HAL_UART_Receive_DMA+0x26>
 800b67e:	88fb      	ldrh	r3, [r7, #6]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e016      	b.n	800b6b6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <HAL_UART_Receive_DMA+0x38>
 800b692:	2302      	movs	r3, #2
 800b694:	e00f      	b.n	800b6b6 <HAL_UART_Receive_DMA+0x58>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b6a4:	88fb      	ldrh	r3, [r7, #6]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f920 	bl	800b8f0 <UART_Start_Receive_DMA>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	e000      	b.n	800b6b6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b6b4:	2302      	movs	r3, #2
  }
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6f2:	bf00      	nop
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b09c      	sub	sp, #112	; 0x70
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b716:	2b00      	cmp	r3, #0
 800b718:	d172      	bne.n	800b800 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71c:	2200      	movs	r2, #0
 800b71e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	330c      	adds	r3, #12
 800b726:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b736:	66bb      	str	r3, [r7, #104]	; 0x68
 800b738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	330c      	adds	r3, #12
 800b73e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b740:	65ba      	str	r2, [r7, #88]	; 0x58
 800b742:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e5      	bne.n	800b720 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3314      	adds	r3, #20
 800b75a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b766:	f023 0301 	bic.w	r3, r3, #1
 800b76a:	667b      	str	r3, [r7, #100]	; 0x64
 800b76c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3314      	adds	r3, #20
 800b772:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b774:	647a      	str	r2, [r7, #68]	; 0x44
 800b776:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b77a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e5      	bne.n	800b754 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3314      	adds	r3, #20
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	623b      	str	r3, [r7, #32]
   return(result);
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b79e:	663b      	str	r3, [r7, #96]	; 0x60
 800b7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	3314      	adds	r3, #20
 800b7a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7a8:	633a      	str	r2, [r7, #48]	; 0x30
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e5      	bne.n	800b788 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7be:	2220      	movs	r2, #32
 800b7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d119      	bne.n	800b800 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	330c      	adds	r3, #12
 800b7d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	e853 3f00 	ldrex	r3, [r3]
 800b7da:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f023 0310 	bic.w	r3, r3, #16
 800b7e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	330c      	adds	r3, #12
 800b7ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7ec:	61fa      	str	r2, [r7, #28]
 800b7ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f0:	69b9      	ldr	r1, [r7, #24]
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	e841 2300 	strex	r3, r2, [r1]
 800b7f8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e5      	bne.n	800b7cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b804:	2b01      	cmp	r3, #1
 800b806:	d106      	bne.n	800b816 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b80a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b80c:	4619      	mov	r1, r3
 800b80e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b810:	f7ff ff69 	bl	800b6e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b814:	e002      	b.n	800b81c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b816:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b818:	f7f8 fde4 	bl	80043e4 <HAL_UART_RxCpltCallback>
}
 800b81c:	bf00      	nop
 800b81e:	3770      	adds	r7, #112	; 0x70
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b836:	2b01      	cmp	r3, #1
 800b838:	d108      	bne.n	800b84c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	b29b      	uxth	r3, r3
 800b842:	4619      	mov	r1, r3
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ff4e 	bl	800b6e6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b84a:	e002      	b.n	800b852 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff ff36 	bl	800b6be <HAL_UART_RxHalfCpltCallback>
}
 800b852:	bf00      	nop
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b876:	2b80      	cmp	r3, #128	; 0x80
 800b878:	bf0c      	ite	eq
 800b87a:	2301      	moveq	r3, #1
 800b87c:	2300      	movne	r3, #0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b21      	cmp	r3, #33	; 0x21
 800b88c:	d108      	bne.n	800b8a0 <UART_DMAError+0x46>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d005      	beq.n	800b8a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2200      	movs	r2, #0
 800b898:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b89a:	68b8      	ldr	r0, [r7, #8]
 800b89c:	f000 f8c6 	bl	800ba2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8aa:	2b40      	cmp	r3, #64	; 0x40
 800b8ac:	bf0c      	ite	eq
 800b8ae:	2301      	moveq	r3, #1
 800b8b0:	2300      	movne	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b22      	cmp	r3, #34	; 0x22
 800b8c0:	d108      	bne.n	800b8d4 <UART_DMAError+0x7a>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d005      	beq.n	800b8d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8ce:	68b8      	ldr	r0, [r7, #8]
 800b8d0:	f000 f8d4 	bl	800ba7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d8:	f043 0210 	orr.w	r2, r3, #16
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8e0:	68b8      	ldr	r0, [r7, #8]
 800b8e2:	f7ff fef6 	bl	800b6d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b098      	sub	sp, #96	; 0x60
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	88fa      	ldrh	r2, [r7, #6]
 800b908:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2222      	movs	r2, #34	; 0x22
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	4a40      	ldr	r2, [pc, #256]	; (800ba20 <UART_Start_Receive_DMA+0x130>)
 800b91e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	4a3f      	ldr	r2, [pc, #252]	; (800ba24 <UART_Start_Receive_DMA+0x134>)
 800b926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92c:	4a3e      	ldr	r2, [pc, #248]	; (800ba28 <UART_Start_Receive_DMA+0x138>)
 800b92e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b934:	2200      	movs	r2, #0
 800b936:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	f7fb f86b 	bl	8006a2a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b954:	2300      	movs	r3, #0
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	613b      	str	r3, [r7, #16]
 800b968:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d019      	beq.n	800b9ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	330c      	adds	r3, #12
 800b980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b990:	65bb      	str	r3, [r7, #88]	; 0x58
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b99a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b99c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b9a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9a2:	e841 2300 	strex	r3, r2, [r1]
 800b9a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e5      	bne.n	800b97a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3314      	adds	r3, #20
 800b9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c0:	f043 0301 	orr.w	r3, r3, #1
 800b9c4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3314      	adds	r3, #20
 800b9cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9ce:	63ba      	str	r2, [r7, #56]	; 0x38
 800b9d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e5      	bne.n	800b9ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3314      	adds	r3, #20
 800b9e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	e853 3f00 	ldrex	r3, [r3]
 800b9f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3314      	adds	r3, #20
 800ba00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba02:	627a      	str	r2, [r7, #36]	; 0x24
 800ba04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	6a39      	ldr	r1, [r7, #32]
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	e841 2300 	strex	r3, r2, [r1]
 800ba0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1e5      	bne.n	800b9e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3760      	adds	r7, #96	; 0x60
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	0800b6ff 	.word	0x0800b6ff
 800ba24:	0800b825 	.word	0x0800b825
 800ba28:	0800b85b 	.word	0x0800b85b

0800ba2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b089      	sub	sp, #36	; 0x24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	330c      	adds	r3, #12
 800ba3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	330c      	adds	r3, #12
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	61ba      	str	r2, [r7, #24]
 800ba56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	6979      	ldr	r1, [r7, #20]
 800ba5a:	69ba      	ldr	r2, [r7, #24]
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	613b      	str	r3, [r7, #16]
   return(result);
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e5      	bne.n	800ba34 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ba70:	bf00      	nop
 800ba72:	3724      	adds	r7, #36	; 0x24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b095      	sub	sp, #84	; 0x54
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	330c      	adds	r3, #12
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8e:	e853 3f00 	ldrex	r3, [r3]
 800ba92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	330c      	adds	r3, #12
 800baa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800baa4:	643a      	str	r2, [r7, #64]	; 0x40
 800baa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800baaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baac:	e841 2300 	strex	r3, r2, [r1]
 800bab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1e5      	bne.n	800ba84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3314      	adds	r3, #20
 800babe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	f023 0301 	bic.w	r3, r3, #1
 800bace:	64bb      	str	r3, [r7, #72]	; 0x48
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3314      	adds	r3, #20
 800bad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e5      	bne.n	800bab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d119      	bne.n	800bb28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f023 0310 	bic.w	r3, r3, #16
 800bb0a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	330c      	adds	r3, #12
 800bb12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb14:	61ba      	str	r2, [r7, #24]
 800bb16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6979      	ldr	r1, [r7, #20]
 800bb1a:	69ba      	ldr	r2, [r7, #24]
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	613b      	str	r3, [r7, #16]
   return(result);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e5      	bne.n	800baf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb36:	bf00      	nop
 800bb38:	3754      	adds	r7, #84	; 0x54
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
	...

0800bb44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb48:	b0c0      	sub	sp, #256	; 0x100
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb60:	68d9      	ldr	r1, [r3, #12]
 800bb62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	ea40 0301 	orr.w	r3, r0, r1
 800bb6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bb6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb72:	689a      	ldr	r2, [r3, #8]
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	431a      	orrs	r2, r3
 800bb84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bb90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bb9c:	f021 010c 	bic.w	r1, r1, #12
 800bba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bbba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbbe:	6999      	ldr	r1, [r3, #24]
 800bbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	ea40 0301 	orr.w	r3, r0, r1
 800bbca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b8f      	ldr	r3, [pc, #572]	; (800be10 <UART_SetConfig+0x2cc>)
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d005      	beq.n	800bbe4 <UART_SetConfig+0xa0>
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	4b8d      	ldr	r3, [pc, #564]	; (800be14 <UART_SetConfig+0x2d0>)
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d104      	bne.n	800bbee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bbe4:	f7fc fe82 	bl	80088ec <HAL_RCC_GetPCLK2Freq>
 800bbe8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bbec:	e003      	b.n	800bbf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bbee:	f7fc fe69 	bl	80088c4 <HAL_RCC_GetPCLK1Freq>
 800bbf2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbfa:	69db      	ldr	r3, [r3, #28]
 800bbfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc00:	f040 810c 	bne.w	800be1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bc12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bc16:	4622      	mov	r2, r4
 800bc18:	462b      	mov	r3, r5
 800bc1a:	1891      	adds	r1, r2, r2
 800bc1c:	65b9      	str	r1, [r7, #88]	; 0x58
 800bc1e:	415b      	adcs	r3, r3
 800bc20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bc26:	4621      	mov	r1, r4
 800bc28:	eb12 0801 	adds.w	r8, r2, r1
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	eb43 0901 	adc.w	r9, r3, r1
 800bc32:	f04f 0200 	mov.w	r2, #0
 800bc36:	f04f 0300 	mov.w	r3, #0
 800bc3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bc3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bc42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bc46:	4690      	mov	r8, r2
 800bc48:	4699      	mov	r9, r3
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	eb18 0303 	adds.w	r3, r8, r3
 800bc50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bc54:	462b      	mov	r3, r5
 800bc56:	eb49 0303 	adc.w	r3, r9, r3
 800bc5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bc6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bc72:	460b      	mov	r3, r1
 800bc74:	18db      	adds	r3, r3, r3
 800bc76:	653b      	str	r3, [r7, #80]	; 0x50
 800bc78:	4613      	mov	r3, r2
 800bc7a:	eb42 0303 	adc.w	r3, r2, r3
 800bc7e:	657b      	str	r3, [r7, #84]	; 0x54
 800bc80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bc84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bc88:	f7f5 f80e 	bl	8000ca8 <__aeabi_uldivmod>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4b61      	ldr	r3, [pc, #388]	; (800be18 <UART_SetConfig+0x2d4>)
 800bc92:	fba3 2302 	umull	r2, r3, r3, r2
 800bc96:	095b      	lsrs	r3, r3, #5
 800bc98:	011c      	lsls	r4, r3, #4
 800bc9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bca4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bcac:	4642      	mov	r2, r8
 800bcae:	464b      	mov	r3, r9
 800bcb0:	1891      	adds	r1, r2, r2
 800bcb2:	64b9      	str	r1, [r7, #72]	; 0x48
 800bcb4:	415b      	adcs	r3, r3
 800bcb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bcbc:	4641      	mov	r1, r8
 800bcbe:	eb12 0a01 	adds.w	sl, r2, r1
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	eb43 0b01 	adc.w	fp, r3, r1
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bcd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bcd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bcdc:	4692      	mov	sl, r2
 800bcde:	469b      	mov	fp, r3
 800bce0:	4643      	mov	r3, r8
 800bce2:	eb1a 0303 	adds.w	r3, sl, r3
 800bce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcea:	464b      	mov	r3, r9
 800bcec:	eb4b 0303 	adc.w	r3, fp, r3
 800bcf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bd04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	18db      	adds	r3, r3, r3
 800bd0c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd0e:	4613      	mov	r3, r2
 800bd10:	eb42 0303 	adc.w	r3, r2, r3
 800bd14:	647b      	str	r3, [r7, #68]	; 0x44
 800bd16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bd1e:	f7f4 ffc3 	bl	8000ca8 <__aeabi_uldivmod>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	4b3b      	ldr	r3, [pc, #236]	; (800be18 <UART_SetConfig+0x2d4>)
 800bd2a:	fba3 2301 	umull	r2, r3, r3, r1
 800bd2e:	095b      	lsrs	r3, r3, #5
 800bd30:	2264      	movs	r2, #100	; 0x64
 800bd32:	fb02 f303 	mul.w	r3, r2, r3
 800bd36:	1acb      	subs	r3, r1, r3
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd3e:	4b36      	ldr	r3, [pc, #216]	; (800be18 <UART_SetConfig+0x2d4>)
 800bd40:	fba3 2302 	umull	r2, r3, r3, r2
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	005b      	lsls	r3, r3, #1
 800bd48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd4c:	441c      	add	r4, r3
 800bd4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd52:	2200      	movs	r2, #0
 800bd54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bd5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bd60:	4642      	mov	r2, r8
 800bd62:	464b      	mov	r3, r9
 800bd64:	1891      	adds	r1, r2, r2
 800bd66:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd68:	415b      	adcs	r3, r3
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd70:	4641      	mov	r1, r8
 800bd72:	1851      	adds	r1, r2, r1
 800bd74:	6339      	str	r1, [r7, #48]	; 0x30
 800bd76:	4649      	mov	r1, r9
 800bd78:	414b      	adcs	r3, r1
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	f04f 0300 	mov.w	r3, #0
 800bd84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bd88:	4659      	mov	r1, fp
 800bd8a:	00cb      	lsls	r3, r1, #3
 800bd8c:	4651      	mov	r1, sl
 800bd8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd92:	4651      	mov	r1, sl
 800bd94:	00ca      	lsls	r2, r1, #3
 800bd96:	4610      	mov	r0, r2
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	4642      	mov	r2, r8
 800bd9e:	189b      	adds	r3, r3, r2
 800bda0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bda4:	464b      	mov	r3, r9
 800bda6:	460a      	mov	r2, r1
 800bda8:	eb42 0303 	adc.w	r3, r2, r3
 800bdac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bdbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bdc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	18db      	adds	r3, r3, r3
 800bdc8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdca:	4613      	mov	r3, r2
 800bdcc:	eb42 0303 	adc.w	r3, r2, r3
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bdda:	f7f4 ff65 	bl	8000ca8 <__aeabi_uldivmod>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <UART_SetConfig+0x2d4>)
 800bde4:	fba3 1302 	umull	r1, r3, r3, r2
 800bde8:	095b      	lsrs	r3, r3, #5
 800bdea:	2164      	movs	r1, #100	; 0x64
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	3332      	adds	r3, #50	; 0x32
 800bdf6:	4a08      	ldr	r2, [pc, #32]	; (800be18 <UART_SetConfig+0x2d4>)
 800bdf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfc:	095b      	lsrs	r3, r3, #5
 800bdfe:	f003 0207 	and.w	r2, r3, #7
 800be02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4422      	add	r2, r4
 800be0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be0c:	e105      	b.n	800c01a <UART_SetConfig+0x4d6>
 800be0e:	bf00      	nop
 800be10:	40011000 	.word	0x40011000
 800be14:	40011400 	.word	0x40011400
 800be18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be20:	2200      	movs	r2, #0
 800be22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800be26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800be2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800be2e:	4642      	mov	r2, r8
 800be30:	464b      	mov	r3, r9
 800be32:	1891      	adds	r1, r2, r2
 800be34:	6239      	str	r1, [r7, #32]
 800be36:	415b      	adcs	r3, r3
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
 800be3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800be3e:	4641      	mov	r1, r8
 800be40:	1854      	adds	r4, r2, r1
 800be42:	4649      	mov	r1, r9
 800be44:	eb43 0501 	adc.w	r5, r3, r1
 800be48:	f04f 0200 	mov.w	r2, #0
 800be4c:	f04f 0300 	mov.w	r3, #0
 800be50:	00eb      	lsls	r3, r5, #3
 800be52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be56:	00e2      	lsls	r2, r4, #3
 800be58:	4614      	mov	r4, r2
 800be5a:	461d      	mov	r5, r3
 800be5c:	4643      	mov	r3, r8
 800be5e:	18e3      	adds	r3, r4, r3
 800be60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be64:	464b      	mov	r3, r9
 800be66:	eb45 0303 	adc.w	r3, r5, r3
 800be6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	f04f 0300 	mov.w	r3, #0
 800be86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800be8a:	4629      	mov	r1, r5
 800be8c:	008b      	lsls	r3, r1, #2
 800be8e:	4621      	mov	r1, r4
 800be90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be94:	4621      	mov	r1, r4
 800be96:	008a      	lsls	r2, r1, #2
 800be98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800be9c:	f7f4 ff04 	bl	8000ca8 <__aeabi_uldivmod>
 800bea0:	4602      	mov	r2, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4b60      	ldr	r3, [pc, #384]	; (800c028 <UART_SetConfig+0x4e4>)
 800bea6:	fba3 2302 	umull	r2, r3, r3, r2
 800beaa:	095b      	lsrs	r3, r3, #5
 800beac:	011c      	lsls	r4, r3, #4
 800beae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800beb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bec0:	4642      	mov	r2, r8
 800bec2:	464b      	mov	r3, r9
 800bec4:	1891      	adds	r1, r2, r2
 800bec6:	61b9      	str	r1, [r7, #24]
 800bec8:	415b      	adcs	r3, r3
 800beca:	61fb      	str	r3, [r7, #28]
 800becc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bed0:	4641      	mov	r1, r8
 800bed2:	1851      	adds	r1, r2, r1
 800bed4:	6139      	str	r1, [r7, #16]
 800bed6:	4649      	mov	r1, r9
 800bed8:	414b      	adcs	r3, r1
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	f04f 0300 	mov.w	r3, #0
 800bee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bee8:	4659      	mov	r1, fp
 800beea:	00cb      	lsls	r3, r1, #3
 800beec:	4651      	mov	r1, sl
 800beee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bef2:	4651      	mov	r1, sl
 800bef4:	00ca      	lsls	r2, r1, #3
 800bef6:	4610      	mov	r0, r2
 800bef8:	4619      	mov	r1, r3
 800befa:	4603      	mov	r3, r0
 800befc:	4642      	mov	r2, r8
 800befe:	189b      	adds	r3, r3, r2
 800bf00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf04:	464b      	mov	r3, r9
 800bf06:	460a      	mov	r2, r1
 800bf08:	eb42 0303 	adc.w	r3, r2, r3
 800bf0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bf1c:	f04f 0200 	mov.w	r2, #0
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bf28:	4649      	mov	r1, r9
 800bf2a:	008b      	lsls	r3, r1, #2
 800bf2c:	4641      	mov	r1, r8
 800bf2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bf32:	4641      	mov	r1, r8
 800bf34:	008a      	lsls	r2, r1, #2
 800bf36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bf3a:	f7f4 feb5 	bl	8000ca8 <__aeabi_uldivmod>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4b39      	ldr	r3, [pc, #228]	; (800c028 <UART_SetConfig+0x4e4>)
 800bf44:	fba3 1302 	umull	r1, r3, r3, r2
 800bf48:	095b      	lsrs	r3, r3, #5
 800bf4a:	2164      	movs	r1, #100	; 0x64
 800bf4c:	fb01 f303 	mul.w	r3, r1, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	3332      	adds	r3, #50	; 0x32
 800bf56:	4a34      	ldr	r2, [pc, #208]	; (800c028 <UART_SetConfig+0x4e4>)
 800bf58:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf62:	441c      	add	r4, r3
 800bf64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf68:	2200      	movs	r2, #0
 800bf6a:	673b      	str	r3, [r7, #112]	; 0x70
 800bf6c:	677a      	str	r2, [r7, #116]	; 0x74
 800bf6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bf72:	4642      	mov	r2, r8
 800bf74:	464b      	mov	r3, r9
 800bf76:	1891      	adds	r1, r2, r2
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	415b      	adcs	r3, r3
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf82:	4641      	mov	r1, r8
 800bf84:	1851      	adds	r1, r2, r1
 800bf86:	6039      	str	r1, [r7, #0]
 800bf88:	4649      	mov	r1, r9
 800bf8a:	414b      	adcs	r3, r1
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	f04f 0300 	mov.w	r3, #0
 800bf96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bf9a:	4659      	mov	r1, fp
 800bf9c:	00cb      	lsls	r3, r1, #3
 800bf9e:	4651      	mov	r1, sl
 800bfa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfa4:	4651      	mov	r1, sl
 800bfa6:	00ca      	lsls	r2, r1, #3
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4603      	mov	r3, r0
 800bfae:	4642      	mov	r2, r8
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	460a      	mov	r2, r1
 800bfb8:	eb42 0303 	adc.w	r3, r2, r3
 800bfbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	663b      	str	r3, [r7, #96]	; 0x60
 800bfc8:	667a      	str	r2, [r7, #100]	; 0x64
 800bfca:	f04f 0200 	mov.w	r2, #0
 800bfce:	f04f 0300 	mov.w	r3, #0
 800bfd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	008b      	lsls	r3, r1, #2
 800bfda:	4641      	mov	r1, r8
 800bfdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfe0:	4641      	mov	r1, r8
 800bfe2:	008a      	lsls	r2, r1, #2
 800bfe4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bfe8:	f7f4 fe5e 	bl	8000ca8 <__aeabi_uldivmod>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4b0d      	ldr	r3, [pc, #52]	; (800c028 <UART_SetConfig+0x4e4>)
 800bff2:	fba3 1302 	umull	r1, r3, r3, r2
 800bff6:	095b      	lsrs	r3, r3, #5
 800bff8:	2164      	movs	r1, #100	; 0x64
 800bffa:	fb01 f303 	mul.w	r3, r1, r3
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	3332      	adds	r3, #50	; 0x32
 800c004:	4a08      	ldr	r2, [pc, #32]	; (800c028 <UART_SetConfig+0x4e4>)
 800c006:	fba2 2303 	umull	r2, r3, r2, r3
 800c00a:	095b      	lsrs	r3, r3, #5
 800c00c:	f003 020f 	and.w	r2, r3, #15
 800c010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4422      	add	r2, r4
 800c018:	609a      	str	r2, [r3, #8]
}
 800c01a:	bf00      	nop
 800c01c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c020:	46bd      	mov	sp, r7
 800c022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c026:	bf00      	nop
 800c028:	51eb851f 	.word	0x51eb851f

0800c02c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c02c:	b084      	sub	sp, #16
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	f107 001c 	add.w	r0, r7, #28
 800c03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c042:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c044:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c046:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c04a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c04e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c052:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c056:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c066:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	431a      	orrs	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	b004      	add	sp, #16
 800c080:	4770      	bx	lr

0800c082 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c082:	b480      	push	{r7}
 800c084:	b083      	sub	sp, #12
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c090:	4618      	mov	r0, r3
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2203      	movs	r2, #3
 800c0ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 0303 	and.w	r3, r3, #3
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c0f6:	b480      	push	{r7}
 800c0f8:	b085      	sub	sp, #20
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c114:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c11a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c120:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c130:	f023 030f 	bic.w	r3, r3, #15
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	431a      	orrs	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	b2db      	uxtb	r3, r3
}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3314      	adds	r3, #20
 800c172:	461a      	mov	r2, r3
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	4413      	add	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
}  
 800c17e:	4618      	mov	r0, r3
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1b0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c1b6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1d4:	2300      	movs	r3, #0

}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b088      	sub	sp, #32
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1f4:	2340      	movs	r3, #64	; 0x40
 800c1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff74 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c212:	2110      	movs	r1, #16
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f9d7 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c21c:	69fb      	ldr	r3, [r7, #28]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b088      	sub	sp, #32
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c234:	2311      	movs	r3, #17
 800c236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c238:	2340      	movs	r3, #64	; 0x40
 800c23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c23c:	2300      	movs	r3, #0
 800c23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c246:	f107 0308 	add.w	r3, r7, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff ff52 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c252:	f241 3288 	movw	r2, #5000	; 0x1388
 800c256:	2111      	movs	r1, #17
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f9b5 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c260:	69fb      	ldr	r3, [r7, #28]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3720      	adds	r7, #32
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c278:	2312      	movs	r3, #18
 800c27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c27c:	2340      	movs	r3, #64	; 0x40
 800c27e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c280:	2300      	movs	r3, #0
 800c282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff30 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c296:	f241 3288 	movw	r2, #5000	; 0x1388
 800c29a:	2112      	movs	r1, #18
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f993 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c2a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3720      	adds	r7, #32
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b088      	sub	sp, #32
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2bc:	2318      	movs	r3, #24
 800c2be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2ce:	f107 0308 	add.w	r3, r7, #8
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff0e 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c2da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2de:	2118      	movs	r1, #24
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f971 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c2e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2e8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3720      	adds	r7, #32
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b088      	sub	sp, #32
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c300:	2319      	movs	r3, #25
 800c302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c304:	2340      	movs	r3, #64	; 0x40
 800c306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c308:	2300      	movs	r3, #0
 800c30a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c310:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c312:	f107 0308 	add.w	r3, r7, #8
 800c316:	4619      	mov	r1, r3
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff feec 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c322:	2119      	movs	r1, #25
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 f94f 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c32c:	69fb      	ldr	r3, [r7, #28]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
	...

0800c338 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b088      	sub	sp, #32
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c344:	230c      	movs	r3, #12
 800c346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c348:	2340      	movs	r3, #64	; 0x40
 800c34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c34c:	2300      	movs	r3, #0
 800c34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff feca 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c362:	4a05      	ldr	r2, [pc, #20]	; (800c378 <SDMMC_CmdStopTransfer+0x40>)
 800c364:	210c      	movs	r1, #12
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f92e 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c36e:	69fb      	ldr	r3, [r7, #28]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3720      	adds	r7, #32
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	05f5e100 	.word	0x05f5e100

0800c37c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	; 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c38c:	2307      	movs	r3, #7
 800c38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c390:	2340      	movs	r3, #64	; 0x40
 800c392:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c394:	2300      	movs	r3, #0
 800c396:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c39c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c39e:	f107 0310 	add.w	r3, r7, #16
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7ff fea6 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3ae:	2107      	movs	r1, #7
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f000 f909 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c3b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3728      	adds	r7, #40	; 0x28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b088      	sub	sp, #32
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3e0:	f107 0308 	add.w	r3, r7, #8
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fe85 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fb23 	bl	800ca38 <SDMMC_GetCmdError>
 800c3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3f4:	69fb      	ldr	r3, [r7, #28]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b088      	sub	sp, #32
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c406:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c40c:	2308      	movs	r3, #8
 800c40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c410:	2340      	movs	r3, #64	; 0x40
 800c412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c414:	2300      	movs	r3, #0
 800c416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c41c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c41e:	f107 0308 	add.w	r3, r7, #8
 800c422:	4619      	mov	r1, r3
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f7ff fe66 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fab6 	bl	800c99c <SDMMC_GetCmdResp7>
 800c430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c432:	69fb      	ldr	r3, [r7, #28]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3720      	adds	r7, #32
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c44a:	2337      	movs	r3, #55	; 0x37
 800c44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c44e:	2340      	movs	r3, #64	; 0x40
 800c450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c452:	2300      	movs	r3, #0
 800c454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c45a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c45c:	f107 0308 	add.w	r3, r7, #8
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff fe47 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c468:	f241 3288 	movw	r2, #5000	; 0x1388
 800c46c:	2137      	movs	r1, #55	; 0x37
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f8aa 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c474:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c476:	69fb      	ldr	r3, [r7, #28]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3720      	adds	r7, #32
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c496:	2329      	movs	r3, #41	; 0x29
 800c498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c49a:	2340      	movs	r3, #64	; 0x40
 800c49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4a8:	f107 0308 	add.w	r3, r7, #8
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f7ff fe21 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f9bd 	bl	800c834 <SDMMC_GetCmdResp3>
 800c4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3720      	adds	r7, #32
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b088      	sub	sp, #32
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c4d6:	23c0      	movs	r3, #192	; 0xc0
 800c4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4e4:	f107 0308 	add.w	r3, r7, #8
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff fe03 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f957 	bl	800c7a4 <SDMMC_GetCmdResp2>
 800c4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3720      	adds	r7, #32
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b088      	sub	sp, #32
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c510:	2309      	movs	r3, #9
 800c512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c514:	23c0      	movs	r3, #192	; 0xc0
 800c516:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c520:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c522:	f107 0308 	add.w	r3, r7, #8
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7ff fde4 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 f938 	bl	800c7a4 <SDMMC_GetCmdResp2>
 800c534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c536:	69fb      	ldr	r3, [r7, #28]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3720      	adds	r7, #32
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b088      	sub	sp, #32
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c54e:	2303      	movs	r3, #3
 800c550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c552:	2340      	movs	r3, #64	; 0x40
 800c554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c556:	2300      	movs	r3, #0
 800c558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c55e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c560:	f107 0308 	add.w	r3, r7, #8
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff fdc5 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	2103      	movs	r1, #3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f99d 	bl	800c8b0 <SDMMC_GetCmdResp6>
 800c576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c578:	69fb      	ldr	r3, [r7, #28]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3720      	adds	r7, #32
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b088      	sub	sp, #32
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
 800c58a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c590:	230d      	movs	r3, #13
 800c592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c594:	2340      	movs	r3, #64	; 0x40
 800c596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c59c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5a2:	f107 0308 	add.w	r3, r7, #8
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7ff fda4 	bl	800c0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b2:	210d      	movs	r1, #13
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f807 	bl	800c5c8 <SDMMC_GetCmdResp1>
 800c5ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3720      	adds	r7, #32
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
	...

0800c5c8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c5d6:	4b70      	ldr	r3, [pc, #448]	; (800c798 <SDMMC_GetCmdResp1+0x1d0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a70      	ldr	r2, [pc, #448]	; (800c79c <SDMMC_GetCmdResp1+0x1d4>)
 800c5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e0:	0a5a      	lsrs	r2, r3, #9
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	fb02 f303 	mul.w	r3, r2, r3
 800c5e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	1e5a      	subs	r2, r3, #1
 800c5ee:	61fa      	str	r2, [r7, #28]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d102      	bne.n	800c5fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5f8:	e0c9      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0ef      	beq.n	800c5ea <SDMMC_GetCmdResp1+0x22>
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ea      	bne.n	800c5ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2204      	movs	r2, #4
 800c624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c626:	2304      	movs	r3, #4
 800c628:	e0b1      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62e:	f003 0301 	and.w	r3, r3, #1
 800c632:	2b00      	cmp	r3, #0
 800c634:	d004      	beq.n	800c640 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2201      	movs	r2, #1
 800c63a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e0a6      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	22c5      	movs	r2, #197	; 0xc5
 800c644:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7ff fd7f 	bl	800c14a <SDIO_GetCommandResponse>
 800c64c:	4603      	mov	r3, r0
 800c64e:	461a      	mov	r2, r3
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	4293      	cmp	r3, r2
 800c654:	d001      	beq.n	800c65a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c656:	2301      	movs	r3, #1
 800c658:	e099      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c65a:	2100      	movs	r1, #0
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fd81 	bl	800c164 <SDIO_GetResponse>
 800c662:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	4b4e      	ldr	r3, [pc, #312]	; (800c7a0 <SDMMC_GetCmdResp1+0x1d8>)
 800c668:	4013      	ands	r3, r2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c66e:	2300      	movs	r3, #0
 800c670:	e08d      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	da02      	bge.n	800c67e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c67c:	e087      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c688:	2340      	movs	r3, #64	; 0x40
 800c68a:	e080      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c696:	2380      	movs	r3, #128	; 0x80
 800c698:	e079      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d002      	beq.n	800c6aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c6a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6a8:	e071      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c6b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6b8:	e069      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c8:	e061      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6d8:	e059      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6e8:	e051      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6f8:	e049      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c708:	e041      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c718:	e039      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c728:	e031      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c734:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c738:	e029      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c744:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c748:	e021      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c754:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c758:	e019      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c768:	e011      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c774:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c778:	e009      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f003 0308 	and.w	r3, r3, #8
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c784:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c788:	e001      	b.n	800c78e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c78a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3720      	adds	r7, #32
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	20000094 	.word	0x20000094
 800c79c:	10624dd3 	.word	0x10624dd3
 800c7a0:	fdffe008 	.word	0xfdffe008

0800c7a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7ac:	4b1f      	ldr	r3, [pc, #124]	; (800c82c <SDMMC_GetCmdResp2+0x88>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a1f      	ldr	r2, [pc, #124]	; (800c830 <SDMMC_GetCmdResp2+0x8c>)
 800c7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b6:	0a5b      	lsrs	r3, r3, #9
 800c7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7bc:	fb02 f303 	mul.w	r3, r2, r3
 800c7c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1e5a      	subs	r2, r3, #1
 800c7c6:	60fa      	str	r2, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d102      	bne.n	800c7d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7d0:	e026      	b.n	800c820 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0ef      	beq.n	800c7c2 <SDMMC_GetCmdResp2+0x1e>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1ea      	bne.n	800c7c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7fe:	2304      	movs	r3, #4
 800c800:	e00e      	b.n	800c820 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c806:	f003 0301 	and.w	r3, r3, #1
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c814:	2301      	movs	r3, #1
 800c816:	e003      	b.n	800c820 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	22c5      	movs	r2, #197	; 0xc5
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	20000094 	.word	0x20000094
 800c830:	10624dd3 	.word	0x10624dd3

0800c834 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c83c:	4b1a      	ldr	r3, [pc, #104]	; (800c8a8 <SDMMC_GetCmdResp3+0x74>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a1a      	ldr	r2, [pc, #104]	; (800c8ac <SDMMC_GetCmdResp3+0x78>)
 800c842:	fba2 2303 	umull	r2, r3, r2, r3
 800c846:	0a5b      	lsrs	r3, r3, #9
 800c848:	f241 3288 	movw	r2, #5000	; 0x1388
 800c84c:	fb02 f303 	mul.w	r3, r2, r3
 800c850:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1e5a      	subs	r2, r3, #1
 800c856:	60fa      	str	r2, [r7, #12]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c85c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c860:	e01b      	b.n	800c89a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c866:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0ef      	beq.n	800c852 <SDMMC_GetCmdResp3+0x1e>
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1ea      	bne.n	800c852 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2204      	movs	r2, #4
 800c88c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c88e:	2304      	movs	r3, #4
 800c890:	e003      	b.n	800c89a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	22c5      	movs	r2, #197	; 0xc5
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	20000094 	.word	0x20000094
 800c8ac:	10624dd3 	.word	0x10624dd3

0800c8b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8be:	4b35      	ldr	r3, [pc, #212]	; (800c994 <SDMMC_GetCmdResp6+0xe4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a35      	ldr	r2, [pc, #212]	; (800c998 <SDMMC_GetCmdResp6+0xe8>)
 800c8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c8:	0a5b      	lsrs	r3, r3, #9
 800c8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ce:	fb02 f303 	mul.w	r3, r2, r3
 800c8d2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	1e5a      	subs	r2, r3, #1
 800c8d8:	61fa      	str	r2, [r7, #28]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d102      	bne.n	800c8e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8e2:	e052      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0ef      	beq.n	800c8d4 <SDMMC_GetCmdResp6+0x24>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1ea      	bne.n	800c8d4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c902:	f003 0304 	and.w	r3, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2204      	movs	r2, #4
 800c90e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c910:	2304      	movs	r3, #4
 800c912:	e03a      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2201      	movs	r2, #1
 800c924:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c926:	2301      	movs	r3, #1
 800c928:	e02f      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff fc0d 	bl	800c14a <SDIO_GetCommandResponse>
 800c930:	4603      	mov	r3, r0
 800c932:	461a      	mov	r2, r3
 800c934:	7afb      	ldrb	r3, [r7, #11]
 800c936:	4293      	cmp	r3, r2
 800c938:	d001      	beq.n	800c93e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c93a:	2301      	movs	r3, #1
 800c93c:	e025      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	22c5      	movs	r2, #197	; 0xc5
 800c942:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c944:	2100      	movs	r1, #0
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7ff fc0c 	bl	800c164 <SDIO_GetResponse>
 800c94c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	0c1b      	lsrs	r3, r3, #16
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c962:	2300      	movs	r3, #0
 800c964:	e011      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c974:	e009      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c984:	e001      	b.n	800c98a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3720      	adds	r7, #32
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	20000094 	.word	0x20000094
 800c998:	10624dd3 	.word	0x10624dd3

0800c99c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9a4:	4b22      	ldr	r3, [pc, #136]	; (800ca30 <SDMMC_GetCmdResp7+0x94>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a22      	ldr	r2, [pc, #136]	; (800ca34 <SDMMC_GetCmdResp7+0x98>)
 800c9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ae:	0a5b      	lsrs	r3, r3, #9
 800c9b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b4:	fb02 f303 	mul.w	r3, r2, r3
 800c9b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	1e5a      	subs	r2, r3, #1
 800c9be:	60fa      	str	r2, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d102      	bne.n	800c9ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9c8:	e02c      	b.n	800ca24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d0ef      	beq.n	800c9ba <SDMMC_GetCmdResp7+0x1e>
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1ea      	bne.n	800c9ba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d004      	beq.n	800c9fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2204      	movs	r2, #4
 800c9f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9f6:	2304      	movs	r3, #4
 800c9f8:	e014      	b.n	800ca24 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9fe:	f003 0301 	and.w	r3, r3, #1
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e009      	b.n	800ca24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2240      	movs	r2, #64	; 0x40
 800ca20:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca22:	2300      	movs	r3, #0
  
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	20000094 	.word	0x20000094
 800ca34:	10624dd3 	.word	0x10624dd3

0800ca38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca40:	4b11      	ldr	r3, [pc, #68]	; (800ca88 <SDMMC_GetCmdError+0x50>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a11      	ldr	r2, [pc, #68]	; (800ca8c <SDMMC_GetCmdError+0x54>)
 800ca46:	fba2 2303 	umull	r2, r3, r2, r3
 800ca4a:	0a5b      	lsrs	r3, r3, #9
 800ca4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca50:	fb02 f303 	mul.w	r3, r2, r3
 800ca54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	1e5a      	subs	r2, r3, #1
 800ca5a:	60fa      	str	r2, [r7, #12]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d102      	bne.n	800ca66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca64:	e009      	b.n	800ca7a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0f1      	beq.n	800ca56 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	22c5      	movs	r2, #197	; 0xc5
 800ca76:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20000094 	.word	0x20000094
 800ca8c:	10624dd3 	.word	0x10624dd3

0800ca90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca94:	4904      	ldr	r1, [pc, #16]	; (800caa8 <MX_FATFS_Init+0x18>)
 800ca96:	4805      	ldr	r0, [pc, #20]	; (800caac <MX_FATFS_Init+0x1c>)
 800ca98:	f002 ff0e 	bl	800f8b8 <FATFS_LinkDriver>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	4b03      	ldr	r3, [pc, #12]	; (800cab0 <MX_FATFS_Init+0x20>)
 800caa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800caa4:	bf00      	nop
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20005c44 	.word	0x20005c44
 800caac:	0802e4bc 	.word	0x0802e4bc
 800cab0:	20005c40 	.word	0x20005c40

0800cab4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cab4:	b480      	push	{r7}
 800cab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cab8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800caba:	4618      	mov	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cace:	f000 f86b 	bl	800cba8 <BSP_SD_IsDetected>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d001      	beq.n	800cadc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e005      	b.n	800cae8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cadc:	4804      	ldr	r0, [pc, #16]	; (800caf0 <BSP_SD_Init+0x2c>)
 800cade:	f7fc fa9c 	bl	800901a <HAL_SD_Init>
 800cae2:	4603      	mov	r3, r0
 800cae4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cae6:	79fb      	ldrb	r3, [r7, #7]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20005840 	.word	0x20005840

0800caf4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b088      	sub	sp, #32
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	4806      	ldr	r0, [pc, #24]	; (800cb2c <BSP_SD_ReadBlocks+0x38>)
 800cb12:	f7fc fb33 	bl	800917c <HAL_SD_ReadBlocks>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3718      	adds	r7, #24
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20005840 	.word	0x20005840

0800cb30 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	68f9      	ldr	r1, [r7, #12]
 800cb4c:	4806      	ldr	r0, [pc, #24]	; (800cb68 <BSP_SD_WriteBlocks+0x38>)
 800cb4e:	f7fc fcf3 	bl	8009538 <HAL_SD_WriteBlocks>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	20005840 	.word	0x20005840

0800cb6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb70:	4805      	ldr	r0, [pc, #20]	; (800cb88 <BSP_SD_GetCardState+0x1c>)
 800cb72:	f7fd f837 	bl	8009be4 <HAL_SD_GetCardState>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	bf14      	ite	ne
 800cb7c:	2301      	movne	r3, #1
 800cb7e:	2300      	moveq	r3, #0
 800cb80:	b2db      	uxtb	r3, r3
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20005840 	.word	0x20005840

0800cb8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cb94:	6879      	ldr	r1, [r7, #4]
 800cb96:	4803      	ldr	r0, [pc, #12]	; (800cba4 <BSP_SD_GetCardInfo+0x18>)
 800cb98:	f7fc fff8 	bl	8009b8c <HAL_SD_GetCardInfo>
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20005840 	.word	0x20005840

0800cba8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	b2db      	uxtb	r3, r3
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
	...

0800cbc4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cbce:	4b0b      	ldr	r3, [pc, #44]	; (800cbfc <SD_CheckStatus+0x38>)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cbd4:	f7ff ffca 	bl	800cb6c <BSP_SD_GetCardState>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d107      	bne.n	800cbee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbde:	4b07      	ldr	r3, [pc, #28]	; (800cbfc <SD_CheckStatus+0x38>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f023 0301 	bic.w	r3, r3, #1
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <SD_CheckStatus+0x38>)
 800cbec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbee:	4b03      	ldr	r3, [pc, #12]	; (800cbfc <SD_CheckStatus+0x38>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	200000f5 	.word	0x200000f5

0800cc00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cc0a:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <SD_initialize+0x38>)
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cc10:	f7ff ff58 	bl	800cac4 <BSP_SD_Init>
 800cc14:	4603      	mov	r3, r0
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d107      	bne.n	800cc2a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff ffd1 	bl	800cbc4 <SD_CheckStatus>
 800cc22:	4603      	mov	r3, r0
 800cc24:	461a      	mov	r2, r3
 800cc26:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <SD_initialize+0x38>)
 800cc28:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc2a:	4b03      	ldr	r3, [pc, #12]	; (800cc38 <SD_initialize+0x38>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	b2db      	uxtb	r3, r3
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	200000f5 	.word	0x200000f5

0800cc3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff ffbb 	bl	800cbc4 <SD_CheckStatus>
 800cc4e:	4603      	mov	r3, r0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60b9      	str	r1, [r7, #8]
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	68b8      	ldr	r0, [r7, #8]
 800cc76:	f7ff ff3d 	bl	800caf4 <BSP_SD_ReadBlocks>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d107      	bne.n	800cc90 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc80:	bf00      	nop
 800cc82:	f7ff ff73 	bl	800cb6c <BSP_SD_GetCardState>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1fa      	bne.n	800cc82 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b086      	sub	sp, #24
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	603b      	str	r3, [r7, #0]
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ccae:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	6879      	ldr	r1, [r7, #4]
 800ccb6:	68b8      	ldr	r0, [r7, #8]
 800ccb8:	f7ff ff3a 	bl	800cb30 <BSP_SD_WriteBlocks>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d107      	bne.n	800ccd2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ccc2:	bf00      	nop
 800ccc4:	f7ff ff52 	bl	800cb6c <BSP_SD_GetCardState>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1fa      	bne.n	800ccc4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08c      	sub	sp, #48	; 0x30
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	4603      	mov	r3, r0
 800cce4:	603a      	str	r2, [r7, #0]
 800cce6:	71fb      	strb	r3, [r7, #7]
 800cce8:	460b      	mov	r3, r1
 800ccea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccf2:	4b25      	ldr	r3, [pc, #148]	; (800cd88 <SD_ioctl+0xac>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <SD_ioctl+0x28>
 800cd00:	2303      	movs	r3, #3
 800cd02:	e03c      	b.n	800cd7e <SD_ioctl+0xa2>

  switch (cmd)
 800cd04:	79bb      	ldrb	r3, [r7, #6]
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d834      	bhi.n	800cd74 <SD_ioctl+0x98>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <SD_ioctl+0x34>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd21 	.word	0x0800cd21
 800cd14:	0800cd29 	.word	0x0800cd29
 800cd18:	0800cd41 	.word	0x0800cd41
 800cd1c:	0800cd5b 	.word	0x0800cd5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd26:	e028      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd28:	f107 030c 	add.w	r3, r7, #12
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7ff ff2d 	bl	800cb8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd3e:	e01c      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd40:	f107 030c 	add.w	r3, r7, #12
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff ff21 	bl	800cb8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	b29a      	uxth	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd58:	e00f      	b.n	800cd7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd5a:	f107 030c 	add.w	r3, r7, #12
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7ff ff14 	bl	800cb8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd66:	0a5a      	lsrs	r2, r3, #9
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd72:	e002      	b.n	800cd7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3730      	adds	r7, #48	; 0x30
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	200000f5 	.word	0x200000f5

0800cd8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	4a08      	ldr	r2, [pc, #32]	; (800cdbc <disk_status+0x30>)
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	79fa      	ldrb	r2, [r7, #7]
 800cda4:	4905      	ldr	r1, [pc, #20]	; (800cdbc <disk_status+0x30>)
 800cda6:	440a      	add	r2, r1
 800cda8:	7a12      	ldrb	r2, [r2, #8]
 800cdaa:	4610      	mov	r0, r2
 800cdac:	4798      	blx	r3
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20005c70 	.word	0x20005c70

0800cdc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cdce:	79fb      	ldrb	r3, [r7, #7]
 800cdd0:	4a0d      	ldr	r2, [pc, #52]	; (800ce08 <disk_initialize+0x48>)
 800cdd2:	5cd3      	ldrb	r3, [r2, r3]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d111      	bne.n	800cdfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	4a0b      	ldr	r2, [pc, #44]	; (800ce08 <disk_initialize+0x48>)
 800cddc:	2101      	movs	r1, #1
 800cdde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	4a09      	ldr	r2, [pc, #36]	; (800ce08 <disk_initialize+0x48>)
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	79fa      	ldrb	r2, [r7, #7]
 800cdee:	4906      	ldr	r1, [pc, #24]	; (800ce08 <disk_initialize+0x48>)
 800cdf0:	440a      	add	r2, r1
 800cdf2:	7a12      	ldrb	r2, [r2, #8]
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20005c70 	.word	0x20005c70

0800ce0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce0c:	b590      	push	{r4, r7, lr}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	607a      	str	r2, [r7, #4]
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	4a0a      	ldr	r2, [pc, #40]	; (800ce48 <disk_read+0x3c>)
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	689c      	ldr	r4, [r3, #8]
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	4a07      	ldr	r2, [pc, #28]	; (800ce48 <disk_read+0x3c>)
 800ce2c:	4413      	add	r3, r2
 800ce2e:	7a18      	ldrb	r0, [r3, #8]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	68b9      	ldr	r1, [r7, #8]
 800ce36:	47a0      	blx	r4
 800ce38:	4603      	mov	r3, r0
 800ce3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd90      	pop	{r4, r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20005c70 	.word	0x20005c70

0800ce4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ce4c:	b590      	push	{r4, r7, lr}
 800ce4e:	b087      	sub	sp, #28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60b9      	str	r1, [r7, #8]
 800ce54:	607a      	str	r2, [r7, #4]
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
 800ce5e:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <disk_write+0x3c>)
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	4413      	add	r3, r2
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	68dc      	ldr	r4, [r3, #12]
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	4a07      	ldr	r2, [pc, #28]	; (800ce88 <disk_write+0x3c>)
 800ce6c:	4413      	add	r3, r2
 800ce6e:	7a18      	ldrb	r0, [r3, #8]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	47a0      	blx	r4
 800ce78:	4603      	mov	r3, r0
 800ce7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd90      	pop	{r4, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20005c70 	.word	0x20005c70

0800ce8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	603a      	str	r2, [r7, #0]
 800ce96:	71fb      	strb	r3, [r7, #7]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	4a09      	ldr	r2, [pc, #36]	; (800cec4 <disk_ioctl+0x38>)
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	79fa      	ldrb	r2, [r7, #7]
 800ceaa:	4906      	ldr	r1, [pc, #24]	; (800cec4 <disk_ioctl+0x38>)
 800ceac:	440a      	add	r2, r1
 800ceae:	7a10      	ldrb	r0, [r2, #8]
 800ceb0:	79b9      	ldrb	r1, [r7, #6]
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	4798      	blx	r3
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	73fb      	strb	r3, [r7, #15]
  return res;
 800ceba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20005c70 	.word	0x20005c70

0800cec8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3301      	adds	r3, #1
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ced8:	89fb      	ldrh	r3, [r7, #14]
 800ceda:	021b      	lsls	r3, r3, #8
 800cedc:	b21a      	sxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	b21b      	sxth	r3, r3
 800cee4:	4313      	orrs	r3, r2
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ceea:	89fb      	ldrh	r3, [r7, #14]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3303      	adds	r3, #3
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	021b      	lsls	r3, r3, #8
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	3202      	adds	r2, #2
 800cf10:	7812      	ldrb	r2, [r2, #0]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	3201      	adds	r2, #1
 800cf1e:	7812      	ldrb	r2, [r2, #0]
 800cf20:	4313      	orrs	r3, r2
 800cf22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	021b      	lsls	r3, r3, #8
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7812      	ldrb	r2, [r2, #0]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf30:	68fb      	ldr	r3, [r7, #12]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b083      	sub	sp, #12
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	460b      	mov	r3, r1
 800cf48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	887a      	ldrh	r2, [r7, #2]
 800cf52:	b2d2      	uxtb	r2, r2
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	887b      	ldrh	r3, [r7, #2]
 800cf58:	0a1b      	lsrs	r3, r3, #8
 800cf5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	607a      	str	r2, [r7, #4]
 800cf62:	887a      	ldrh	r2, [r7, #2]
 800cf64:	b2d2      	uxtb	r2, r2
 800cf66:	701a      	strb	r2, [r3, #0]
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	b2d2      	uxtb	r2, r2
 800cf88:	701a      	strb	r2, [r3, #0]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	0a1b      	lsrs	r3, r3, #8
 800cf8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	0a1b      	lsrs	r3, r3, #8
 800cfa0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	607a      	str	r2, [r7, #4]
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	b2d2      	uxtb	r2, r2
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	0a1b      	lsrs	r3, r3, #8
 800cfb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	701a      	strb	r2, [r3, #0]
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00d      	beq.n	800d002 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	1c53      	adds	r3, r2, #1
 800cfea:	613b      	str	r3, [r7, #16]
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	1c59      	adds	r1, r3, #1
 800cff0:	6179      	str	r1, [r7, #20]
 800cff2:	7812      	ldrb	r2, [r2, #0]
 800cff4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1f1      	bne.n	800cfe6 <mem_cpy+0x1a>
	}
}
 800d002:	bf00      	nop
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr

0800d00e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d00e:	b480      	push	{r7}
 800d010:	b087      	sub	sp, #28
 800d012:	af00      	add	r7, sp, #0
 800d014:	60f8      	str	r0, [r7, #12]
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	617a      	str	r2, [r7, #20]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	b2d2      	uxtb	r2, r2
 800d028:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	607b      	str	r3, [r7, #4]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1f3      	bne.n	800d01e <mem_set+0x10>
}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	371c      	adds	r7, #28
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d044:	b480      	push	{r7}
 800d046:	b089      	sub	sp, #36	; 0x24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	61fa      	str	r2, [r7, #28]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	4619      	mov	r1, r3
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	1c5a      	adds	r2, r3, #1
 800d06a:	61ba      	str	r2, [r7, #24]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	1acb      	subs	r3, r1, r3
 800d070:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3b01      	subs	r3, #1
 800d076:	607b      	str	r3, [r7, #4]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <mem_cmp+0x40>
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0eb      	beq.n	800d05c <mem_cmp+0x18>

	return r;
 800d084:	697b      	ldr	r3, [r7, #20]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3724      	adds	r7, #36	; 0x24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d09c:	e002      	b.n	800d0a4 <chk_chr+0x12>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	607b      	str	r3, [r7, #4]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <chk_chr+0x26>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d1f2      	bne.n	800d09e <chk_chr+0xc>
	return *str;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	60bb      	str	r3, [r7, #8]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	60fb      	str	r3, [r7, #12]
 800d0da:	e029      	b.n	800d130 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d0dc:	4a27      	ldr	r2, [pc, #156]	; (800d17c <chk_lock+0xb4>)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	011b      	lsls	r3, r3, #4
 800d0e2:	4413      	add	r3, r2
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d01d      	beq.n	800d126 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d0ea:	4a24      	ldr	r2, [pc, #144]	; (800d17c <chk_lock+0xb4>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	011b      	lsls	r3, r3, #4
 800d0f0:	4413      	add	r3, r2
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d116      	bne.n	800d12a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d0fc:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <chk_lock+0xb4>)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	011b      	lsls	r3, r3, #4
 800d102:	4413      	add	r3, r2
 800d104:	3304      	adds	r3, #4
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d10c      	bne.n	800d12a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d110:	4a1a      	ldr	r2, [pc, #104]	; (800d17c <chk_lock+0xb4>)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	4413      	add	r3, r2
 800d118:	3308      	adds	r3, #8
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d120:	429a      	cmp	r2, r3
 800d122:	d102      	bne.n	800d12a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d124:	e007      	b.n	800d136 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d126:	2301      	movs	r3, #1
 800d128:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3301      	adds	r3, #1
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d9d2      	bls.n	800d0dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d109      	bne.n	800d150 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d102      	bne.n	800d148 <chk_lock+0x80>
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d101      	bne.n	800d14c <chk_lock+0x84>
 800d148:	2300      	movs	r3, #0
 800d14a:	e010      	b.n	800d16e <chk_lock+0xa6>
 800d14c:	2312      	movs	r3, #18
 800d14e:	e00e      	b.n	800d16e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d108      	bne.n	800d168 <chk_lock+0xa0>
 800d156:	4a09      	ldr	r2, [pc, #36]	; (800d17c <chk_lock+0xb4>)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	011b      	lsls	r3, r3, #4
 800d15c:	4413      	add	r3, r2
 800d15e:	330c      	adds	r3, #12
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d166:	d101      	bne.n	800d16c <chk_lock+0xa4>
 800d168:	2310      	movs	r3, #16
 800d16a:	e000      	b.n	800d16e <chk_lock+0xa6>
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	20005c50 	.word	0x20005c50

0800d180 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d186:	2300      	movs	r3, #0
 800d188:	607b      	str	r3, [r7, #4]
 800d18a:	e002      	b.n	800d192 <enq_lock+0x12>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3301      	adds	r3, #1
 800d190:	607b      	str	r3, [r7, #4]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b01      	cmp	r3, #1
 800d196:	d806      	bhi.n	800d1a6 <enq_lock+0x26>
 800d198:	4a09      	ldr	r2, [pc, #36]	; (800d1c0 <enq_lock+0x40>)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	4413      	add	r3, r2
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f2      	bne.n	800d18c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	bf14      	ite	ne
 800d1ac:	2301      	movne	r3, #1
 800d1ae:	2300      	moveq	r3, #0
 800d1b0:	b2db      	uxtb	r3, r3
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	370c      	adds	r7, #12
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	20005c50 	.word	0x20005c50

0800d1c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e01f      	b.n	800d214 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d1d4:	4a41      	ldr	r2, [pc, #260]	; (800d2dc <inc_lock+0x118>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	4413      	add	r3, r2
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d113      	bne.n	800d20e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d1e6:	4a3d      	ldr	r2, [pc, #244]	; (800d2dc <inc_lock+0x118>)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	011b      	lsls	r3, r3, #4
 800d1ec:	4413      	add	r3, r2
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d109      	bne.n	800d20e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d1fa:	4a38      	ldr	r2, [pc, #224]	; (800d2dc <inc_lock+0x118>)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	011b      	lsls	r3, r3, #4
 800d200:	4413      	add	r3, r2
 800d202:	3308      	adds	r3, #8
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d006      	beq.n	800d21c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3301      	adds	r3, #1
 800d212:	60fb      	str	r3, [r7, #12]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d9dc      	bls.n	800d1d4 <inc_lock+0x10>
 800d21a:	e000      	b.n	800d21e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d21c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d132      	bne.n	800d28a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d224:	2300      	movs	r3, #0
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	e002      	b.n	800d230 <inc_lock+0x6c>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3301      	adds	r3, #1
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d806      	bhi.n	800d244 <inc_lock+0x80>
 800d236:	4a29      	ldr	r2, [pc, #164]	; (800d2dc <inc_lock+0x118>)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	011b      	lsls	r3, r3, #4
 800d23c:	4413      	add	r3, r2
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1f2      	bne.n	800d22a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b02      	cmp	r3, #2
 800d248:	d101      	bne.n	800d24e <inc_lock+0x8a>
 800d24a:	2300      	movs	r3, #0
 800d24c:	e040      	b.n	800d2d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	4922      	ldr	r1, [pc, #136]	; (800d2dc <inc_lock+0x118>)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	011b      	lsls	r3, r3, #4
 800d258:	440b      	add	r3, r1
 800d25a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689a      	ldr	r2, [r3, #8]
 800d260:	491e      	ldr	r1, [pc, #120]	; (800d2dc <inc_lock+0x118>)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	011b      	lsls	r3, r3, #4
 800d266:	440b      	add	r3, r1
 800d268:	3304      	adds	r3, #4
 800d26a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	695a      	ldr	r2, [r3, #20]
 800d270:	491a      	ldr	r1, [pc, #104]	; (800d2dc <inc_lock+0x118>)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	440b      	add	r3, r1
 800d278:	3308      	adds	r3, #8
 800d27a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d27c:	4a17      	ldr	r2, [pc, #92]	; (800d2dc <inc_lock+0x118>)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	011b      	lsls	r3, r3, #4
 800d282:	4413      	add	r3, r2
 800d284:	330c      	adds	r3, #12
 800d286:	2200      	movs	r2, #0
 800d288:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d009      	beq.n	800d2a4 <inc_lock+0xe0>
 800d290:	4a12      	ldr	r2, [pc, #72]	; (800d2dc <inc_lock+0x118>)
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	011b      	lsls	r3, r3, #4
 800d296:	4413      	add	r3, r2
 800d298:	330c      	adds	r3, #12
 800d29a:	881b      	ldrh	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <inc_lock+0xe0>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	e015      	b.n	800d2d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d108      	bne.n	800d2bc <inc_lock+0xf8>
 800d2aa:	4a0c      	ldr	r2, [pc, #48]	; (800d2dc <inc_lock+0x118>)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	4413      	add	r3, r2
 800d2b2:	330c      	adds	r3, #12
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	e001      	b.n	800d2c0 <inc_lock+0xfc>
 800d2bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2c0:	4906      	ldr	r1, [pc, #24]	; (800d2dc <inc_lock+0x118>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	011b      	lsls	r3, r3, #4
 800d2c6:	440b      	add	r3, r1
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3301      	adds	r3, #1
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3714      	adds	r7, #20
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	20005c50 	.word	0x20005c50

0800d2e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	607b      	str	r3, [r7, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d825      	bhi.n	800d340 <dec_lock+0x60>
		n = Files[i].ctr;
 800d2f4:	4a17      	ldr	r2, [pc, #92]	; (800d354 <dec_lock+0x74>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	4413      	add	r3, r2
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d302:	89fb      	ldrh	r3, [r7, #14]
 800d304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d308:	d101      	bne.n	800d30e <dec_lock+0x2e>
 800d30a:	2300      	movs	r3, #0
 800d30c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d30e:	89fb      	ldrh	r3, [r7, #14]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <dec_lock+0x3a>
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	3b01      	subs	r3, #1
 800d318:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d31a:	4a0e      	ldr	r2, [pc, #56]	; (800d354 <dec_lock+0x74>)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	4413      	add	r3, r2
 800d322:	330c      	adds	r3, #12
 800d324:	89fa      	ldrh	r2, [r7, #14]
 800d326:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d328:	89fb      	ldrh	r3, [r7, #14]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d105      	bne.n	800d33a <dec_lock+0x5a>
 800d32e:	4a09      	ldr	r2, [pc, #36]	; (800d354 <dec_lock+0x74>)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	011b      	lsls	r3, r3, #4
 800d334:	4413      	add	r3, r2
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	737b      	strb	r3, [r7, #13]
 800d33e:	e001      	b.n	800d344 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d340:	2302      	movs	r3, #2
 800d342:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d344:	7b7b      	ldrb	r3, [r7, #13]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	20005c50 	.word	0x20005c50

0800d358 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d360:	2300      	movs	r3, #0
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	e010      	b.n	800d388 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d366:	4a0d      	ldr	r2, [pc, #52]	; (800d39c <clear_lock+0x44>)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4413      	add	r3, r2
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d105      	bne.n	800d382 <clear_lock+0x2a>
 800d376:	4a09      	ldr	r2, [pc, #36]	; (800d39c <clear_lock+0x44>)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	011b      	lsls	r3, r3, #4
 800d37c:	4413      	add	r3, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d9eb      	bls.n	800d366 <clear_lock+0xe>
	}
}
 800d38e:	bf00      	nop
 800d390:	bf00      	nop
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	20005c50 	.word	0x20005c50

0800d3a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	78db      	ldrb	r3, [r3, #3]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d034      	beq.n	800d41e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7858      	ldrb	r0, [r3, #1]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	f7ff fd40 	bl	800ce4c <disk_write>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	73fb      	strb	r3, [r7, #15]
 800d3d6:	e022      	b.n	800d41e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	1ad2      	subs	r2, r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d217      	bcs.n	800d41e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	789b      	ldrb	r3, [r3, #2]
 800d3f2:	613b      	str	r3, [r7, #16]
 800d3f4:	e010      	b.n	800d418 <sync_window+0x78>
					wsect += fs->fsize;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	7858      	ldrb	r0, [r3, #1]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d40a:	2301      	movs	r3, #1
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	f7ff fd1d 	bl	800ce4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	3b01      	subs	r3, #1
 800d416:	613b      	str	r3, [r7, #16]
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d8eb      	bhi.n	800d3f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d01b      	beq.n	800d478 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff ffad 	bl	800d3a0 <sync_window>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d113      	bne.n	800d478 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7858      	ldrb	r0, [r3, #1]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d45a:	2301      	movs	r3, #1
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	f7ff fcd5 	bl	800ce0c <disk_read>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d004      	beq.n	800d472 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d468:	f04f 33ff 	mov.w	r3, #4294967295
 800d46c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d46e:	2301      	movs	r3, #1
 800d470:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	683a      	ldr	r2, [r7, #0]
 800d476:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d478:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
	...

0800d484 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff ff87 	bl	800d3a0 <sync_window>
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d496:	7bfb      	ldrb	r3, [r7, #15]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d159      	bne.n	800d550 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	d149      	bne.n	800d538 <sync_fs+0xb4>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	791b      	ldrb	r3, [r3, #4]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d145      	bne.n	800d538 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	899b      	ldrh	r3, [r3, #12]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	f7ff fda8 	bl	800d00e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3334      	adds	r3, #52	; 0x34
 800d4c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff fd37 	bl	800cf3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3334      	adds	r3, #52	; 0x34
 800d4d4:	4921      	ldr	r1, [pc, #132]	; (800d55c <sync_fs+0xd8>)
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff fd4c 	bl	800cf74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3334      	adds	r3, #52	; 0x34
 800d4e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d4e4:	491e      	ldr	r1, [pc, #120]	; (800d560 <sync_fs+0xdc>)
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff fd44 	bl	800cf74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3334      	adds	r3, #52	; 0x34
 800d4f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	695b      	ldr	r3, [r3, #20]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f7ff fd3a 	bl	800cf74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3334      	adds	r3, #52	; 0x34
 800d504:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	4619      	mov	r1, r3
 800d50e:	4610      	mov	r0, r2
 800d510:	f7ff fd30 	bl	800cf74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a1b      	ldr	r3, [r3, #32]
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7858      	ldrb	r0, [r3, #1]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d52c:	2301      	movs	r3, #1
 800d52e:	f7ff fc8d 	bl	800ce4c <disk_write>
			fs->fsi_flag = 0;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	785b      	ldrb	r3, [r3, #1]
 800d53c:	2200      	movs	r2, #0
 800d53e:	2100      	movs	r1, #0
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fca3 	bl	800ce8c <disk_ioctl>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <sync_fs+0xcc>
 800d54c:	2301      	movs	r3, #1
 800d54e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d550:	7bfb      	ldrb	r3, [r7, #15]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	41615252 	.word	0x41615252
 800d560:	61417272 	.word	0x61417272

0800d564 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	3b02      	subs	r3, #2
 800d572:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	3b02      	subs	r3, #2
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d301      	bcc.n	800d584 <clust2sect+0x20>
 800d580:	2300      	movs	r3, #0
 800d582:	e008      	b.n	800d596 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	895b      	ldrh	r3, [r3, #10]
 800d588:	461a      	mov	r2, r3
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	fb03 f202 	mul.w	r2, r3, r2
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	4413      	add	r3, r2
}
 800d596:	4618      	mov	r0, r3
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b086      	sub	sp, #24
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d904      	bls.n	800d5c2 <get_fat+0x20>
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	699b      	ldr	r3, [r3, #24]
 800d5bc:	683a      	ldr	r2, [r7, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d302      	bcc.n	800d5c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	e0bb      	b.n	800d740 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b03      	cmp	r3, #3
 800d5d4:	f000 8083 	beq.w	800d6de <get_fat+0x13c>
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	f300 80a7 	bgt.w	800d72c <get_fat+0x18a>
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d002      	beq.n	800d5e8 <get_fat+0x46>
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d056      	beq.n	800d694 <get_fat+0xf2>
 800d5e6:	e0a1      	b.n	800d72c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	085b      	lsrs	r3, r3, #1
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	899b      	ldrh	r3, [r3, #12]
 800d5fe:	4619      	mov	r1, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	fbb3 f3f1 	udiv	r3, r3, r1
 800d606:	4413      	add	r3, r2
 800d608:	4619      	mov	r1, r3
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f7ff ff0c 	bl	800d428 <move_window>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	f040 808d 	bne.w	800d732 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	60fa      	str	r2, [r7, #12]
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	8992      	ldrh	r2, [r2, #12]
 800d622:	fbb3 f1f2 	udiv	r1, r3, r2
 800d626:	fb01 f202 	mul.w	r2, r1, r2
 800d62a:	1a9b      	subs	r3, r3, r2
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	4413      	add	r3, r2
 800d630:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d634:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	899b      	ldrh	r3, [r3, #12]
 800d63e:	4619      	mov	r1, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	fbb3 f3f1 	udiv	r3, r3, r1
 800d646:	4413      	add	r3, r2
 800d648:	4619      	mov	r1, r3
 800d64a:	6938      	ldr	r0, [r7, #16]
 800d64c:	f7ff feec 	bl	800d428 <move_window>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d16f      	bne.n	800d736 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	899b      	ldrh	r3, [r3, #12]
 800d65a:	461a      	mov	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d662:	fb01 f202 	mul.w	r2, r1, r2
 800d666:	1a9b      	subs	r3, r3, r2
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4413      	add	r3, r2
 800d66c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d670:	021b      	lsls	r3, r3, #8
 800d672:	461a      	mov	r2, r3
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	4313      	orrs	r3, r2
 800d678:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	f003 0301 	and.w	r3, r3, #1
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <get_fat+0xe8>
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	091b      	lsrs	r3, r3, #4
 800d688:	e002      	b.n	800d690 <get_fat+0xee>
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d690:	617b      	str	r3, [r7, #20]
			break;
 800d692:	e055      	b.n	800d740 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	899b      	ldrh	r3, [r3, #12]
 800d69c:	085b      	lsrs	r3, r3, #1
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6938      	ldr	r0, [r7, #16]
 800d6ae:	f7ff febb 	bl	800d428 <move_window>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d140      	bne.n	800d73a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	8992      	ldrh	r2, [r2, #12]
 800d6c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6ca:	fb00 f202 	mul.w	r2, r0, r2
 800d6ce:	1a9b      	subs	r3, r3, r2
 800d6d0:	440b      	add	r3, r1
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fbf8 	bl	800cec8 <ld_word>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	617b      	str	r3, [r7, #20]
			break;
 800d6dc:	e030      	b.n	800d740 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	899b      	ldrh	r3, [r3, #12]
 800d6e6:	089b      	lsrs	r3, r3, #2
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6f2:	4413      	add	r3, r2
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6938      	ldr	r0, [r7, #16]
 800d6f8:	f7ff fe96 	bl	800d428 <move_window>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d11d      	bne.n	800d73e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	8992      	ldrh	r2, [r2, #12]
 800d710:	fbb3 f0f2 	udiv	r0, r3, r2
 800d714:	fb00 f202 	mul.w	r2, r0, r2
 800d718:	1a9b      	subs	r3, r3, r2
 800d71a:	440b      	add	r3, r1
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fbeb 	bl	800cef8 <ld_dword>
 800d722:	4603      	mov	r3, r0
 800d724:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d728:	617b      	str	r3, [r7, #20]
			break;
 800d72a:	e009      	b.n	800d740 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d72c:	2301      	movs	r3, #1
 800d72e:	617b      	str	r3, [r7, #20]
 800d730:	e006      	b.n	800d740 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d732:	bf00      	nop
 800d734:	e004      	b.n	800d740 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d736:	bf00      	nop
 800d738:	e002      	b.n	800d740 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d73a:	bf00      	nop
 800d73c:	e000      	b.n	800d740 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d73e:	bf00      	nop
		}
	}

	return val;
 800d740:	697b      	ldr	r3, [r7, #20]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d74a:	b590      	push	{r4, r7, lr}
 800d74c:	b089      	sub	sp, #36	; 0x24
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d756:	2302      	movs	r3, #2
 800d758:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	f240 8102 	bls.w	800d966 <put_fat+0x21c>
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	429a      	cmp	r2, r3
 800d76a:	f080 80fc 	bcs.w	800d966 <put_fat+0x21c>
		switch (fs->fs_type) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	2b03      	cmp	r3, #3
 800d774:	f000 80b6 	beq.w	800d8e4 <put_fat+0x19a>
 800d778:	2b03      	cmp	r3, #3
 800d77a:	f300 80fd 	bgt.w	800d978 <put_fat+0x22e>
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d003      	beq.n	800d78a <put_fat+0x40>
 800d782:	2b02      	cmp	r3, #2
 800d784:	f000 8083 	beq.w	800d88e <put_fat+0x144>
 800d788:	e0f6      	b.n	800d978 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	61bb      	str	r3, [r7, #24]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	085b      	lsrs	r3, r3, #1
 800d792:	69ba      	ldr	r2, [r7, #24]
 800d794:	4413      	add	r3, r2
 800d796:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	899b      	ldrh	r3, [r3, #12]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff fe3b 	bl	800d428 <move_window>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d7b6:	7ffb      	ldrb	r3, [r7, #31]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f040 80d6 	bne.w	800d96a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	61ba      	str	r2, [r7, #24]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	8992      	ldrh	r2, [r2, #12]
 800d7ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7d2:	fb00 f202 	mul.w	r2, r0, r2
 800d7d6:	1a9b      	subs	r3, r3, r2
 800d7d8:	440b      	add	r3, r1
 800d7da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00d      	beq.n	800d802 <put_fat+0xb8>
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	b25b      	sxtb	r3, r3
 800d7ec:	f003 030f 	and.w	r3, r3, #15
 800d7f0:	b25a      	sxtb	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	011b      	lsls	r3, r3, #4
 800d7f8:	b25b      	sxtb	r3, r3
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	b25b      	sxtb	r3, r3
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	e001      	b.n	800d806 <put_fat+0xbc>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	b2db      	uxtb	r3, r3
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	899b      	ldrh	r3, [r3, #12]
 800d818:	4619      	mov	r1, r3
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d820:	4413      	add	r3, r2
 800d822:	4619      	mov	r1, r3
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fdff 	bl	800d428 <move_window>
 800d82a:	4603      	mov	r3, r0
 800d82c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d82e:	7ffb      	ldrb	r3, [r7, #31]
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 809c 	bne.w	800d96e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	899b      	ldrh	r3, [r3, #12]
 800d840:	461a      	mov	r2, r3
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	fbb3 f0f2 	udiv	r0, r3, r2
 800d848:	fb00 f202 	mul.w	r2, r0, r2
 800d84c:	1a9b      	subs	r3, r3, r2
 800d84e:	440b      	add	r3, r1
 800d850:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	f003 0301 	and.w	r3, r3, #1
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <put_fat+0x11a>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	091b      	lsrs	r3, r3, #4
 800d860:	b2db      	uxtb	r3, r3
 800d862:	e00e      	b.n	800d882 <put_fat+0x138>
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	f023 030f 	bic.w	r3, r3, #15
 800d86e:	b25a      	sxtb	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	0a1b      	lsrs	r3, r3, #8
 800d874:	b25b      	sxtb	r3, r3
 800d876:	f003 030f 	and.w	r3, r3, #15
 800d87a:	b25b      	sxtb	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b25b      	sxtb	r3, r3
 800d880:	b2db      	uxtb	r3, r3
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2201      	movs	r2, #1
 800d88a:	70da      	strb	r2, [r3, #3]
			break;
 800d88c:	e074      	b.n	800d978 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	899b      	ldrh	r3, [r3, #12]
 800d896:	085b      	lsrs	r3, r3, #1
 800d898:	b29b      	uxth	r3, r3
 800d89a:	4619      	mov	r1, r3
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f7ff fdbe 	bl	800d428 <move_window>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8b0:	7ffb      	ldrb	r3, [r7, #31]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d15d      	bne.n	800d972 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	8992      	ldrh	r2, [r2, #12]
 800d8c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8c8:	fb00 f202 	mul.w	r2, r0, r2
 800d8cc:	1a9b      	subs	r3, r3, r2
 800d8ce:	440b      	add	r3, r1
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	b292      	uxth	r2, r2
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff fb31 	bl	800cf3e <st_word>
			fs->wflag = 1;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	70da      	strb	r2, [r3, #3]
			break;
 800d8e2:	e049      	b.n	800d978 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	899b      	ldrh	r3, [r3, #12]
 800d8ec:	089b      	lsrs	r3, r3, #2
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8f8:	4413      	add	r3, r2
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f7ff fd93 	bl	800d428 <move_window>
 800d902:	4603      	mov	r3, r0
 800d904:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d906:	7ffb      	ldrb	r3, [r7, #31]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d134      	bne.n	800d976 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	8992      	ldrh	r2, [r2, #12]
 800d920:	fbb3 f0f2 	udiv	r0, r3, r2
 800d924:	fb00 f202 	mul.w	r2, r0, r2
 800d928:	1a9b      	subs	r3, r3, r2
 800d92a:	440b      	add	r3, r1
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7ff fae3 	bl	800cef8 <ld_dword>
 800d932:	4603      	mov	r3, r0
 800d934:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d938:	4323      	orrs	r3, r4
 800d93a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	8992      	ldrh	r2, [r2, #12]
 800d94a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d94e:	fb00 f202 	mul.w	r2, r0, r2
 800d952:	1a9b      	subs	r3, r3, r2
 800d954:	440b      	add	r3, r1
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fb0b 	bl	800cf74 <st_dword>
			fs->wflag = 1;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2201      	movs	r2, #1
 800d962:	70da      	strb	r2, [r3, #3]
			break;
 800d964:	e008      	b.n	800d978 <put_fat+0x22e>
		}
	}
 800d966:	bf00      	nop
 800d968:	e006      	b.n	800d978 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d96a:	bf00      	nop
 800d96c:	e004      	b.n	800d978 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d96e:	bf00      	nop
 800d970:	e002      	b.n	800d978 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d972:	bf00      	nop
 800d974:	e000      	b.n	800d978 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d976:	bf00      	nop
	return res;
 800d978:	7ffb      	ldrb	r3, [r7, #31]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3724      	adds	r7, #36	; 0x24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd90      	pop	{r4, r7, pc}

0800d982 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b088      	sub	sp, #32
 800d986:	af00      	add	r7, sp, #0
 800d988:	60f8      	str	r0, [r7, #12]
 800d98a:	60b9      	str	r1, [r7, #8]
 800d98c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d904      	bls.n	800d9a8 <remove_chain+0x26>
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d301      	bcc.n	800d9ac <remove_chain+0x2a>
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	e04b      	b.n	800da44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00c      	beq.n	800d9cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b6:	6879      	ldr	r1, [r7, #4]
 800d9b8:	69b8      	ldr	r0, [r7, #24]
 800d9ba:	f7ff fec6 	bl	800d74a <put_fat>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d9c2:	7ffb      	ldrb	r3, [r7, #31]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <remove_chain+0x4a>
 800d9c8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ca:	e03b      	b.n	800da44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f7ff fde7 	bl	800d5a2 <get_fat>
 800d9d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d031      	beq.n	800da40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d101      	bne.n	800d9e6 <remove_chain+0x64>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	e02e      	b.n	800da44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d101      	bne.n	800d9f2 <remove_chain+0x70>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e028      	b.n	800da44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	69b8      	ldr	r0, [r7, #24]
 800d9f8:	f7ff fea7 	bl	800d74a <put_fat>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800da00:	7ffb      	ldrb	r3, [r7, #31]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <remove_chain+0x88>
 800da06:	7ffb      	ldrb	r3, [r7, #31]
 800da08:	e01c      	b.n	800da44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	695a      	ldr	r2, [r3, #20]
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	3b02      	subs	r3, #2
 800da14:	429a      	cmp	r2, r3
 800da16:	d20b      	bcs.n	800da30 <remove_chain+0xae>
			fs->free_clst++;
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	1c5a      	adds	r2, r3, #1
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	791b      	ldrb	r3, [r3, #4]
 800da26:	f043 0301 	orr.w	r3, r3, #1
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d3c6      	bcc.n	800d9cc <remove_chain+0x4a>
 800da3e:	e000      	b.n	800da42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800da40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10d      	bne.n	800da7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d004      	beq.n	800da78 <create_chain+0x2c>
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	69ba      	ldr	r2, [r7, #24]
 800da74:	429a      	cmp	r2, r3
 800da76:	d31b      	bcc.n	800dab0 <create_chain+0x64>
 800da78:	2301      	movs	r3, #1
 800da7a:	61bb      	str	r3, [r7, #24]
 800da7c:	e018      	b.n	800dab0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fd8e 	bl	800d5a2 <get_fat>
 800da86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d801      	bhi.n	800da92 <create_chain+0x46>
 800da8e:	2301      	movs	r3, #1
 800da90:	e070      	b.n	800db74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da98:	d101      	bne.n	800da9e <create_chain+0x52>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	e06a      	b.n	800db74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	699b      	ldr	r3, [r3, #24]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d201      	bcs.n	800daac <create_chain+0x60>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	e063      	b.n	800db74 <create_chain+0x128>
		scl = clst;
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	3301      	adds	r3, #1
 800dab8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	69fa      	ldr	r2, [r7, #28]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d307      	bcc.n	800dad4 <create_chain+0x88>
				ncl = 2;
 800dac4:	2302      	movs	r3, #2
 800dac6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dac8:	69fa      	ldr	r2, [r7, #28]
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d901      	bls.n	800dad4 <create_chain+0x88>
 800dad0:	2300      	movs	r3, #0
 800dad2:	e04f      	b.n	800db74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dad4:	69f9      	ldr	r1, [r7, #28]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fd63 	bl	800d5a2 <get_fat>
 800dadc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00e      	beq.n	800db02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d003      	beq.n	800daf2 <create_chain+0xa6>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf0:	d101      	bne.n	800daf6 <create_chain+0xaa>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	e03e      	b.n	800db74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800daf6:	69fa      	ldr	r2, [r7, #28]
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d1da      	bne.n	800dab4 <create_chain+0x68>
 800dafe:	2300      	movs	r3, #0
 800db00:	e038      	b.n	800db74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800db02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800db04:	f04f 32ff 	mov.w	r2, #4294967295
 800db08:	69f9      	ldr	r1, [r7, #28]
 800db0a:	6938      	ldr	r0, [r7, #16]
 800db0c:	f7ff fe1d 	bl	800d74a <put_fat>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d109      	bne.n	800db2e <create_chain+0xe2>
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6938      	ldr	r0, [r7, #16]
 800db26:	f7ff fe10 	bl	800d74a <put_fat>
 800db2a:	4603      	mov	r3, r0
 800db2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d116      	bne.n	800db62 <create_chain+0x116>
		fs->last_clst = ncl;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	69fa      	ldr	r2, [r7, #28]
 800db38:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	695a      	ldr	r2, [r3, #20]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	3b02      	subs	r3, #2
 800db44:	429a      	cmp	r2, r3
 800db46:	d804      	bhi.n	800db52 <create_chain+0x106>
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	1e5a      	subs	r2, r3, #1
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	791b      	ldrb	r3, [r3, #4]
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	b2da      	uxtb	r2, r3
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	711a      	strb	r2, [r3, #4]
 800db60:	e007      	b.n	800db72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db62:	7dfb      	ldrb	r3, [r7, #23]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d102      	bne.n	800db6e <create_chain+0x122>
 800db68:	f04f 33ff 	mov.w	r3, #4294967295
 800db6c:	e000      	b.n	800db70 <create_chain+0x124>
 800db6e:	2301      	movs	r3, #1
 800db70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db72:	69fb      	ldr	r3, [r7, #28]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b087      	sub	sp, #28
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db90:	3304      	adds	r3, #4
 800db92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	899b      	ldrh	r3, [r3, #12]
 800db98:	461a      	mov	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	8952      	ldrh	r2, [r2, #10]
 800dba4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dba8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	1d1a      	adds	r2, r3, #4
 800dbae:	613a      	str	r2, [r7, #16]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <clmt_clust+0x42>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e010      	b.n	800dbe0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dbbe:	697a      	ldr	r2, [r7, #20]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d307      	bcc.n	800dbd6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	617b      	str	r3, [r7, #20]
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbd4:	e7e9      	b.n	800dbaa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dbd6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	4413      	add	r3, r2
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	371c      	adds	r7, #28
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc02:	d204      	bcs.n	800dc0e <dir_sdi+0x22>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f003 031f 	and.w	r3, r3, #31
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dc0e:	2302      	movs	r3, #2
 800dc10:	e071      	b.n	800dcf6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	683a      	ldr	r2, [r7, #0]
 800dc16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d106      	bne.n	800dc32 <dir_sdi+0x46>
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d902      	bls.n	800dc32 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10c      	bne.n	800dc52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	095b      	lsrs	r3, r3, #5
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	8912      	ldrh	r2, [r2, #8]
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d301      	bcc.n	800dc48 <dir_sdi+0x5c>
 800dc44:	2302      	movs	r3, #2
 800dc46:	e056      	b.n	800dcf6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	61da      	str	r2, [r3, #28]
 800dc50:	e02d      	b.n	800dcae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	895b      	ldrh	r3, [r3, #10]
 800dc56:	461a      	mov	r2, r3
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	899b      	ldrh	r3, [r3, #12]
 800dc5c:	fb02 f303 	mul.w	r3, r2, r3
 800dc60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc62:	e019      	b.n	800dc98 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6979      	ldr	r1, [r7, #20]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7ff fc9a 	bl	800d5a2 <get_fat>
 800dc6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc76:	d101      	bne.n	800dc7c <dir_sdi+0x90>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e03c      	b.n	800dcf6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d904      	bls.n	800dc8c <dir_sdi+0xa0>
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	699b      	ldr	r3, [r3, #24]
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d301      	bcc.n	800dc90 <dir_sdi+0xa4>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e032      	b.n	800dcf6 <dir_sdi+0x10a>
			ofs -= csz;
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d2e1      	bcs.n	800dc64 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dca0:	6979      	ldr	r1, [r7, #20]
 800dca2:	6938      	ldr	r0, [r7, #16]
 800dca4:	f7ff fc5e 	bl	800d564 <clust2sect>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	69db      	ldr	r3, [r3, #28]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <dir_sdi+0xd4>
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	e01a      	b.n	800dcf6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	69da      	ldr	r2, [r3, #28]
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	899b      	ldrh	r3, [r3, #12]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcd0:	441a      	add	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	899b      	ldrh	r3, [r3, #12]
 800dce0:	461a      	mov	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dce8:	fb00 f202 	mul.w	r2, r0, r2
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	18ca      	adds	r2, r1, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3718      	adds	r7, #24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}

0800dcfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dcfe:	b580      	push	{r7, lr}
 800dd00:	b086      	sub	sp, #24
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
 800dd06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	3320      	adds	r3, #32
 800dd14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <dir_next+0x28>
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd24:	d301      	bcc.n	800dd2a <dir_next+0x2c>
 800dd26:	2304      	movs	r3, #4
 800dd28:	e0bb      	b.n	800dea2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	899b      	ldrh	r3, [r3, #12]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd36:	fb01 f202 	mul.w	r2, r1, r2
 800dd3a:	1a9b      	subs	r3, r3, r2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f040 809d 	bne.w	800de7c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10b      	bne.n	800dd6c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	095b      	lsrs	r3, r3, #5
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	8912      	ldrh	r2, [r2, #8]
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	f0c0 808d 	bcc.w	800de7c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	61da      	str	r2, [r3, #28]
 800dd68:	2304      	movs	r3, #4
 800dd6a:	e09a      	b.n	800dea2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	899b      	ldrh	r3, [r3, #12]
 800dd70:	461a      	mov	r2, r3
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	8952      	ldrh	r2, [r2, #10]
 800dd7c:	3a01      	subs	r2, #1
 800dd7e:	4013      	ands	r3, r2
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d17b      	bne.n	800de7c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	699b      	ldr	r3, [r3, #24]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f7ff fc08 	bl	800d5a2 <get_fat>
 800dd92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d801      	bhi.n	800dd9e <dir_next+0xa0>
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	e081      	b.n	800dea2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda4:	d101      	bne.n	800ddaa <dir_next+0xac>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e07b      	b.n	800dea2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d359      	bcc.n	800de68 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d104      	bne.n	800ddc4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	61da      	str	r2, [r3, #28]
 800ddc0:	2304      	movs	r3, #4
 800ddc2:	e06e      	b.n	800dea2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	4610      	mov	r0, r2
 800ddce:	f7ff fe3d 	bl	800da4c <create_chain>
 800ddd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <dir_next+0xe0>
 800ddda:	2307      	movs	r3, #7
 800dddc:	e061      	b.n	800dea2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d101      	bne.n	800dde8 <dir_next+0xea>
 800dde4:	2302      	movs	r3, #2
 800dde6:	e05c      	b.n	800dea2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddee:	d101      	bne.n	800ddf4 <dir_next+0xf6>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e056      	b.n	800dea2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff fad3 	bl	800d3a0 <sync_window>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <dir_next+0x106>
 800de00:	2301      	movs	r3, #1
 800de02:	e04e      	b.n	800dea2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	899b      	ldrh	r3, [r3, #12]
 800de0e:	461a      	mov	r2, r3
 800de10:	2100      	movs	r1, #0
 800de12:	f7ff f8fc 	bl	800d00e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de16:	2300      	movs	r3, #0
 800de18:	613b      	str	r3, [r7, #16]
 800de1a:	6979      	ldr	r1, [r7, #20]
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f7ff fba1 	bl	800d564 <clust2sect>
 800de22:	4602      	mov	r2, r0
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	631a      	str	r2, [r3, #48]	; 0x30
 800de28:	e012      	b.n	800de50 <dir_next+0x152>
						fs->wflag = 1;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2201      	movs	r2, #1
 800de2e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff fab5 	bl	800d3a0 <sync_window>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <dir_next+0x142>
 800de3c:	2301      	movs	r3, #1
 800de3e:	e030      	b.n	800dea2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	3301      	adds	r3, #1
 800de44:	613b      	str	r3, [r7, #16]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	631a      	str	r2, [r3, #48]	; 0x30
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	895b      	ldrh	r3, [r3, #10]
 800de54:	461a      	mov	r2, r3
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	4293      	cmp	r3, r2
 800de5a:	d3e6      	bcc.n	800de2a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	1ad2      	subs	r2, r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800de6e:	6979      	ldr	r1, [r7, #20]
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff fb77 	bl	800d564 <clust2sect>
 800de76:	4602      	mov	r2, r0
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	899b      	ldrh	r3, [r3, #12]
 800de8c:	461a      	mov	r2, r3
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	fbb3 f0f2 	udiv	r0, r3, r2
 800de94:	fb00 f202 	mul.w	r2, r0, r2
 800de98:	1a9b      	subs	r3, r3, r2
 800de9a:	18ca      	adds	r2, r1, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b086      	sub	sp, #24
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800deba:	2100      	movs	r1, #0
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7ff fe95 	bl	800dbec <dir_sdi>
 800dec2:	4603      	mov	r3, r0
 800dec4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d12b      	bne.n	800df24 <dir_alloc+0x7a>
		n = 0;
 800decc:	2300      	movs	r3, #0
 800dece:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	4619      	mov	r1, r3
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff faa6 	bl	800d428 <move_window>
 800dedc:	4603      	mov	r3, r0
 800dede:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d11d      	bne.n	800df22 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6a1b      	ldr	r3, [r3, #32]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	2be5      	cmp	r3, #229	; 0xe5
 800deee:	d004      	beq.n	800defa <dir_alloc+0x50>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d107      	bne.n	800df0a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	3301      	adds	r3, #1
 800defe:	613b      	str	r3, [r7, #16]
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <dir_alloc+0x64>
 800df08:	e00c      	b.n	800df24 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800df0a:	2300      	movs	r3, #0
 800df0c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800df0e:	2101      	movs	r1, #1
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f7ff fef4 	bl	800dcfe <dir_next>
 800df16:	4603      	mov	r3, r0
 800df18:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800df1a:	7dfb      	ldrb	r3, [r7, #23]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d0d7      	beq.n	800ded0 <dir_alloc+0x26>
 800df20:	e000      	b.n	800df24 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800df22:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	2b04      	cmp	r3, #4
 800df28:	d101      	bne.n	800df2e <dir_alloc+0x84>
 800df2a:	2307      	movs	r3, #7
 800df2c:	75fb      	strb	r3, [r7, #23]
	return res;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	331a      	adds	r3, #26
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe ffbe 	bl	800cec8 <ld_word>
 800df4c:	4603      	mov	r3, r0
 800df4e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	2b03      	cmp	r3, #3
 800df56:	d109      	bne.n	800df6c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	3314      	adds	r3, #20
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7fe ffb3 	bl	800cec8 <ld_word>
 800df62:	4603      	mov	r3, r0
 800df64:	041b      	lsls	r3, r3, #16
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	4313      	orrs	r3, r2
 800df6a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800df6c:	68fb      	ldr	r3, [r7, #12]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b084      	sub	sp, #16
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	331a      	adds	r3, #26
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	b292      	uxth	r2, r2
 800df8a:	4611      	mov	r1, r2
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe ffd6 	bl	800cf3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b03      	cmp	r3, #3
 800df98:	d109      	bne.n	800dfae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	f103 0214 	add.w	r2, r3, #20
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	0c1b      	lsrs	r3, r3, #16
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	f7fe ffc8 	bl	800cf3e <st_word>
	}
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b086      	sub	sp, #24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7ff fe10 	bl	800dbec <dir_sdi>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dfd0:	7dfb      	ldrb	r3, [r7, #23]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <dir_find+0x24>
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
 800dfd8:	e03e      	b.n	800e058 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	6938      	ldr	r0, [r7, #16]
 800dfe2:	f7ff fa21 	bl	800d428 <move_window>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d12f      	bne.n	800e050 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <dir_find+0x4e>
 800dffe:	2304      	movs	r3, #4
 800e000:	75fb      	strb	r3, [r7, #23]
 800e002:	e028      	b.n	800e056 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a1b      	ldr	r3, [r3, #32]
 800e008:	330b      	adds	r3, #11
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e010:	b2da      	uxtb	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6a1b      	ldr	r3, [r3, #32]
 800e01a:	330b      	adds	r3, #11
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	f003 0308 	and.w	r3, r3, #8
 800e022:	2b00      	cmp	r3, #0
 800e024:	d10a      	bne.n	800e03c <dir_find+0x86>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6a18      	ldr	r0, [r3, #32]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3324      	adds	r3, #36	; 0x24
 800e02e:	220b      	movs	r2, #11
 800e030:	4619      	mov	r1, r3
 800e032:	f7ff f807 	bl	800d044 <mem_cmp>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00b      	beq.n	800e054 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e03c:	2100      	movs	r1, #0
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff fe5d 	bl	800dcfe <dir_next>
 800e044:	4603      	mov	r3, r0
 800e046:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e048:	7dfb      	ldrb	r3, [r7, #23]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d0c5      	beq.n	800dfda <dir_find+0x24>
 800e04e:	e002      	b.n	800e056 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e050:	bf00      	nop
 800e052:	e000      	b.n	800e056 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e054:	bf00      	nop

	return res;
 800e056:	7dfb      	ldrb	r3, [r7, #23]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e06e:	2101      	movs	r1, #1
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff ff1a 	bl	800deaa <dir_alloc>
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11c      	bne.n	800e0ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	4619      	mov	r1, r3
 800e086:	68b8      	ldr	r0, [r7, #8]
 800e088:	f7ff f9ce 	bl	800d428 <move_window>
 800e08c:	4603      	mov	r3, r0
 800e08e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d111      	bne.n	800e0ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	2220      	movs	r2, #32
 800e09c:	2100      	movs	r1, #0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe ffb5 	bl	800d00e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a18      	ldr	r0, [r3, #32]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	3324      	adds	r3, #36	; 0x24
 800e0ac:	220b      	movs	r2, #11
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	f7fe ff8c 	bl	800cfcc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	69db      	ldr	r3, [r3, #28]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d04e      	beq.n	800e17a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	613b      	str	r3, [r7, #16]
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e0e4:	e021      	b.n	800e12a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a1a      	ldr	r2, [r3, #32]
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	1c59      	adds	r1, r3, #1
 800e0ee:	6179      	str	r1, [r7, #20]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b20      	cmp	r3, #32
 800e0fa:	d100      	bne.n	800e0fe <get_fileinfo+0x3a>
 800e0fc:	e015      	b.n	800e12a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e0fe:	7bfb      	ldrb	r3, [r7, #15]
 800e100:	2b05      	cmp	r3, #5
 800e102:	d101      	bne.n	800e108 <get_fileinfo+0x44>
 800e104:	23e5      	movs	r3, #229	; 0xe5
 800e106:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b09      	cmp	r3, #9
 800e10c:	d106      	bne.n	800e11c <get_fileinfo+0x58>
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	613a      	str	r2, [r7, #16]
 800e114:	683a      	ldr	r2, [r7, #0]
 800e116:	4413      	add	r3, r2
 800e118:	222e      	movs	r2, #46	; 0x2e
 800e11a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	613a      	str	r2, [r7, #16]
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	4413      	add	r3, r2
 800e126:	7bfa      	ldrb	r2, [r7, #15]
 800e128:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2b0a      	cmp	r3, #10
 800e12e:	d9da      	bls.n	800e0e6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	4413      	add	r3, r2
 800e136:	3309      	adds	r3, #9
 800e138:	2200      	movs	r2, #0
 800e13a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	7ada      	ldrb	r2, [r3, #11]
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a1b      	ldr	r3, [r3, #32]
 800e14a:	331c      	adds	r3, #28
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fed3 	bl	800cef8 <ld_dword>
 800e152:	4602      	mov	r2, r0
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a1b      	ldr	r3, [r3, #32]
 800e15c:	3316      	adds	r3, #22
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe feca 	bl	800cef8 <ld_dword>
 800e164:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	b29a      	uxth	r2, r3
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	80da      	strh	r2, [r3, #6]
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	0c1b      	lsrs	r3, r3, #16
 800e172:	b29a      	uxth	r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	809a      	strh	r2, [r3, #4]
 800e178:	e000      	b.n	800e17c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e17a:	bf00      	nop
}
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
	...

0800e184 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b088      	sub	sp, #32
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	60fb      	str	r3, [r7, #12]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3324      	adds	r3, #36	; 0x24
 800e198:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e19a:	220b      	movs	r2, #11
 800e19c:	2120      	movs	r1, #32
 800e19e:	68b8      	ldr	r0, [r7, #8]
 800e1a0:	f7fe ff35 	bl	800d00e <mem_set>
	si = i = 0; ni = 8;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	613b      	str	r3, [r7, #16]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	61fb      	str	r3, [r7, #28]
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	61fa      	str	r2, [r7, #28]
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	4413      	add	r3, r2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1be:	7efb      	ldrb	r3, [r7, #27]
 800e1c0:	2b20      	cmp	r3, #32
 800e1c2:	d94e      	bls.n	800e262 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e1c4:	7efb      	ldrb	r3, [r7, #27]
 800e1c6:	2b2f      	cmp	r3, #47	; 0x2f
 800e1c8:	d006      	beq.n	800e1d8 <create_name+0x54>
 800e1ca:	7efb      	ldrb	r3, [r7, #27]
 800e1cc:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ce:	d110      	bne.n	800e1f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1d0:	e002      	b.n	800e1d8 <create_name+0x54>
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	4413      	add	r3, r2
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e2:	d0f6      	beq.n	800e1d2 <create_name+0x4e>
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ee:	d0f0      	beq.n	800e1d2 <create_name+0x4e>
			break;
 800e1f0:	e038      	b.n	800e264 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e1f2:	7efb      	ldrb	r3, [r7, #27]
 800e1f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f6:	d003      	beq.n	800e200 <create_name+0x7c>
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d30c      	bcc.n	800e21a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2b0b      	cmp	r3, #11
 800e204:	d002      	beq.n	800e20c <create_name+0x88>
 800e206:	7efb      	ldrb	r3, [r7, #27]
 800e208:	2b2e      	cmp	r3, #46	; 0x2e
 800e20a:	d001      	beq.n	800e210 <create_name+0x8c>
 800e20c:	2306      	movs	r3, #6
 800e20e:	e044      	b.n	800e29a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e210:	2308      	movs	r3, #8
 800e212:	613b      	str	r3, [r7, #16]
 800e214:	230b      	movs	r3, #11
 800e216:	617b      	str	r3, [r7, #20]
			continue;
 800e218:	e022      	b.n	800e260 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e21a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da04      	bge.n	800e22c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e222:	7efb      	ldrb	r3, [r7, #27]
 800e224:	3b80      	subs	r3, #128	; 0x80
 800e226:	4a1f      	ldr	r2, [pc, #124]	; (800e2a4 <create_name+0x120>)
 800e228:	5cd3      	ldrb	r3, [r2, r3]
 800e22a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e22c:	7efb      	ldrb	r3, [r7, #27]
 800e22e:	4619      	mov	r1, r3
 800e230:	481d      	ldr	r0, [pc, #116]	; (800e2a8 <create_name+0x124>)
 800e232:	f7fe ff2e 	bl	800d092 <chk_chr>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <create_name+0xbc>
 800e23c:	2306      	movs	r3, #6
 800e23e:	e02c      	b.n	800e29a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e240:	7efb      	ldrb	r3, [r7, #27]
 800e242:	2b60      	cmp	r3, #96	; 0x60
 800e244:	d905      	bls.n	800e252 <create_name+0xce>
 800e246:	7efb      	ldrb	r3, [r7, #27]
 800e248:	2b7a      	cmp	r3, #122	; 0x7a
 800e24a:	d802      	bhi.n	800e252 <create_name+0xce>
 800e24c:	7efb      	ldrb	r3, [r7, #27]
 800e24e:	3b20      	subs	r3, #32
 800e250:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	1c5a      	adds	r2, r3, #1
 800e256:	613a      	str	r2, [r7, #16]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	4413      	add	r3, r2
 800e25c:	7efa      	ldrb	r2, [r7, #27]
 800e25e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e260:	e7a6      	b.n	800e1b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e262:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	441a      	add	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <create_name+0xf4>
 800e274:	2306      	movs	r3, #6
 800e276:	e010      	b.n	800e29a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	2be5      	cmp	r3, #229	; 0xe5
 800e27e:	d102      	bne.n	800e286 <create_name+0x102>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2205      	movs	r2, #5
 800e284:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e286:	7efb      	ldrb	r3, [r7, #27]
 800e288:	2b20      	cmp	r3, #32
 800e28a:	d801      	bhi.n	800e290 <create_name+0x10c>
 800e28c:	2204      	movs	r2, #4
 800e28e:	e000      	b.n	800e292 <create_name+0x10e>
 800e290:	2200      	movs	r2, #0
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	330b      	adds	r3, #11
 800e296:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e298:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3720      	adds	r7, #32
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	0802e4d0 	.word	0x0802e4d0
 800e2a8:	08013e80 	.word	0x08013e80

0800e2ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2c0:	e002      	b.n	800e2c8 <follow_path+0x1c>
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	603b      	str	r3, [r7, #0]
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2ce:	d0f8      	beq.n	800e2c2 <follow_path+0x16>
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e2d6:	d0f4      	beq.n	800e2c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2b1f      	cmp	r3, #31
 800e2e4:	d80a      	bhi.n	800e2fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2280      	movs	r2, #128	; 0x80
 800e2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff fc7b 	bl	800dbec <dir_sdi>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75fb      	strb	r3, [r7, #23]
 800e2fa:	e048      	b.n	800e38e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f7ff ff3f 	bl	800e184 <create_name>
 800e306:	4603      	mov	r3, r0
 800e308:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d139      	bne.n	800e384 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff fe50 	bl	800dfb6 <dir_find>
 800e316:	4603      	mov	r3, r0
 800e318:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e320:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e322:	7dfb      	ldrb	r3, [r7, #23]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	d12c      	bne.n	800e388 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e32e:	7afb      	ldrb	r3, [r7, #11]
 800e330:	f003 0304 	and.w	r3, r3, #4
 800e334:	2b00      	cmp	r3, #0
 800e336:	d127      	bne.n	800e388 <follow_path+0xdc>
 800e338:	2305      	movs	r3, #5
 800e33a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e33c:	e024      	b.n	800e388 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e33e:	7afb      	ldrb	r3, [r7, #11]
 800e340:	f003 0304 	and.w	r3, r3, #4
 800e344:	2b00      	cmp	r3, #0
 800e346:	d121      	bne.n	800e38c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	799b      	ldrb	r3, [r3, #6]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	2b00      	cmp	r3, #0
 800e352:	d102      	bne.n	800e35a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e354:	2305      	movs	r3, #5
 800e356:	75fb      	strb	r3, [r7, #23]
 800e358:	e019      	b.n	800e38e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	695b      	ldr	r3, [r3, #20]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	8992      	ldrh	r2, [r2, #12]
 800e368:	fbb3 f0f2 	udiv	r0, r3, r2
 800e36c:	fb00 f202 	mul.w	r2, r0, r2
 800e370:	1a9b      	subs	r3, r3, r2
 800e372:	440b      	add	r3, r1
 800e374:	4619      	mov	r1, r3
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7ff fdde 	bl	800df38 <ld_clust>
 800e37c:	4602      	mov	r2, r0
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e382:	e7bb      	b.n	800e2fc <follow_path+0x50>
			if (res != FR_OK) break;
 800e384:	bf00      	nop
 800e386:	e002      	b.n	800e38e <follow_path+0xe2>
				break;
 800e388:	bf00      	nop
 800e38a:	e000      	b.n	800e38e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e38c:	bf00      	nop
			}
		}
	}

	return res;
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e398:	b480      	push	{r7}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d031      	beq.n	800e412 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	617b      	str	r3, [r7, #20]
 800e3b4:	e002      	b.n	800e3bc <get_ldnumber+0x24>
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	617b      	str	r3, [r7, #20]
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b20      	cmp	r3, #32
 800e3c2:	d903      	bls.n	800e3cc <get_ldnumber+0x34>
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b3a      	cmp	r3, #58	; 0x3a
 800e3ca:	d1f4      	bne.n	800e3b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b3a      	cmp	r3, #58	; 0x3a
 800e3d2:	d11c      	bne.n	800e40e <get_ldnumber+0x76>
			tp = *path;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	60fa      	str	r2, [r7, #12]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	3b30      	subs	r3, #48	; 0x30
 800e3e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b09      	cmp	r3, #9
 800e3ea:	d80e      	bhi.n	800e40a <get_ldnumber+0x72>
 800e3ec:	68fa      	ldr	r2, [r7, #12]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d10a      	bne.n	800e40a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d107      	bne.n	800e40a <get_ldnumber+0x72>
					vol = (int)i;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	3301      	adds	r3, #1
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	e002      	b.n	800e414 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e40e:	2300      	movs	r3, #0
 800e410:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e412:	693b      	ldr	r3, [r7, #16]
}
 800e414:	4618      	mov	r0, r3
 800e416:	371c      	adds	r7, #28
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	70da      	strb	r2, [r3, #3]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f04f 32ff 	mov.w	r2, #4294967295
 800e436:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7fe fff4 	bl	800d428 <move_window>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d001      	beq.n	800e44a <check_fs+0x2a>
 800e446:	2304      	movs	r3, #4
 800e448:	e038      	b.n	800e4bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3334      	adds	r3, #52	; 0x34
 800e44e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe fd38 	bl	800cec8 <ld_word>
 800e458:	4603      	mov	r3, r0
 800e45a:	461a      	mov	r2, r3
 800e45c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e460:	429a      	cmp	r2, r3
 800e462:	d001      	beq.n	800e468 <check_fs+0x48>
 800e464:	2303      	movs	r3, #3
 800e466:	e029      	b.n	800e4bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e46e:	2be9      	cmp	r3, #233	; 0xe9
 800e470:	d009      	beq.n	800e486 <check_fs+0x66>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e478:	2beb      	cmp	r3, #235	; 0xeb
 800e47a:	d11e      	bne.n	800e4ba <check_fs+0x9a>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e482:	2b90      	cmp	r3, #144	; 0x90
 800e484:	d119      	bne.n	800e4ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	3334      	adds	r3, #52	; 0x34
 800e48a:	3336      	adds	r3, #54	; 0x36
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe fd33 	bl	800cef8 <ld_dword>
 800e492:	4603      	mov	r3, r0
 800e494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e498:	4a0a      	ldr	r2, [pc, #40]	; (800e4c4 <check_fs+0xa4>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d101      	bne.n	800e4a2 <check_fs+0x82>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e00c      	b.n	800e4bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3334      	adds	r3, #52	; 0x34
 800e4a6:	3352      	adds	r3, #82	; 0x52
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fe fd25 	bl	800cef8 <ld_dword>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	4a05      	ldr	r2, [pc, #20]	; (800e4c8 <check_fs+0xa8>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d101      	bne.n	800e4ba <check_fs+0x9a>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e000      	b.n	800e4bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4ba:	2302      	movs	r3, #2
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	00544146 	.word	0x00544146
 800e4c8:	33544146 	.word	0x33544146

0800e4cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b096      	sub	sp, #88	; 0x58
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f7ff ff59 	bl	800e398 <get_ldnumber>
 800e4e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	da01      	bge.n	800e4f2 <find_volume+0x26>
 800e4ee:	230b      	movs	r3, #11
 800e4f0:	e262      	b.n	800e9b8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e4f2:	4a9f      	ldr	r2, [pc, #636]	; (800e770 <find_volume+0x2a4>)
 800e4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <find_volume+0x3a>
 800e502:	230c      	movs	r3, #12
 800e504:	e258      	b.n	800e9b8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e50a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	f023 0301 	bic.w	r3, r3, #1
 800e512:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d01a      	beq.n	800e552 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	785b      	ldrb	r3, [r3, #1]
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe fc33 	bl	800cd8c <disk_status>
 800e526:	4603      	mov	r3, r0
 800e528:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e52c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e530:	f003 0301 	and.w	r3, r3, #1
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10c      	bne.n	800e552 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d007      	beq.n	800e54e <find_volume+0x82>
 800e53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e542:	f003 0304 	and.w	r3, r3, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e54a:	230a      	movs	r3, #10
 800e54c:	e234      	b.n	800e9b8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800e54e:	2300      	movs	r3, #0
 800e550:	e232      	b.n	800e9b8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	2200      	movs	r2, #0
 800e556:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e562:	785b      	ldrb	r3, [r3, #1]
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe fc2b 	bl	800cdc0 <disk_initialize>
 800e56a:	4603      	mov	r3, r0
 800e56c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e570:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e574:	f003 0301 	and.w	r3, r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d001      	beq.n	800e580 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e57c:	2303      	movs	r3, #3
 800e57e:	e21b      	b.n	800e9b8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d007      	beq.n	800e596 <find_volume+0xca>
 800e586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e58a:	f003 0304 	and.w	r3, r3, #4
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d001      	beq.n	800e596 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e592:	230a      	movs	r3, #10
 800e594:	e210      	b.n	800e9b8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	7858      	ldrb	r0, [r3, #1]
 800e59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59c:	330c      	adds	r3, #12
 800e59e:	461a      	mov	r2, r3
 800e5a0:	2102      	movs	r1, #2
 800e5a2:	f7fe fc73 	bl	800ce8c <disk_ioctl>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <find_volume+0xe4>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e203      	b.n	800e9b8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5b8:	d80d      	bhi.n	800e5d6 <find_volume+0x10a>
 800e5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5bc:	899b      	ldrh	r3, [r3, #12]
 800e5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5c2:	d308      	bcc.n	800e5d6 <find_volume+0x10a>
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	899b      	ldrh	r3, [r3, #12]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5cc:	899b      	ldrh	r3, [r3, #12]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <find_volume+0x10e>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e1ee      	b.n	800e9b8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5e2:	f7ff ff1d 	bl	800e420 <check_fs>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d149      	bne.n	800e688 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f8:	e01e      	b.n	800e638 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e602:	011b      	lsls	r3, r3, #4
 800e604:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e608:	4413      	add	r3, r2
 800e60a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	3304      	adds	r3, #4
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d006      	beq.n	800e624 <find_volume+0x158>
 800e616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e618:	3308      	adds	r3, #8
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe fc6c 	bl	800cef8 <ld_dword>
 800e620:	4602      	mov	r2, r0
 800e622:	e000      	b.n	800e626 <find_volume+0x15a>
 800e624:	2200      	movs	r2, #0
 800e626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	3358      	adds	r3, #88	; 0x58
 800e62c:	443b      	add	r3, r7
 800e62e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e634:	3301      	adds	r3, #1
 800e636:	643b      	str	r3, [r7, #64]	; 0x40
 800e638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d9dd      	bls.n	800e5fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e63e:	2300      	movs	r3, #0
 800e640:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <find_volume+0x182>
 800e648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e64a:	3b01      	subs	r3, #1
 800e64c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	3358      	adds	r3, #88	; 0x58
 800e654:	443b      	add	r3, r7
 800e656:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e65a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d005      	beq.n	800e66e <find_volume+0x1a2>
 800e662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e664:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e666:	f7ff fedb 	bl	800e420 <check_fs>
 800e66a:	4603      	mov	r3, r0
 800e66c:	e000      	b.n	800e670 <find_volume+0x1a4>
 800e66e:	2303      	movs	r3, #3
 800e670:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d905      	bls.n	800e688 <find_volume+0x1bc>
 800e67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e67e:	3301      	adds	r3, #1
 800e680:	643b      	str	r3, [r7, #64]	; 0x40
 800e682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e684:	2b03      	cmp	r3, #3
 800e686:	d9e2      	bls.n	800e64e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	d101      	bne.n	800e694 <find_volume+0x1c8>
 800e690:	2301      	movs	r3, #1
 800e692:	e191      	b.n	800e9b8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d901      	bls.n	800e6a0 <find_volume+0x1d4>
 800e69c:	230d      	movs	r3, #13
 800e69e:	e18b      	b.n	800e9b8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	3334      	adds	r3, #52	; 0x34
 800e6a4:	330b      	adds	r3, #11
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fc0e 	bl	800cec8 <ld_word>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	899b      	ldrh	r3, [r3, #12]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d001      	beq.n	800e6bc <find_volume+0x1f0>
 800e6b8:	230d      	movs	r3, #13
 800e6ba:	e17d      	b.n	800e9b8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	3334      	adds	r3, #52	; 0x34
 800e6c0:	3316      	adds	r3, #22
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe fc00 	bl	800cec8 <ld_word>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d106      	bne.n	800e6e0 <find_volume+0x214>
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d4:	3334      	adds	r3, #52	; 0x34
 800e6d6:	3324      	adds	r3, #36	; 0x24
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fe fc0d 	bl	800cef8 <ld_dword>
 800e6de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6e4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	789b      	ldrb	r3, [r3, #2]
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d005      	beq.n	800e704 <find_volume+0x238>
 800e6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fa:	789b      	ldrb	r3, [r3, #2]
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d001      	beq.n	800e704 <find_volume+0x238>
 800e700:	230d      	movs	r3, #13
 800e702:	e159      	b.n	800e9b8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e706:	789b      	ldrb	r3, [r3, #2]
 800e708:	461a      	mov	r2, r3
 800e70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e70c:	fb02 f303 	mul.w	r3, r2, r3
 800e710:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e718:	b29a      	uxth	r2, r3
 800e71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e720:	895b      	ldrh	r3, [r3, #10]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d008      	beq.n	800e738 <find_volume+0x26c>
 800e726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e728:	895b      	ldrh	r3, [r3, #10]
 800e72a:	461a      	mov	r2, r3
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	895b      	ldrh	r3, [r3, #10]
 800e730:	3b01      	subs	r3, #1
 800e732:	4013      	ands	r3, r2
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <find_volume+0x270>
 800e738:	230d      	movs	r3, #13
 800e73a:	e13d      	b.n	800e9b8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	3334      	adds	r3, #52	; 0x34
 800e740:	3311      	adds	r3, #17
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe fbc0 	bl	800cec8 <ld_word>
 800e748:	4603      	mov	r3, r0
 800e74a:	461a      	mov	r2, r3
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	891b      	ldrh	r3, [r3, #8]
 800e754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e756:	8992      	ldrh	r2, [r2, #12]
 800e758:	0952      	lsrs	r2, r2, #5
 800e75a:	b292      	uxth	r2, r2
 800e75c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e760:	fb01 f202 	mul.w	r2, r1, r2
 800e764:	1a9b      	subs	r3, r3, r2
 800e766:	b29b      	uxth	r3, r3
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <find_volume+0x2a8>
 800e76c:	230d      	movs	r3, #13
 800e76e:	e123      	b.n	800e9b8 <find_volume+0x4ec>
 800e770:	20005c48 	.word	0x20005c48

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e776:	3334      	adds	r3, #52	; 0x34
 800e778:	3313      	adds	r3, #19
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe fba4 	bl	800cec8 <ld_word>
 800e780:	4603      	mov	r3, r0
 800e782:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e786:	2b00      	cmp	r3, #0
 800e788:	d106      	bne.n	800e798 <find_volume+0x2cc>
 800e78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78c:	3334      	adds	r3, #52	; 0x34
 800e78e:	3320      	adds	r3, #32
 800e790:	4618      	mov	r0, r3
 800e792:	f7fe fbb1 	bl	800cef8 <ld_dword>
 800e796:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	3334      	adds	r3, #52	; 0x34
 800e79c:	330e      	adds	r3, #14
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fe fb92 	bl	800cec8 <ld_word>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e7a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d101      	bne.n	800e7b2 <find_volume+0x2e6>
 800e7ae:	230d      	movs	r3, #13
 800e7b0:	e102      	b.n	800e9b8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e7b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b6:	4413      	add	r3, r2
 800e7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7ba:	8911      	ldrh	r1, [r2, #8]
 800e7bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7be:	8992      	ldrh	r2, [r2, #12]
 800e7c0:	0952      	lsrs	r2, r2, #5
 800e7c2:	b292      	uxth	r2, r2
 800e7c4:	fbb1 f2f2 	udiv	r2, r1, r2
 800e7c8:	b292      	uxth	r2, r2
 800e7ca:	4413      	add	r3, r2
 800e7cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e7ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d201      	bcs.n	800e7da <find_volume+0x30e>
 800e7d6:	230d      	movs	r3, #13
 800e7d8:	e0ee      	b.n	800e9b8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e7da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7e2:	8952      	ldrh	r2, [r2, #10]
 800e7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d101      	bne.n	800e7f4 <find_volume+0x328>
 800e7f0:	230d      	movs	r3, #13
 800e7f2:	e0e1      	b.n	800e9b8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e800:	4293      	cmp	r3, r2
 800e802:	d802      	bhi.n	800e80a <find_volume+0x33e>
 800e804:	2302      	movs	r3, #2
 800e806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e810:	4293      	cmp	r3, r2
 800e812:	d802      	bhi.n	800e81a <find_volume+0x34e>
 800e814:	2301      	movs	r3, #1
 800e816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	1c9a      	adds	r2, r3, #2
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e826:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e828:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e82c:	441a      	add	r2, r3
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e832:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	441a      	add	r2, r3
 800e838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e83c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e840:	2b03      	cmp	r3, #3
 800e842:	d11e      	bne.n	800e882 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	3334      	adds	r3, #52	; 0x34
 800e848:	332a      	adds	r3, #42	; 0x2a
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe fb3c 	bl	800cec8 <ld_word>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <find_volume+0x38e>
 800e856:	230d      	movs	r3, #13
 800e858:	e0ae      	b.n	800e9b8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85c:	891b      	ldrh	r3, [r3, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <find_volume+0x39a>
 800e862:	230d      	movs	r3, #13
 800e864:	e0a8      	b.n	800e9b8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e868:	3334      	adds	r3, #52	; 0x34
 800e86a:	332c      	adds	r3, #44	; 0x2c
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7fe fb43 	bl	800cef8 <ld_dword>
 800e872:	4602      	mov	r2, r0
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	647b      	str	r3, [r7, #68]	; 0x44
 800e880:	e01f      	b.n	800e8c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	891b      	ldrh	r3, [r3, #8]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d101      	bne.n	800e88e <find_volume+0x3c2>
 800e88a:	230d      	movs	r3, #13
 800e88c:	e094      	b.n	800e9b8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e894:	441a      	add	r2, r3
 800e896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e898:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e89a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d103      	bne.n	800e8aa <find_volume+0x3de>
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	005b      	lsls	r3, r3, #1
 800e8a8:	e00a      	b.n	800e8c0 <find_volume+0x3f4>
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ac:	699a      	ldr	r2, [r3, #24]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	085a      	lsrs	r2, r3, #1
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e8c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c4:	69da      	ldr	r2, [r3, #28]
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	899b      	ldrh	r3, [r3, #12]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ce:	440b      	add	r3, r1
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8d4:	8989      	ldrh	r1, [r1, #12]
 800e8d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d201      	bcs.n	800e8e2 <find_volume+0x416>
 800e8de:	230d      	movs	r3, #13
 800e8e0:	e06a      	b.n	800e9b8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e8:	615a      	str	r2, [r3, #20]
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ec:	695a      	ldr	r2, [r3, #20]
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	2280      	movs	r2, #128	; 0x80
 800e8f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	d149      	bne.n	800e994 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	3334      	adds	r3, #52	; 0x34
 800e904:	3330      	adds	r3, #48	; 0x30
 800e906:	4618      	mov	r0, r3
 800e908:	f7fe fade 	bl	800cec8 <ld_word>
 800e90c:	4603      	mov	r3, r0
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d140      	bne.n	800e994 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e914:	3301      	adds	r3, #1
 800e916:	4619      	mov	r1, r3
 800e918:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e91a:	f7fe fd85 	bl	800d428 <move_window>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d137      	bne.n	800e994 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	2200      	movs	r2, #0
 800e928:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	3334      	adds	r3, #52	; 0x34
 800e92e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fac8 	bl	800cec8 <ld_word>
 800e938:	4603      	mov	r3, r0
 800e93a:	461a      	mov	r2, r3
 800e93c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e940:	429a      	cmp	r2, r3
 800e942:	d127      	bne.n	800e994 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	3334      	adds	r3, #52	; 0x34
 800e948:	4618      	mov	r0, r3
 800e94a:	f7fe fad5 	bl	800cef8 <ld_dword>
 800e94e:	4603      	mov	r3, r0
 800e950:	4a1b      	ldr	r2, [pc, #108]	; (800e9c0 <find_volume+0x4f4>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d11e      	bne.n	800e994 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e958:	3334      	adds	r3, #52	; 0x34
 800e95a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe faca 	bl	800cef8 <ld_dword>
 800e964:	4603      	mov	r3, r0
 800e966:	4a17      	ldr	r2, [pc, #92]	; (800e9c4 <find_volume+0x4f8>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d113      	bne.n	800e994 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	3334      	adds	r3, #52	; 0x34
 800e970:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e974:	4618      	mov	r0, r3
 800e976:	f7fe fabf 	bl	800cef8 <ld_dword>
 800e97a:	4602      	mov	r2, r0
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e982:	3334      	adds	r3, #52	; 0x34
 800e984:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fe fab5 	bl	800cef8 <ld_dword>
 800e98e:	4602      	mov	r2, r0
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e99a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e99c:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <find_volume+0x4fc>)
 800e99e:	881b      	ldrh	r3, [r3, #0]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	4b08      	ldr	r3, [pc, #32]	; (800e9c8 <find_volume+0x4fc>)
 800e9a6:	801a      	strh	r2, [r3, #0]
 800e9a8:	4b07      	ldr	r3, [pc, #28]	; (800e9c8 <find_volume+0x4fc>)
 800e9aa:	881a      	ldrh	r2, [r3, #0]
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e9b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9b2:	f7fe fcd1 	bl	800d358 <clear_lock>
#endif
	return FR_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3758      	adds	r7, #88	; 0x58
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	41615252 	.word	0x41615252
 800e9c4:	61417272 	.word	0x61417272
 800e9c8:	20005c4c 	.word	0x20005c4c

0800e9cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e9d6:	2309      	movs	r3, #9
 800e9d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01c      	beq.n	800ea1a <validate+0x4e>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d018      	beq.n	800ea1a <validate+0x4e>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d013      	beq.n	800ea1a <validate+0x4e>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	889a      	ldrh	r2, [r3, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	88db      	ldrh	r3, [r3, #6]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d10c      	bne.n	800ea1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	785b      	ldrb	r3, [r3, #1]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fe f9c0 	bl	800cd8c <disk_status>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <validate+0x4e>
			res = FR_OK;
 800ea16:	2300      	movs	r3, #0
 800ea18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <validate+0x5a>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	e000      	b.n	800ea28 <validate+0x5c>
 800ea26:	2300      	movs	r3, #0
 800ea28:	683a      	ldr	r2, [r7, #0]
 800ea2a:	6013      	str	r3, [r2, #0]
	return res;
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
	...

0800ea38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b088      	sub	sp, #32
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea4a:	f107 0310 	add.w	r3, r7, #16
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7ff fca2 	bl	800e398 <get_ldnumber>
 800ea54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	da01      	bge.n	800ea60 <f_mount+0x28>
 800ea5c:	230b      	movs	r3, #11
 800ea5e:	e02b      	b.n	800eab8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea60:	4a17      	ldr	r2, [pc, #92]	; (800eac0 <f_mount+0x88>)
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea70:	69b8      	ldr	r0, [r7, #24]
 800ea72:	f7fe fc71 	bl	800d358 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	490d      	ldr	r1, [pc, #52]	; (800eac0 <f_mount+0x88>)
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <f_mount+0x66>
 800ea98:	79fb      	ldrb	r3, [r7, #7]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d001      	beq.n	800eaa2 <f_mount+0x6a>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	e00a      	b.n	800eab8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eaa2:	f107 010c 	add.w	r1, r7, #12
 800eaa6:	f107 0308 	add.w	r3, r7, #8
 800eaaa:	2200      	movs	r2, #0
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7ff fd0d 	bl	800e4cc <find_volume>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3720      	adds	r7, #32
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	20005c48 	.word	0x20005c48

0800eac4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b098      	sub	sp, #96	; 0x60
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <f_open+0x18>
 800ead8:	2309      	movs	r3, #9
 800eada:	e1bb      	b.n	800ee54 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eae2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eae4:	79fa      	ldrb	r2, [r7, #7]
 800eae6:	f107 0110 	add.w	r1, r7, #16
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7ff fcec 	bl	800e4cc <find_volume>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800eafa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f040 819f 	bne.w	800ee42 <f_open+0x37e>
		dj.obj.fs = fs;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	f107 0314 	add.w	r3, r7, #20
 800eb0e:	4611      	mov	r1, r2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff fbcb 	bl	800e2ac <follow_path>
 800eb16:	4603      	mov	r3, r0
 800eb18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eb1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d11a      	bne.n	800eb5a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eb24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb28:	b25b      	sxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	da03      	bge.n	800eb36 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eb2e:	2306      	movs	r3, #6
 800eb30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb34:	e011      	b.n	800eb5a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	f023 0301 	bic.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	bf14      	ite	ne
 800eb40:	2301      	movne	r3, #1
 800eb42:	2300      	moveq	r3, #0
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	461a      	mov	r2, r3
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fe faba 	bl	800d0c8 <chk_lock>
 800eb54:	4603      	mov	r3, r0
 800eb56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb5a:	79fb      	ldrb	r3, [r7, #7]
 800eb5c:	f003 031c 	and.w	r3, r3, #28
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d07f      	beq.n	800ec64 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d017      	beq.n	800eb9c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	d10e      	bne.n	800eb92 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb74:	f7fe fb04 	bl	800d180 <enq_lock>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d006      	beq.n	800eb8c <f_open+0xc8>
 800eb7e:	f107 0314 	add.w	r3, r7, #20
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff fa6c 	bl	800e060 <dir_register>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	e000      	b.n	800eb8e <f_open+0xca>
 800eb8c:	2312      	movs	r3, #18
 800eb8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	f043 0308 	orr.w	r3, r3, #8
 800eb98:	71fb      	strb	r3, [r7, #7]
 800eb9a:	e010      	b.n	800ebbe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb9c:	7ebb      	ldrb	r3, [r7, #26]
 800eb9e:	f003 0311 	and.w	r3, r3, #17
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d003      	beq.n	800ebae <f_open+0xea>
					res = FR_DENIED;
 800eba6:	2307      	movs	r3, #7
 800eba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ebac:	e007      	b.n	800ebbe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ebae:	79fb      	ldrb	r3, [r7, #7]
 800ebb0:	f003 0304 	and.w	r3, r3, #4
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <f_open+0xfa>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ebbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d168      	bne.n	800ec98 <f_open+0x1d4>
 800ebc6:	79fb      	ldrb	r3, [r7, #7]
 800ebc8:	f003 0308 	and.w	r3, r3, #8
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d063      	beq.n	800ec98 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ebd0:	f7fd ff70 	bl	800cab4 <get_fattime>
 800ebd4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ebd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd8:	330e      	adds	r3, #14
 800ebda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe f9c9 	bl	800cf74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe4:	3316      	adds	r3, #22
 800ebe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe f9c3 	bl	800cf74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	330b      	adds	r3, #11
 800ebf2:	2220      	movs	r2, #32
 800ebf4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff f99b 	bl	800df38 <ld_clust>
 800ec02:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec08:	2200      	movs	r2, #0
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff f9b3 	bl	800df76 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ec10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec12:	331c      	adds	r3, #28
 800ec14:	2100      	movs	r1, #0
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fe f9ac 	bl	800cf74 <st_dword>
					fs->wflag = 1;
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ec22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d037      	beq.n	800ec98 <f_open+0x1d4>
						dw = fs->winsect;
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec2c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ec2e:	f107 0314 	add.w	r3, r7, #20
 800ec32:	2200      	movs	r2, #0
 800ec34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe fea3 	bl	800d982 <remove_chain>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ec42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d126      	bne.n	800ec98 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fe fbea 	bl	800d428 <move_window>
 800ec54:	4603      	mov	r3, r0
 800ec56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec5e:	3a01      	subs	r2, #1
 800ec60:	611a      	str	r2, [r3, #16]
 800ec62:	e019      	b.n	800ec98 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d115      	bne.n	800ec98 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec6c:	7ebb      	ldrb	r3, [r7, #26]
 800ec6e:	f003 0310 	and.w	r3, r3, #16
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec76:	2304      	movs	r3, #4
 800ec78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec7c:	e00c      	b.n	800ec98 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	f003 0302 	and.w	r3, r3, #2
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d007      	beq.n	800ec98 <f_open+0x1d4>
 800ec88:	7ebb      	ldrb	r3, [r7, #26]
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d002      	beq.n	800ec98 <f_open+0x1d4>
						res = FR_DENIED;
 800ec92:	2307      	movs	r3, #7
 800ec94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d128      	bne.n	800ecf2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	f003 0308 	and.w	r3, r3, #8
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d003      	beq.n	800ecb2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ecba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	f023 0301 	bic.w	r3, r3, #1
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	bf14      	ite	ne
 800ecca:	2301      	movne	r3, #1
 800eccc:	2300      	moveq	r3, #0
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	f107 0314 	add.w	r3, r7, #20
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe fa73 	bl	800d1c4 <inc_lock>
 800ecde:	4602      	mov	r2, r0
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d102      	bne.n	800ecf2 <f_open+0x22e>
 800ecec:	2302      	movs	r3, #2
 800ecee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f040 80a3 	bne.w	800ee42 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed00:	4611      	mov	r1, r2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff f918 	bl	800df38 <ld_clust>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed10:	331c      	adds	r3, #28
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe f8f0 	bl	800cef8 <ld_dword>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2200      	movs	r2, #0
 800ed22:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	88da      	ldrh	r2, [r3, #6]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	79fa      	ldrb	r2, [r7, #7]
 800ed36:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2200      	movs	r2, #0
 800ed42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3330      	adds	r3, #48	; 0x30
 800ed4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed52:	2100      	movs	r1, #0
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fe f95a 	bl	800d00e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed5a:	79fb      	ldrb	r3, [r7, #7]
 800ed5c:	f003 0320 	and.w	r3, r3, #32
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d06e      	beq.n	800ee42 <f_open+0x37e>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d06a      	beq.n	800ee42 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	68da      	ldr	r2, [r3, #12]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	895b      	ldrh	r3, [r3, #10]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	899b      	ldrh	r3, [r3, #12]
 800ed7e:	fb02 f303 	mul.w	r3, r2, r3
 800ed82:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	657b      	str	r3, [r7, #84]	; 0x54
 800ed90:	e016      	b.n	800edc0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe fc03 	bl	800d5a2 <get_fat>
 800ed9c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ed9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d802      	bhi.n	800edaa <f_open+0x2e6>
 800eda4:	2302      	movs	r3, #2
 800eda6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800edaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb0:	d102      	bne.n	800edb8 <f_open+0x2f4>
 800edb2:	2301      	movs	r3, #1
 800edb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800edb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	657b      	str	r3, [r7, #84]	; 0x54
 800edc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d103      	bne.n	800edd0 <f_open+0x30c>
 800edc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800edca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edcc:	429a      	cmp	r2, r3
 800edce:	d8e0      	bhi.n	800ed92 <f_open+0x2ce>
				}
				fp->clust = clst;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800edd4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800edd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d131      	bne.n	800ee42 <f_open+0x37e>
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	899b      	ldrh	r3, [r3, #12]
 800ede2:	461a      	mov	r2, r3
 800ede4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede6:	fbb3 f1f2 	udiv	r1, r3, r2
 800edea:	fb01 f202 	mul.w	r2, r1, r2
 800edee:	1a9b      	subs	r3, r3, r2
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d026      	beq.n	800ee42 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fbb3 	bl	800d564 <clust2sect>
 800edfe:	6478      	str	r0, [r7, #68]	; 0x44
 800ee00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d103      	bne.n	800ee0e <f_open+0x34a>
						res = FR_INT_ERR;
 800ee06:	2302      	movs	r3, #2
 800ee08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee0c:	e019      	b.n	800ee42 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	899b      	ldrh	r3, [r3, #12]
 800ee12:	461a      	mov	r2, r3
 800ee14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee16:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee1c:	441a      	add	r2, r3
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	7858      	ldrb	r0, [r3, #1]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6a1a      	ldr	r2, [r3, #32]
 800ee30:	2301      	movs	r3, #1
 800ee32:	f7fd ffeb 	bl	800ce0c <disk_read>
 800ee36:	4603      	mov	r3, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <f_open+0x37e>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ee42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <f_open+0x38c>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3760      	adds	r7, #96	; 0x60
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08e      	sub	sp, #56	; 0x38
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
 800ee68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	2200      	movs	r2, #0
 800ee72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f107 0214 	add.w	r2, r7, #20
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fda5 	bl	800e9cc <validate>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d107      	bne.n	800eea0 <f_read+0x44>
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	7d5b      	ldrb	r3, [r3, #21]
 800ee94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ee98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <f_read+0x4a>
 800eea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eea4:	e135      	b.n	800f112 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	7d1b      	ldrb	r3, [r3, #20]
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d101      	bne.n	800eeb6 <f_read+0x5a>
 800eeb2:	2307      	movs	r3, #7
 800eeb4:	e12d      	b.n	800f112 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	699b      	ldr	r3, [r3, #24]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	f240 811e 	bls.w	800f108 <f_read+0x2ac>
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eed0:	e11a      	b.n	800f108 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	697a      	ldr	r2, [r7, #20]
 800eed8:	8992      	ldrh	r2, [r2, #12]
 800eeda:	fbb3 f1f2 	udiv	r1, r3, r2
 800eede:	fb01 f202 	mul.w	r2, r1, r2
 800eee2:	1a9b      	subs	r3, r3, r2
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f040 80d5 	bne.w	800f094 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	8992      	ldrh	r2, [r2, #12]
 800eef2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	8952      	ldrh	r2, [r2, #10]
 800eefa:	3a01      	subs	r2, #1
 800eefc:	4013      	ands	r3, r2
 800eefe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ef00:	69fb      	ldr	r3, [r7, #28]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d12f      	bne.n	800ef66 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	699b      	ldr	r3, [r3, #24]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d103      	bne.n	800ef16 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	633b      	str	r3, [r7, #48]	; 0x30
 800ef14:	e013      	b.n	800ef3e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d007      	beq.n	800ef2e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	4619      	mov	r1, r3
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7fe fe29 	bl	800db7c <clmt_clust>
 800ef2a:	6338      	str	r0, [r7, #48]	; 0x30
 800ef2c:	e007      	b.n	800ef3e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	69db      	ldr	r3, [r3, #28]
 800ef34:	4619      	mov	r1, r3
 800ef36:	4610      	mov	r0, r2
 800ef38:	f7fe fb33 	bl	800d5a2 <get_fat>
 800ef3c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d804      	bhi.n	800ef4e <f_read+0xf2>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2202      	movs	r2, #2
 800ef48:	755a      	strb	r2, [r3, #21]
 800ef4a:	2302      	movs	r3, #2
 800ef4c:	e0e1      	b.n	800f112 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef54:	d104      	bne.n	800ef60 <f_read+0x104>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	755a      	strb	r2, [r3, #21]
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e0d8      	b.n	800f112 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef64:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	69db      	ldr	r3, [r3, #28]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	4610      	mov	r0, r2
 800ef70:	f7fe faf8 	bl	800d564 <clust2sect>
 800ef74:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d104      	bne.n	800ef86 <f_read+0x12a>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	755a      	strb	r2, [r3, #21]
 800ef82:	2302      	movs	r3, #2
 800ef84:	e0c5      	b.n	800f112 <f_read+0x2b6>
			sect += csect;
 800ef86:	69ba      	ldr	r2, [r7, #24]
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	899b      	ldrh	r3, [r3, #12]
 800ef92:	461a      	mov	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef9a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d041      	beq.n	800f026 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa6:	4413      	add	r3, r2
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	8952      	ldrh	r2, [r2, #10]
 800efac:	4293      	cmp	r3, r2
 800efae:	d905      	bls.n	800efbc <f_read+0x160>
					cc = fs->csize - csect;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	895b      	ldrh	r3, [r3, #10]
 800efb4:	461a      	mov	r2, r3
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	7858      	ldrb	r0, [r3, #1]
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	69ba      	ldr	r2, [r7, #24]
 800efc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efc6:	f7fd ff21 	bl	800ce0c <disk_read>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d004      	beq.n	800efda <f_read+0x17e>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	755a      	strb	r2, [r3, #21]
 800efd6:	2301      	movs	r3, #1
 800efd8:	e09b      	b.n	800f112 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	7d1b      	ldrb	r3, [r3, #20]
 800efde:	b25b      	sxtb	r3, r3
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	da18      	bge.n	800f016 <f_read+0x1ba>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6a1a      	ldr	r2, [r3, #32]
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efee:	429a      	cmp	r2, r3
 800eff0:	d911      	bls.n	800f016 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6a1a      	ldr	r2, [r3, #32]
 800eff6:	69bb      	ldr	r3, [r7, #24]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	697a      	ldr	r2, [r7, #20]
 800effc:	8992      	ldrh	r2, [r2, #12]
 800effe:	fb02 f303 	mul.w	r3, r2, r3
 800f002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f004:	18d0      	adds	r0, r2, r3
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	899b      	ldrh	r3, [r3, #12]
 800f010:	461a      	mov	r2, r3
 800f012:	f7fd ffdb 	bl	800cfcc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	899b      	ldrh	r3, [r3, #12]
 800f01a:	461a      	mov	r2, r3
 800f01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01e:	fb02 f303 	mul.w	r3, r2, r3
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f024:	e05c      	b.n	800f0e0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	69ba      	ldr	r2, [r7, #24]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d02e      	beq.n	800f08e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	7d1b      	ldrb	r3, [r3, #20]
 800f034:	b25b      	sxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	da18      	bge.n	800f06c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	7858      	ldrb	r0, [r3, #1]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6a1a      	ldr	r2, [r3, #32]
 800f048:	2301      	movs	r3, #1
 800f04a:	f7fd feff 	bl	800ce4c <disk_write>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d004      	beq.n	800f05e <f_read+0x202>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2201      	movs	r2, #1
 800f058:	755a      	strb	r2, [r3, #21]
 800f05a:	2301      	movs	r3, #1
 800f05c:	e059      	b.n	800f112 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f066:	b2da      	uxtb	r2, r3
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	7858      	ldrb	r0, [r3, #1]
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f076:	2301      	movs	r3, #1
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	f7fd fec7 	bl	800ce0c <disk_read>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d004      	beq.n	800f08e <f_read+0x232>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2201      	movs	r2, #1
 800f088:	755a      	strb	r2, [r3, #21]
 800f08a:	2301      	movs	r3, #1
 800f08c:	e041      	b.n	800f112 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	899b      	ldrh	r3, [r3, #12]
 800f098:	4618      	mov	r0, r3
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	697a      	ldr	r2, [r7, #20]
 800f0a0:	8992      	ldrh	r2, [r2, #12]
 800f0a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0a6:	fb01 f202 	mul.w	r2, r1, r2
 800f0aa:	1a9b      	subs	r3, r3, r2
 800f0ac:	1ac3      	subs	r3, r0, r3
 800f0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d901      	bls.n	800f0bc <f_read+0x260>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	8992      	ldrh	r2, [r2, #12]
 800f0ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0ce:	fb00 f202 	mul.w	r2, r0, r2
 800f0d2:	1a9b      	subs	r3, r3, r2
 800f0d4:	440b      	add	r3, r1
 800f0d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0d8:	4619      	mov	r1, r3
 800f0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0dc:	f7fd ff76 	bl	800cfcc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	4413      	add	r3, r2
 800f0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	699a      	ldr	r2, [r3, #24]
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	441a      	add	r2, r3
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	619a      	str	r2, [r3, #24]
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	441a      	add	r2, r3
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	601a      	str	r2, [r3, #0]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f47f aee1 	bne.w	800eed2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3738      	adds	r7, #56	; 0x38
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b08c      	sub	sp, #48	; 0x30
 800f11e:	af00      	add	r7, sp, #0
 800f120:	60f8      	str	r0, [r7, #12]
 800f122:	60b9      	str	r1, [r7, #8]
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2200      	movs	r2, #0
 800f130:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f107 0210 	add.w	r2, r7, #16
 800f138:	4611      	mov	r1, r2
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff fc46 	bl	800e9cc <validate>
 800f140:	4603      	mov	r3, r0
 800f142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d107      	bne.n	800f15e <f_write+0x44>
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	7d5b      	ldrb	r3, [r3, #21]
 800f152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d002      	beq.n	800f164 <f_write+0x4a>
 800f15e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f162:	e16a      	b.n	800f43a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
 800f168:	f003 0302 	and.w	r3, r3, #2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <f_write+0x5a>
 800f170:	2307      	movs	r3, #7
 800f172:	e162      	b.n	800f43a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	699a      	ldr	r2, [r3, #24]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	441a      	add	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	699b      	ldr	r3, [r3, #24]
 800f180:	429a      	cmp	r2, r3
 800f182:	f080 814c 	bcs.w	800f41e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	699b      	ldr	r3, [r3, #24]
 800f18a:	43db      	mvns	r3, r3
 800f18c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f18e:	e146      	b.n	800f41e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	693a      	ldr	r2, [r7, #16]
 800f196:	8992      	ldrh	r2, [r2, #12]
 800f198:	fbb3 f1f2 	udiv	r1, r3, r2
 800f19c:	fb01 f202 	mul.w	r2, r1, r2
 800f1a0:	1a9b      	subs	r3, r3, r2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f040 80f1 	bne.w	800f38a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	699b      	ldr	r3, [r3, #24]
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	8992      	ldrh	r2, [r2, #12]
 800f1b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	8952      	ldrh	r2, [r2, #10]
 800f1b8:	3a01      	subs	r2, #1
 800f1ba:	4013      	ands	r3, r2
 800f1bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d143      	bne.n	800f24c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10c      	bne.n	800f1e6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d11a      	bne.n	800f20e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2100      	movs	r1, #0
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fe fc35 	bl	800da4c <create_chain>
 800f1e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1e4:	e013      	b.n	800f20e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d007      	beq.n	800f1fe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	699b      	ldr	r3, [r3, #24]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f7fe fcc1 	bl	800db7c <clmt_clust>
 800f1fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800f1fc:	e007      	b.n	800f20e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f1fe:	68fa      	ldr	r2, [r7, #12]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	69db      	ldr	r3, [r3, #28]
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fe fc20 	bl	800da4c <create_chain>
 800f20c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 8109 	beq.w	800f428 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d104      	bne.n	800f226 <f_write+0x10c>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2202      	movs	r2, #2
 800f220:	755a      	strb	r2, [r3, #21]
 800f222:	2302      	movs	r3, #2
 800f224:	e109      	b.n	800f43a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f22c:	d104      	bne.n	800f238 <f_write+0x11e>
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2201      	movs	r2, #1
 800f232:	755a      	strb	r2, [r3, #21]
 800f234:	2301      	movs	r3, #1
 800f236:	e100      	b.n	800f43a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f23c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d102      	bne.n	800f24c <f_write+0x132>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f24a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	7d1b      	ldrb	r3, [r3, #20]
 800f250:	b25b      	sxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	da18      	bge.n	800f288 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	7858      	ldrb	r0, [r3, #1]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6a1a      	ldr	r2, [r3, #32]
 800f264:	2301      	movs	r3, #1
 800f266:	f7fd fdf1 	bl	800ce4c <disk_write>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d004      	beq.n	800f27a <f_write+0x160>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2201      	movs	r2, #1
 800f274:	755a      	strb	r2, [r3, #21]
 800f276:	2301      	movs	r3, #1
 800f278:	e0df      	b.n	800f43a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	7d1b      	ldrb	r3, [r3, #20]
 800f27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f282:	b2da      	uxtb	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	69db      	ldr	r3, [r3, #28]
 800f28e:	4619      	mov	r1, r3
 800f290:	4610      	mov	r0, r2
 800f292:	f7fe f967 	bl	800d564 <clust2sect>
 800f296:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d104      	bne.n	800f2a8 <f_write+0x18e>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	755a      	strb	r2, [r3, #21]
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e0c8      	b.n	800f43a <f_write+0x320>
			sect += csect;
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	69bb      	ldr	r3, [r7, #24]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	899b      	ldrh	r3, [r3, #12]
 800f2b4:	461a      	mov	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f2be:	6a3b      	ldr	r3, [r7, #32]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d043      	beq.n	800f34c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2c4:	69ba      	ldr	r2, [r7, #24]
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	8952      	ldrh	r2, [r2, #10]
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d905      	bls.n	800f2de <f_write+0x1c4>
					cc = fs->csize - csect;
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	895b      	ldrh	r3, [r3, #10]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	1ad3      	subs	r3, r2, r3
 800f2dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	7858      	ldrb	r0, [r3, #1]
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	697a      	ldr	r2, [r7, #20]
 800f2e6:	69f9      	ldr	r1, [r7, #28]
 800f2e8:	f7fd fdb0 	bl	800ce4c <disk_write>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d004      	beq.n	800f2fc <f_write+0x1e2>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	755a      	strb	r2, [r3, #21]
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	e09e      	b.n	800f43a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6a1a      	ldr	r2, [r3, #32]
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	6a3a      	ldr	r2, [r7, #32]
 800f306:	429a      	cmp	r2, r3
 800f308:	d918      	bls.n	800f33c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6a1a      	ldr	r2, [r3, #32]
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	8992      	ldrh	r2, [r2, #12]
 800f31c:	fb02 f303 	mul.w	r3, r2, r3
 800f320:	69fa      	ldr	r2, [r7, #28]
 800f322:	18d1      	adds	r1, r2, r3
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	461a      	mov	r2, r3
 800f32a:	f7fd fe4f 	bl	800cfcc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
 800f332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f336:	b2da      	uxtb	r2, r3
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	899b      	ldrh	r3, [r3, #12]
 800f340:	461a      	mov	r2, r3
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	fb02 f303 	mul.w	r3, r2, r3
 800f348:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f34a:	e04b      	b.n	800f3e4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6a1b      	ldr	r3, [r3, #32]
 800f350:	697a      	ldr	r2, [r7, #20]
 800f352:	429a      	cmp	r2, r3
 800f354:	d016      	beq.n	800f384 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	699a      	ldr	r2, [r3, #24]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f35e:	429a      	cmp	r2, r3
 800f360:	d210      	bcs.n	800f384 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	7858      	ldrb	r0, [r3, #1]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f36c:	2301      	movs	r3, #1
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	f7fd fd4c 	bl	800ce0c <disk_read>
 800f374:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f376:	2b00      	cmp	r3, #0
 800f378:	d004      	beq.n	800f384 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2201      	movs	r2, #1
 800f37e:	755a      	strb	r2, [r3, #21]
 800f380:	2301      	movs	r3, #1
 800f382:	e05a      	b.n	800f43a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	4618      	mov	r0, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	8992      	ldrh	r2, [r2, #12]
 800f398:	fbb3 f1f2 	udiv	r1, r3, r2
 800f39c:	fb01 f202 	mul.w	r2, r1, r2
 800f3a0:	1a9b      	subs	r3, r3, r2
 800f3a2:	1ac3      	subs	r3, r0, r3
 800f3a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d901      	bls.n	800f3b2 <f_write+0x298>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	8992      	ldrh	r2, [r2, #12]
 800f3c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3c4:	fb00 f202 	mul.w	r2, r0, r2
 800f3c8:	1a9b      	subs	r3, r3, r2
 800f3ca:	440b      	add	r3, r1
 800f3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ce:	69f9      	ldr	r1, [r7, #28]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fd fdfb 	bl	800cfcc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	7d1b      	ldrb	r3, [r3, #20]
 800f3da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f3de:	b2da      	uxtb	r2, r3
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e8:	4413      	add	r3, r2
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	699a      	ldr	r2, [r3, #24]
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	441a      	add	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	619a      	str	r2, [r3, #24]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	68da      	ldr	r2, [r3, #12]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	429a      	cmp	r2, r3
 800f402:	bf38      	it	cc
 800f404:	461a      	movcc	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	60da      	str	r2, [r3, #12]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f410:	441a      	add	r2, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	601a      	str	r2, [r3, #0]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	f47f aeb5 	bne.w	800f190 <f_write+0x76>
 800f426:	e000      	b.n	800f42a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f428:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f432:	b2da      	uxtb	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f438:	2300      	movs	r3, #0
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3730      	adds	r7, #48	; 0x30
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b086      	sub	sp, #24
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f107 0208 	add.w	r2, r7, #8
 800f450:	4611      	mov	r1, r2
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff faba 	bl	800e9cc <validate>
 800f458:	4603      	mov	r3, r0
 800f45a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f45c:	7dfb      	ldrb	r3, [r7, #23]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d168      	bne.n	800f534 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	7d1b      	ldrb	r3, [r3, #20]
 800f466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d062      	beq.n	800f534 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	7d1b      	ldrb	r3, [r3, #20]
 800f472:	b25b      	sxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	da15      	bge.n	800f4a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	7858      	ldrb	r0, [r3, #1]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a1a      	ldr	r2, [r3, #32]
 800f486:	2301      	movs	r3, #1
 800f488:	f7fd fce0 	bl	800ce4c <disk_write>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <f_sync+0x54>
 800f492:	2301      	movs	r3, #1
 800f494:	e04f      	b.n	800f536 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	7d1b      	ldrb	r3, [r3, #20]
 800f49a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f49e:	b2da      	uxtb	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f4a4:	f7fd fb06 	bl	800cab4 <get_fattime>
 800f4a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f4aa:	68ba      	ldr	r2, [r7, #8]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4610      	mov	r0, r2
 800f4b4:	f7fd ffb8 	bl	800d428 <move_window>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f4bc:	7dfb      	ldrb	r3, [r7, #23]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d138      	bne.n	800f534 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	330b      	adds	r3, #11
 800f4cc:	781a      	ldrb	r2, [r3, #0]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	330b      	adds	r3, #11
 800f4d2:	f042 0220 	orr.w	r2, r2, #32
 800f4d6:	b2d2      	uxtb	r2, r2
 800f4d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6818      	ldr	r0, [r3, #0]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	68f9      	ldr	r1, [r7, #12]
 800f4e6:	f7fe fd46 	bl	800df76 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f103 021c 	add.w	r2, r3, #28
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	4610      	mov	r0, r2
 800f4f8:	f7fd fd3c 	bl	800cf74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	3316      	adds	r3, #22
 800f500:	6939      	ldr	r1, [r7, #16]
 800f502:	4618      	mov	r0, r3
 800f504:	f7fd fd36 	bl	800cf74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	3312      	adds	r3, #18
 800f50c:	2100      	movs	r1, #0
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fd fd15 	bl	800cf3e <st_word>
					fs->wflag = 1;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2201      	movs	r2, #1
 800f518:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd ffb1 	bl	800d484 <sync_fs>
 800f522:	4603      	mov	r3, r0
 800f524:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	7d1b      	ldrb	r3, [r3, #20]
 800f52a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f52e:	b2da      	uxtb	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f534:	7dfb      	ldrb	r3, [r7, #23]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b084      	sub	sp, #16
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7ff ff7b 	bl	800f442 <f_sync>
 800f54c:	4603      	mov	r3, r0
 800f54e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f550:	7bfb      	ldrb	r3, [r7, #15]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d118      	bne.n	800f588 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f107 0208 	add.w	r2, r7, #8
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fa34 	bl	800e9cc <validate>
 800f564:	4603      	mov	r3, r0
 800f566:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d10c      	bne.n	800f588 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	691b      	ldr	r3, [r3, #16]
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd feb4 	bl	800d2e0 <dec_lock>
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d102      	bne.n	800f588 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f588:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b090      	sub	sp, #64	; 0x40
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f59c:	f107 010c 	add.w	r1, r7, #12
 800f5a0:	1d3b      	adds	r3, r7, #4
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fe ff91 	bl	800e4cc <find_volume>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800f5b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d11f      	bne.n	800f5f8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	f107 030c 	add.w	r3, r7, #12
 800f5be:	4611      	mov	r1, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fe fe73 	bl	800e2ac <follow_path>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800f5cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d111      	bne.n	800f5f8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f5d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f5d8:	b25b      	sxtb	r3, r3
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	da03      	bge.n	800f5e6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800f5de:	2306      	movs	r3, #6
 800f5e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f5e4:	e008      	b.n	800f5f8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d005      	beq.n	800f5f8 <f_stat+0x66>
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fe fd66 	bl	800e0c4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800f5f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3740      	adds	r7, #64	; 0x40
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b096      	sub	sp, #88	; 0x58
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f60c:	f107 0108 	add.w	r1, r7, #8
 800f610:	1d3b      	adds	r3, r7, #4
 800f612:	2202      	movs	r2, #2
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe ff59 	bl	800e4cc <find_volume>
 800f61a:	4603      	mov	r3, r0
 800f61c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800f624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f040 80f2 	bne.w	800f812 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	f107 030c 	add.w	r3, r7, #12
 800f634:	4611      	mov	r1, r2
 800f636:	4618      	mov	r0, r3
 800f638:	f7fe fe38 	bl	800e2ac <follow_path>
 800f63c:	4603      	mov	r3, r0
 800f63e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f642:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f646:	2b00      	cmp	r3, #0
 800f648:	d102      	bne.n	800f650 <f_mkdir+0x4c>
 800f64a:	2308      	movs	r3, #8
 800f64c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f654:	2b04      	cmp	r3, #4
 800f656:	f040 80dc 	bne.w	800f812 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f65a:	f107 030c 	add.w	r3, r7, #12
 800f65e:	2100      	movs	r1, #0
 800f660:	4618      	mov	r0, r3
 800f662:	f7fe f9f3 	bl	800da4c <create_chain>
 800f666:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	895b      	ldrh	r3, [r3, #10]
 800f66c:	461a      	mov	r2, r3
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	899b      	ldrh	r3, [r3, #12]
 800f672:	fb02 f303 	mul.w	r3, r2, r3
 800f676:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800f678:	2300      	movs	r3, #0
 800f67a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <f_mkdir+0x86>
 800f684:	2307      	movs	r3, #7
 800f686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800f68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d102      	bne.n	800f696 <f_mkdir+0x92>
 800f690:	2302      	movs	r3, #2
 800f692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69c:	d102      	bne.n	800f6a4 <f_mkdir+0xa0>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f6a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d106      	bne.n	800f6ba <f_mkdir+0xb6>
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fd fe76 	bl	800d3a0 <sync_window>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800f6ba:	f7fd f9fb 	bl	800cab4 <get_fattime>
 800f6be:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f6c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d16c      	bne.n	800f7a2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fd ff49 	bl	800d564 <clust2sect>
 800f6d2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	3334      	adds	r3, #52	; 0x34
 800f6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	899b      	ldrh	r3, [r3, #12]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	2100      	movs	r1, #0
 800f6e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6e4:	f7fd fc93 	bl	800d00e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f6e8:	220b      	movs	r2, #11
 800f6ea:	2120      	movs	r1, #32
 800f6ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f6ee:	f7fd fc8e 	bl	800d00e <mem_set>
					dir[DIR_Name] = '.';
 800f6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f4:	222e      	movs	r2, #46	; 0x2e
 800f6f6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6fa:	330b      	adds	r3, #11
 800f6fc:	2210      	movs	r2, #16
 800f6fe:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f702:	3316      	adds	r3, #22
 800f704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd fc34 	bl	800cf74 <st_dword>
					st_clust(fs, dir, dcl);
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f710:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f712:	4618      	mov	r0, r3
 800f714:	f7fe fc2f 	bl	800df76 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71a:	3320      	adds	r3, #32
 800f71c:	2220      	movs	r2, #32
 800f71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd fc53 	bl	800cfcc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f728:	3321      	adds	r3, #33	; 0x21
 800f72a:	222e      	movs	r2, #46	; 0x2e
 800f72c:	701a      	strb	r2, [r3, #0]
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	2b03      	cmp	r3, #3
 800f738:	d106      	bne.n	800f748 <f_mkdir+0x144>
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f73e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f740:	429a      	cmp	r2, r3
 800f742:	d101      	bne.n	800f748 <f_mkdir+0x144>
 800f744:	2300      	movs	r3, #0
 800f746:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800f748:	68b8      	ldr	r0, [r7, #8]
 800f74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f74c:	3320      	adds	r3, #32
 800f74e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f750:	4619      	mov	r1, r3
 800f752:	f7fe fc10 	bl	800df76 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	895b      	ldrh	r3, [r3, #10]
 800f75a:	653b      	str	r3, [r7, #80]	; 0x50
 800f75c:	e01c      	b.n	800f798 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800f75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	2201      	movs	r2, #1
 800f76c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	4618      	mov	r0, r3
 800f772:	f7fd fe15 	bl	800d3a0 <sync_window>
 800f776:	4603      	mov	r3, r0
 800f778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800f77c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10d      	bne.n	800f7a0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	899b      	ldrh	r3, [r3, #12]
 800f788:	461a      	mov	r2, r3
 800f78a:	2100      	movs	r1, #0
 800f78c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f78e:	f7fd fc3e 	bl	800d00e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f794:	3b01      	subs	r3, #1
 800f796:	653b      	str	r3, [r7, #80]	; 0x50
 800f798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1df      	bne.n	800f75e <f_mkdir+0x15a>
 800f79e:	e000      	b.n	800f7a2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800f7a0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f7a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d107      	bne.n	800f7ba <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f7aa:	f107 030c 	add.w	r3, r7, #12
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fe fc56 	bl	800e060 <dir_register>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800f7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d120      	bne.n	800f804 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c8:	3316      	adds	r3, #22
 800f7ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fd fbd1 	bl	800cf74 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fe fbcc 	bl	800df76 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e0:	330b      	adds	r3, #11
 800f7e2:	2210      	movs	r2, #16
 800f7e4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10e      	bne.n	800f812 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd fe44 	bl	800d484 <sync_fs>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f802:	e006      	b.n	800f812 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	2200      	movs	r2, #0
 800f80a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fe f8b8 	bl	800d982 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f812:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800f816:	4618      	mov	r0, r3
 800f818:	3758      	adds	r7, #88	; 0x58
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
	...

0800f820 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f820:	b480      	push	{r7}
 800f822:	b087      	sub	sp, #28
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	4613      	mov	r3, r2
 800f82c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f82e:	2301      	movs	r3, #1
 800f830:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f832:	2300      	movs	r3, #0
 800f834:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f836:	4b1f      	ldr	r3, [pc, #124]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f838:	7a5b      	ldrb	r3, [r3, #9]
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d131      	bne.n	800f8a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f840:	4b1c      	ldr	r3, [pc, #112]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f842:	7a5b      	ldrb	r3, [r3, #9]
 800f844:	b2db      	uxtb	r3, r3
 800f846:	461a      	mov	r2, r3
 800f848:	4b1a      	ldr	r3, [pc, #104]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f84a:	2100      	movs	r1, #0
 800f84c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f84e:	4b19      	ldr	r3, [pc, #100]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f850:	7a5b      	ldrb	r3, [r3, #9]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	4a17      	ldr	r2, [pc, #92]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f856:	009b      	lsls	r3, r3, #2
 800f858:	4413      	add	r3, r2
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f85e:	4b15      	ldr	r3, [pc, #84]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f860:	7a5b      	ldrb	r3, [r3, #9]
 800f862:	b2db      	uxtb	r3, r3
 800f864:	461a      	mov	r2, r3
 800f866:	4b13      	ldr	r3, [pc, #76]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f868:	4413      	add	r3, r2
 800f86a:	79fa      	ldrb	r2, [r7, #7]
 800f86c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f86e:	4b11      	ldr	r3, [pc, #68]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f870:	7a5b      	ldrb	r3, [r3, #9]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	b2d1      	uxtb	r1, r2
 800f878:	4a0e      	ldr	r2, [pc, #56]	; (800f8b4 <FATFS_LinkDriverEx+0x94>)
 800f87a:	7251      	strb	r1, [r2, #9]
 800f87c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f87e:	7dbb      	ldrb	r3, [r7, #22]
 800f880:	3330      	adds	r3, #48	; 0x30
 800f882:	b2da      	uxtb	r2, r3
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	3301      	adds	r3, #1
 800f88c:	223a      	movs	r2, #58	; 0x3a
 800f88e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	3302      	adds	r3, #2
 800f894:	222f      	movs	r2, #47	; 0x2f
 800f896:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	3303      	adds	r3, #3
 800f89c:	2200      	movs	r2, #0
 800f89e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	371c      	adds	r7, #28
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	20005c70 	.word	0x20005c70

0800f8b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7ff ffaa 	bl	800f820 <FATFS_LinkDriverEx>
 800f8cc:	4603      	mov	r3, r0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <__assert_func>:
 800f8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8da:	4614      	mov	r4, r2
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b09      	ldr	r3, [pc, #36]	; (800f904 <__assert_func+0x2c>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	68d8      	ldr	r0, [r3, #12]
 800f8e6:	b14c      	cbz	r4, 800f8fc <__assert_func+0x24>
 800f8e8:	4b07      	ldr	r3, [pc, #28]	; (800f908 <__assert_func+0x30>)
 800f8ea:	9100      	str	r1, [sp, #0]
 800f8ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8f0:	4906      	ldr	r1, [pc, #24]	; (800f90c <__assert_func+0x34>)
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	f000 f814 	bl	800f920 <fiprintf>
 800f8f8:	f001 f86a 	bl	80109d0 <abort>
 800f8fc:	4b04      	ldr	r3, [pc, #16]	; (800f910 <__assert_func+0x38>)
 800f8fe:	461c      	mov	r4, r3
 800f900:	e7f3      	b.n	800f8ea <__assert_func+0x12>
 800f902:	bf00      	nop
 800f904:	200000f8 	.word	0x200000f8
 800f908:	0802e550 	.word	0x0802e550
 800f90c:	0802e55d 	.word	0x0802e55d
 800f910:	0802e58b 	.word	0x0802e58b

0800f914 <__errno>:
 800f914:	4b01      	ldr	r3, [pc, #4]	; (800f91c <__errno+0x8>)
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop
 800f91c:	200000f8 	.word	0x200000f8

0800f920 <fiprintf>:
 800f920:	b40e      	push	{r1, r2, r3}
 800f922:	b503      	push	{r0, r1, lr}
 800f924:	4601      	mov	r1, r0
 800f926:	ab03      	add	r3, sp, #12
 800f928:	4805      	ldr	r0, [pc, #20]	; (800f940 <fiprintf+0x20>)
 800f92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f92e:	6800      	ldr	r0, [r0, #0]
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	f000 f95b 	bl	800fbec <_vfiprintf_r>
 800f936:	b002      	add	sp, #8
 800f938:	f85d eb04 	ldr.w	lr, [sp], #4
 800f93c:	b003      	add	sp, #12
 800f93e:	4770      	bx	lr
 800f940:	200000f8 	.word	0x200000f8

0800f944 <__libc_init_array>:
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	4d0d      	ldr	r5, [pc, #52]	; (800f97c <__libc_init_array+0x38>)
 800f948:	4c0d      	ldr	r4, [pc, #52]	; (800f980 <__libc_init_array+0x3c>)
 800f94a:	1b64      	subs	r4, r4, r5
 800f94c:	10a4      	asrs	r4, r4, #2
 800f94e:	2600      	movs	r6, #0
 800f950:	42a6      	cmp	r6, r4
 800f952:	d109      	bne.n	800f968 <__libc_init_array+0x24>
 800f954:	4d0b      	ldr	r5, [pc, #44]	; (800f984 <__libc_init_array+0x40>)
 800f956:	4c0c      	ldr	r4, [pc, #48]	; (800f988 <__libc_init_array+0x44>)
 800f958:	f003 fe34 	bl	80135c4 <_init>
 800f95c:	1b64      	subs	r4, r4, r5
 800f95e:	10a4      	asrs	r4, r4, #2
 800f960:	2600      	movs	r6, #0
 800f962:	42a6      	cmp	r6, r4
 800f964:	d105      	bne.n	800f972 <__libc_init_array+0x2e>
 800f966:	bd70      	pop	{r4, r5, r6, pc}
 800f968:	f855 3b04 	ldr.w	r3, [r5], #4
 800f96c:	4798      	blx	r3
 800f96e:	3601      	adds	r6, #1
 800f970:	e7ee      	b.n	800f950 <__libc_init_array+0xc>
 800f972:	f855 3b04 	ldr.w	r3, [r5], #4
 800f976:	4798      	blx	r3
 800f978:	3601      	adds	r6, #1
 800f97a:	e7f2      	b.n	800f962 <__libc_init_array+0x1e>
 800f97c:	0802e968 	.word	0x0802e968
 800f980:	0802e968 	.word	0x0802e968
 800f984:	0802e968 	.word	0x0802e968
 800f988:	0802e96c 	.word	0x0802e96c

0800f98c <malloc>:
 800f98c:	4b02      	ldr	r3, [pc, #8]	; (800f998 <malloc+0xc>)
 800f98e:	4601      	mov	r1, r0
 800f990:	6818      	ldr	r0, [r3, #0]
 800f992:	f000 b88d 	b.w	800fab0 <_malloc_r>
 800f996:	bf00      	nop
 800f998:	200000f8 	.word	0x200000f8

0800f99c <free>:
 800f99c:	4b02      	ldr	r3, [pc, #8]	; (800f9a8 <free+0xc>)
 800f99e:	4601      	mov	r1, r0
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	f000 b819 	b.w	800f9d8 <_free_r>
 800f9a6:	bf00      	nop
 800f9a8:	200000f8 	.word	0x200000f8

0800f9ac <memcpy>:
 800f9ac:	440a      	add	r2, r1
 800f9ae:	4291      	cmp	r1, r2
 800f9b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9b4:	d100      	bne.n	800f9b8 <memcpy+0xc>
 800f9b6:	4770      	bx	lr
 800f9b8:	b510      	push	{r4, lr}
 800f9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9c2:	4291      	cmp	r1, r2
 800f9c4:	d1f9      	bne.n	800f9ba <memcpy+0xe>
 800f9c6:	bd10      	pop	{r4, pc}

0800f9c8 <memset>:
 800f9c8:	4402      	add	r2, r0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d100      	bne.n	800f9d2 <memset+0xa>
 800f9d0:	4770      	bx	lr
 800f9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800f9d6:	e7f9      	b.n	800f9cc <memset+0x4>

0800f9d8 <_free_r>:
 800f9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9da:	2900      	cmp	r1, #0
 800f9dc:	d044      	beq.n	800fa68 <_free_r+0x90>
 800f9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9e2:	9001      	str	r0, [sp, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f1a1 0404 	sub.w	r4, r1, #4
 800f9ea:	bfb8      	it	lt
 800f9ec:	18e4      	addlt	r4, r4, r3
 800f9ee:	f002 f8e5 	bl	8011bbc <__malloc_lock>
 800f9f2:	4a1e      	ldr	r2, [pc, #120]	; (800fa6c <_free_r+0x94>)
 800f9f4:	9801      	ldr	r0, [sp, #4]
 800f9f6:	6813      	ldr	r3, [r2, #0]
 800f9f8:	b933      	cbnz	r3, 800fa08 <_free_r+0x30>
 800f9fa:	6063      	str	r3, [r4, #4]
 800f9fc:	6014      	str	r4, [r2, #0]
 800f9fe:	b003      	add	sp, #12
 800fa00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa04:	f002 b8e0 	b.w	8011bc8 <__malloc_unlock>
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	d908      	bls.n	800fa1e <_free_r+0x46>
 800fa0c:	6825      	ldr	r5, [r4, #0]
 800fa0e:	1961      	adds	r1, r4, r5
 800fa10:	428b      	cmp	r3, r1
 800fa12:	bf01      	itttt	eq
 800fa14:	6819      	ldreq	r1, [r3, #0]
 800fa16:	685b      	ldreq	r3, [r3, #4]
 800fa18:	1949      	addeq	r1, r1, r5
 800fa1a:	6021      	streq	r1, [r4, #0]
 800fa1c:	e7ed      	b.n	800f9fa <_free_r+0x22>
 800fa1e:	461a      	mov	r2, r3
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	b10b      	cbz	r3, 800fa28 <_free_r+0x50>
 800fa24:	42a3      	cmp	r3, r4
 800fa26:	d9fa      	bls.n	800fa1e <_free_r+0x46>
 800fa28:	6811      	ldr	r1, [r2, #0]
 800fa2a:	1855      	adds	r5, r2, r1
 800fa2c:	42a5      	cmp	r5, r4
 800fa2e:	d10b      	bne.n	800fa48 <_free_r+0x70>
 800fa30:	6824      	ldr	r4, [r4, #0]
 800fa32:	4421      	add	r1, r4
 800fa34:	1854      	adds	r4, r2, r1
 800fa36:	42a3      	cmp	r3, r4
 800fa38:	6011      	str	r1, [r2, #0]
 800fa3a:	d1e0      	bne.n	800f9fe <_free_r+0x26>
 800fa3c:	681c      	ldr	r4, [r3, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	6053      	str	r3, [r2, #4]
 800fa42:	4421      	add	r1, r4
 800fa44:	6011      	str	r1, [r2, #0]
 800fa46:	e7da      	b.n	800f9fe <_free_r+0x26>
 800fa48:	d902      	bls.n	800fa50 <_free_r+0x78>
 800fa4a:	230c      	movs	r3, #12
 800fa4c:	6003      	str	r3, [r0, #0]
 800fa4e:	e7d6      	b.n	800f9fe <_free_r+0x26>
 800fa50:	6825      	ldr	r5, [r4, #0]
 800fa52:	1961      	adds	r1, r4, r5
 800fa54:	428b      	cmp	r3, r1
 800fa56:	bf04      	itt	eq
 800fa58:	6819      	ldreq	r1, [r3, #0]
 800fa5a:	685b      	ldreq	r3, [r3, #4]
 800fa5c:	6063      	str	r3, [r4, #4]
 800fa5e:	bf04      	itt	eq
 800fa60:	1949      	addeq	r1, r1, r5
 800fa62:	6021      	streq	r1, [r4, #0]
 800fa64:	6054      	str	r4, [r2, #4]
 800fa66:	e7ca      	b.n	800f9fe <_free_r+0x26>
 800fa68:	b003      	add	sp, #12
 800fa6a:	bd30      	pop	{r4, r5, pc}
 800fa6c:	20005c7c 	.word	0x20005c7c

0800fa70 <sbrk_aligned>:
 800fa70:	b570      	push	{r4, r5, r6, lr}
 800fa72:	4e0e      	ldr	r6, [pc, #56]	; (800faac <sbrk_aligned+0x3c>)
 800fa74:	460c      	mov	r4, r1
 800fa76:	6831      	ldr	r1, [r6, #0]
 800fa78:	4605      	mov	r5, r0
 800fa7a:	b911      	cbnz	r1, 800fa82 <sbrk_aligned+0x12>
 800fa7c:	f000 fe50 	bl	8010720 <_sbrk_r>
 800fa80:	6030      	str	r0, [r6, #0]
 800fa82:	4621      	mov	r1, r4
 800fa84:	4628      	mov	r0, r5
 800fa86:	f000 fe4b 	bl	8010720 <_sbrk_r>
 800fa8a:	1c43      	adds	r3, r0, #1
 800fa8c:	d00a      	beq.n	800faa4 <sbrk_aligned+0x34>
 800fa8e:	1cc4      	adds	r4, r0, #3
 800fa90:	f024 0403 	bic.w	r4, r4, #3
 800fa94:	42a0      	cmp	r0, r4
 800fa96:	d007      	beq.n	800faa8 <sbrk_aligned+0x38>
 800fa98:	1a21      	subs	r1, r4, r0
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f000 fe40 	bl	8010720 <_sbrk_r>
 800faa0:	3001      	adds	r0, #1
 800faa2:	d101      	bne.n	800faa8 <sbrk_aligned+0x38>
 800faa4:	f04f 34ff 	mov.w	r4, #4294967295
 800faa8:	4620      	mov	r0, r4
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	20005c80 	.word	0x20005c80

0800fab0 <_malloc_r>:
 800fab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab4:	1ccd      	adds	r5, r1, #3
 800fab6:	f025 0503 	bic.w	r5, r5, #3
 800faba:	3508      	adds	r5, #8
 800fabc:	2d0c      	cmp	r5, #12
 800fabe:	bf38      	it	cc
 800fac0:	250c      	movcc	r5, #12
 800fac2:	2d00      	cmp	r5, #0
 800fac4:	4607      	mov	r7, r0
 800fac6:	db01      	blt.n	800facc <_malloc_r+0x1c>
 800fac8:	42a9      	cmp	r1, r5
 800faca:	d905      	bls.n	800fad8 <_malloc_r+0x28>
 800facc:	230c      	movs	r3, #12
 800face:	603b      	str	r3, [r7, #0]
 800fad0:	2600      	movs	r6, #0
 800fad2:	4630      	mov	r0, r6
 800fad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad8:	4e2e      	ldr	r6, [pc, #184]	; (800fb94 <_malloc_r+0xe4>)
 800fada:	f002 f86f 	bl	8011bbc <__malloc_lock>
 800fade:	6833      	ldr	r3, [r6, #0]
 800fae0:	461c      	mov	r4, r3
 800fae2:	bb34      	cbnz	r4, 800fb32 <_malloc_r+0x82>
 800fae4:	4629      	mov	r1, r5
 800fae6:	4638      	mov	r0, r7
 800fae8:	f7ff ffc2 	bl	800fa70 <sbrk_aligned>
 800faec:	1c43      	adds	r3, r0, #1
 800faee:	4604      	mov	r4, r0
 800faf0:	d14d      	bne.n	800fb8e <_malloc_r+0xde>
 800faf2:	6834      	ldr	r4, [r6, #0]
 800faf4:	4626      	mov	r6, r4
 800faf6:	2e00      	cmp	r6, #0
 800faf8:	d140      	bne.n	800fb7c <_malloc_r+0xcc>
 800fafa:	6823      	ldr	r3, [r4, #0]
 800fafc:	4631      	mov	r1, r6
 800fafe:	4638      	mov	r0, r7
 800fb00:	eb04 0803 	add.w	r8, r4, r3
 800fb04:	f000 fe0c 	bl	8010720 <_sbrk_r>
 800fb08:	4580      	cmp	r8, r0
 800fb0a:	d13a      	bne.n	800fb82 <_malloc_r+0xd2>
 800fb0c:	6821      	ldr	r1, [r4, #0]
 800fb0e:	3503      	adds	r5, #3
 800fb10:	1a6d      	subs	r5, r5, r1
 800fb12:	f025 0503 	bic.w	r5, r5, #3
 800fb16:	3508      	adds	r5, #8
 800fb18:	2d0c      	cmp	r5, #12
 800fb1a:	bf38      	it	cc
 800fb1c:	250c      	movcc	r5, #12
 800fb1e:	4629      	mov	r1, r5
 800fb20:	4638      	mov	r0, r7
 800fb22:	f7ff ffa5 	bl	800fa70 <sbrk_aligned>
 800fb26:	3001      	adds	r0, #1
 800fb28:	d02b      	beq.n	800fb82 <_malloc_r+0xd2>
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	442b      	add	r3, r5
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	e00e      	b.n	800fb50 <_malloc_r+0xa0>
 800fb32:	6822      	ldr	r2, [r4, #0]
 800fb34:	1b52      	subs	r2, r2, r5
 800fb36:	d41e      	bmi.n	800fb76 <_malloc_r+0xc6>
 800fb38:	2a0b      	cmp	r2, #11
 800fb3a:	d916      	bls.n	800fb6a <_malloc_r+0xba>
 800fb3c:	1961      	adds	r1, r4, r5
 800fb3e:	42a3      	cmp	r3, r4
 800fb40:	6025      	str	r5, [r4, #0]
 800fb42:	bf18      	it	ne
 800fb44:	6059      	strne	r1, [r3, #4]
 800fb46:	6863      	ldr	r3, [r4, #4]
 800fb48:	bf08      	it	eq
 800fb4a:	6031      	streq	r1, [r6, #0]
 800fb4c:	5162      	str	r2, [r4, r5]
 800fb4e:	604b      	str	r3, [r1, #4]
 800fb50:	4638      	mov	r0, r7
 800fb52:	f104 060b 	add.w	r6, r4, #11
 800fb56:	f002 f837 	bl	8011bc8 <__malloc_unlock>
 800fb5a:	f026 0607 	bic.w	r6, r6, #7
 800fb5e:	1d23      	adds	r3, r4, #4
 800fb60:	1af2      	subs	r2, r6, r3
 800fb62:	d0b6      	beq.n	800fad2 <_malloc_r+0x22>
 800fb64:	1b9b      	subs	r3, r3, r6
 800fb66:	50a3      	str	r3, [r4, r2]
 800fb68:	e7b3      	b.n	800fad2 <_malloc_r+0x22>
 800fb6a:	6862      	ldr	r2, [r4, #4]
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	bf0c      	ite	eq
 800fb70:	6032      	streq	r2, [r6, #0]
 800fb72:	605a      	strne	r2, [r3, #4]
 800fb74:	e7ec      	b.n	800fb50 <_malloc_r+0xa0>
 800fb76:	4623      	mov	r3, r4
 800fb78:	6864      	ldr	r4, [r4, #4]
 800fb7a:	e7b2      	b.n	800fae2 <_malloc_r+0x32>
 800fb7c:	4634      	mov	r4, r6
 800fb7e:	6876      	ldr	r6, [r6, #4]
 800fb80:	e7b9      	b.n	800faf6 <_malloc_r+0x46>
 800fb82:	230c      	movs	r3, #12
 800fb84:	603b      	str	r3, [r7, #0]
 800fb86:	4638      	mov	r0, r7
 800fb88:	f002 f81e 	bl	8011bc8 <__malloc_unlock>
 800fb8c:	e7a1      	b.n	800fad2 <_malloc_r+0x22>
 800fb8e:	6025      	str	r5, [r4, #0]
 800fb90:	e7de      	b.n	800fb50 <_malloc_r+0xa0>
 800fb92:	bf00      	nop
 800fb94:	20005c7c 	.word	0x20005c7c

0800fb98 <__sfputc_r>:
 800fb98:	6893      	ldr	r3, [r2, #8]
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	b410      	push	{r4}
 800fba0:	6093      	str	r3, [r2, #8]
 800fba2:	da08      	bge.n	800fbb6 <__sfputc_r+0x1e>
 800fba4:	6994      	ldr	r4, [r2, #24]
 800fba6:	42a3      	cmp	r3, r4
 800fba8:	db01      	blt.n	800fbae <__sfputc_r+0x16>
 800fbaa:	290a      	cmp	r1, #10
 800fbac:	d103      	bne.n	800fbb6 <__sfputc_r+0x1e>
 800fbae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb2:	f000 be3b 	b.w	801082c <__swbuf_r>
 800fbb6:	6813      	ldr	r3, [r2, #0]
 800fbb8:	1c58      	adds	r0, r3, #1
 800fbba:	6010      	str	r0, [r2, #0]
 800fbbc:	7019      	strb	r1, [r3, #0]
 800fbbe:	4608      	mov	r0, r1
 800fbc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <__sfputs_r>:
 800fbc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbc8:	4606      	mov	r6, r0
 800fbca:	460f      	mov	r7, r1
 800fbcc:	4614      	mov	r4, r2
 800fbce:	18d5      	adds	r5, r2, r3
 800fbd0:	42ac      	cmp	r4, r5
 800fbd2:	d101      	bne.n	800fbd8 <__sfputs_r+0x12>
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	e007      	b.n	800fbe8 <__sfputs_r+0x22>
 800fbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbdc:	463a      	mov	r2, r7
 800fbde:	4630      	mov	r0, r6
 800fbe0:	f7ff ffda 	bl	800fb98 <__sfputc_r>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d1f3      	bne.n	800fbd0 <__sfputs_r+0xa>
 800fbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbec <_vfiprintf_r>:
 800fbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbf0:	460d      	mov	r5, r1
 800fbf2:	b09d      	sub	sp, #116	; 0x74
 800fbf4:	4614      	mov	r4, r2
 800fbf6:	4698      	mov	r8, r3
 800fbf8:	4606      	mov	r6, r0
 800fbfa:	b118      	cbz	r0, 800fc04 <_vfiprintf_r+0x18>
 800fbfc:	6983      	ldr	r3, [r0, #24]
 800fbfe:	b90b      	cbnz	r3, 800fc04 <_vfiprintf_r+0x18>
 800fc00:	f001 fe92 	bl	8011928 <__sinit>
 800fc04:	4b89      	ldr	r3, [pc, #548]	; (800fe2c <_vfiprintf_r+0x240>)
 800fc06:	429d      	cmp	r5, r3
 800fc08:	d11b      	bne.n	800fc42 <_vfiprintf_r+0x56>
 800fc0a:	6875      	ldr	r5, [r6, #4]
 800fc0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc0e:	07d9      	lsls	r1, r3, #31
 800fc10:	d405      	bmi.n	800fc1e <_vfiprintf_r+0x32>
 800fc12:	89ab      	ldrh	r3, [r5, #12]
 800fc14:	059a      	lsls	r2, r3, #22
 800fc16:	d402      	bmi.n	800fc1e <_vfiprintf_r+0x32>
 800fc18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc1a:	f001 ff28 	bl	8011a6e <__retarget_lock_acquire_recursive>
 800fc1e:	89ab      	ldrh	r3, [r5, #12]
 800fc20:	071b      	lsls	r3, r3, #28
 800fc22:	d501      	bpl.n	800fc28 <_vfiprintf_r+0x3c>
 800fc24:	692b      	ldr	r3, [r5, #16]
 800fc26:	b9eb      	cbnz	r3, 800fc64 <_vfiprintf_r+0x78>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	f000 fe62 	bl	80108f4 <__swsetup_r>
 800fc30:	b1c0      	cbz	r0, 800fc64 <_vfiprintf_r+0x78>
 800fc32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc34:	07dc      	lsls	r4, r3, #31
 800fc36:	d50e      	bpl.n	800fc56 <_vfiprintf_r+0x6a>
 800fc38:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3c:	b01d      	add	sp, #116	; 0x74
 800fc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc42:	4b7b      	ldr	r3, [pc, #492]	; (800fe30 <_vfiprintf_r+0x244>)
 800fc44:	429d      	cmp	r5, r3
 800fc46:	d101      	bne.n	800fc4c <_vfiprintf_r+0x60>
 800fc48:	68b5      	ldr	r5, [r6, #8]
 800fc4a:	e7df      	b.n	800fc0c <_vfiprintf_r+0x20>
 800fc4c:	4b79      	ldr	r3, [pc, #484]	; (800fe34 <_vfiprintf_r+0x248>)
 800fc4e:	429d      	cmp	r5, r3
 800fc50:	bf08      	it	eq
 800fc52:	68f5      	ldreq	r5, [r6, #12]
 800fc54:	e7da      	b.n	800fc0c <_vfiprintf_r+0x20>
 800fc56:	89ab      	ldrh	r3, [r5, #12]
 800fc58:	0598      	lsls	r0, r3, #22
 800fc5a:	d4ed      	bmi.n	800fc38 <_vfiprintf_r+0x4c>
 800fc5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc5e:	f001 ff07 	bl	8011a70 <__retarget_lock_release_recursive>
 800fc62:	e7e9      	b.n	800fc38 <_vfiprintf_r+0x4c>
 800fc64:	2300      	movs	r3, #0
 800fc66:	9309      	str	r3, [sp, #36]	; 0x24
 800fc68:	2320      	movs	r3, #32
 800fc6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc72:	2330      	movs	r3, #48	; 0x30
 800fc74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe38 <_vfiprintf_r+0x24c>
 800fc78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc7c:	f04f 0901 	mov.w	r9, #1
 800fc80:	4623      	mov	r3, r4
 800fc82:	469a      	mov	sl, r3
 800fc84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc88:	b10a      	cbz	r2, 800fc8e <_vfiprintf_r+0xa2>
 800fc8a:	2a25      	cmp	r2, #37	; 0x25
 800fc8c:	d1f9      	bne.n	800fc82 <_vfiprintf_r+0x96>
 800fc8e:	ebba 0b04 	subs.w	fp, sl, r4
 800fc92:	d00b      	beq.n	800fcac <_vfiprintf_r+0xc0>
 800fc94:	465b      	mov	r3, fp
 800fc96:	4622      	mov	r2, r4
 800fc98:	4629      	mov	r1, r5
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	f7ff ff93 	bl	800fbc6 <__sfputs_r>
 800fca0:	3001      	adds	r0, #1
 800fca2:	f000 80aa 	beq.w	800fdfa <_vfiprintf_r+0x20e>
 800fca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fca8:	445a      	add	r2, fp
 800fcaa:	9209      	str	r2, [sp, #36]	; 0x24
 800fcac:	f89a 3000 	ldrb.w	r3, [sl]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 80a2 	beq.w	800fdfa <_vfiprintf_r+0x20e>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	f04f 32ff 	mov.w	r2, #4294967295
 800fcbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcc0:	f10a 0a01 	add.w	sl, sl, #1
 800fcc4:	9304      	str	r3, [sp, #16]
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fccc:	931a      	str	r3, [sp, #104]	; 0x68
 800fcce:	4654      	mov	r4, sl
 800fcd0:	2205      	movs	r2, #5
 800fcd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd6:	4858      	ldr	r0, [pc, #352]	; (800fe38 <_vfiprintf_r+0x24c>)
 800fcd8:	f7f0 fa92 	bl	8000200 <memchr>
 800fcdc:	9a04      	ldr	r2, [sp, #16]
 800fcde:	b9d8      	cbnz	r0, 800fd18 <_vfiprintf_r+0x12c>
 800fce0:	06d1      	lsls	r1, r2, #27
 800fce2:	bf44      	itt	mi
 800fce4:	2320      	movmi	r3, #32
 800fce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcea:	0713      	lsls	r3, r2, #28
 800fcec:	bf44      	itt	mi
 800fcee:	232b      	movmi	r3, #43	; 0x2b
 800fcf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcfa:	d015      	beq.n	800fd28 <_vfiprintf_r+0x13c>
 800fcfc:	9a07      	ldr	r2, [sp, #28]
 800fcfe:	4654      	mov	r4, sl
 800fd00:	2000      	movs	r0, #0
 800fd02:	f04f 0c0a 	mov.w	ip, #10
 800fd06:	4621      	mov	r1, r4
 800fd08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd0c:	3b30      	subs	r3, #48	; 0x30
 800fd0e:	2b09      	cmp	r3, #9
 800fd10:	d94e      	bls.n	800fdb0 <_vfiprintf_r+0x1c4>
 800fd12:	b1b0      	cbz	r0, 800fd42 <_vfiprintf_r+0x156>
 800fd14:	9207      	str	r2, [sp, #28]
 800fd16:	e014      	b.n	800fd42 <_vfiprintf_r+0x156>
 800fd18:	eba0 0308 	sub.w	r3, r0, r8
 800fd1c:	fa09 f303 	lsl.w	r3, r9, r3
 800fd20:	4313      	orrs	r3, r2
 800fd22:	9304      	str	r3, [sp, #16]
 800fd24:	46a2      	mov	sl, r4
 800fd26:	e7d2      	b.n	800fcce <_vfiprintf_r+0xe2>
 800fd28:	9b03      	ldr	r3, [sp, #12]
 800fd2a:	1d19      	adds	r1, r3, #4
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	9103      	str	r1, [sp, #12]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	bfbb      	ittet	lt
 800fd34:	425b      	neglt	r3, r3
 800fd36:	f042 0202 	orrlt.w	r2, r2, #2
 800fd3a:	9307      	strge	r3, [sp, #28]
 800fd3c:	9307      	strlt	r3, [sp, #28]
 800fd3e:	bfb8      	it	lt
 800fd40:	9204      	strlt	r2, [sp, #16]
 800fd42:	7823      	ldrb	r3, [r4, #0]
 800fd44:	2b2e      	cmp	r3, #46	; 0x2e
 800fd46:	d10c      	bne.n	800fd62 <_vfiprintf_r+0x176>
 800fd48:	7863      	ldrb	r3, [r4, #1]
 800fd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd4c:	d135      	bne.n	800fdba <_vfiprintf_r+0x1ce>
 800fd4e:	9b03      	ldr	r3, [sp, #12]
 800fd50:	1d1a      	adds	r2, r3, #4
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	9203      	str	r2, [sp, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	bfb8      	it	lt
 800fd5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd5e:	3402      	adds	r4, #2
 800fd60:	9305      	str	r3, [sp, #20]
 800fd62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe48 <_vfiprintf_r+0x25c>
 800fd66:	7821      	ldrb	r1, [r4, #0]
 800fd68:	2203      	movs	r2, #3
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	f7f0 fa48 	bl	8000200 <memchr>
 800fd70:	b140      	cbz	r0, 800fd84 <_vfiprintf_r+0x198>
 800fd72:	2340      	movs	r3, #64	; 0x40
 800fd74:	eba0 000a 	sub.w	r0, r0, sl
 800fd78:	fa03 f000 	lsl.w	r0, r3, r0
 800fd7c:	9b04      	ldr	r3, [sp, #16]
 800fd7e:	4303      	orrs	r3, r0
 800fd80:	3401      	adds	r4, #1
 800fd82:	9304      	str	r3, [sp, #16]
 800fd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd88:	482c      	ldr	r0, [pc, #176]	; (800fe3c <_vfiprintf_r+0x250>)
 800fd8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd8e:	2206      	movs	r2, #6
 800fd90:	f7f0 fa36 	bl	8000200 <memchr>
 800fd94:	2800      	cmp	r0, #0
 800fd96:	d03f      	beq.n	800fe18 <_vfiprintf_r+0x22c>
 800fd98:	4b29      	ldr	r3, [pc, #164]	; (800fe40 <_vfiprintf_r+0x254>)
 800fd9a:	bb1b      	cbnz	r3, 800fde4 <_vfiprintf_r+0x1f8>
 800fd9c:	9b03      	ldr	r3, [sp, #12]
 800fd9e:	3307      	adds	r3, #7
 800fda0:	f023 0307 	bic.w	r3, r3, #7
 800fda4:	3308      	adds	r3, #8
 800fda6:	9303      	str	r3, [sp, #12]
 800fda8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdaa:	443b      	add	r3, r7
 800fdac:	9309      	str	r3, [sp, #36]	; 0x24
 800fdae:	e767      	b.n	800fc80 <_vfiprintf_r+0x94>
 800fdb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	2001      	movs	r0, #1
 800fdb8:	e7a5      	b.n	800fd06 <_vfiprintf_r+0x11a>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	3401      	adds	r4, #1
 800fdbe:	9305      	str	r3, [sp, #20]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	f04f 0c0a 	mov.w	ip, #10
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdcc:	3a30      	subs	r2, #48	; 0x30
 800fdce:	2a09      	cmp	r2, #9
 800fdd0:	d903      	bls.n	800fdda <_vfiprintf_r+0x1ee>
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d0c5      	beq.n	800fd62 <_vfiprintf_r+0x176>
 800fdd6:	9105      	str	r1, [sp, #20]
 800fdd8:	e7c3      	b.n	800fd62 <_vfiprintf_r+0x176>
 800fdda:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdde:	4604      	mov	r4, r0
 800fde0:	2301      	movs	r3, #1
 800fde2:	e7f0      	b.n	800fdc6 <_vfiprintf_r+0x1da>
 800fde4:	ab03      	add	r3, sp, #12
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	462a      	mov	r2, r5
 800fdea:	4b16      	ldr	r3, [pc, #88]	; (800fe44 <_vfiprintf_r+0x258>)
 800fdec:	a904      	add	r1, sp, #16
 800fdee:	4630      	mov	r0, r6
 800fdf0:	f000 f8cc 	bl	800ff8c <_printf_float>
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	1c78      	adds	r0, r7, #1
 800fdf8:	d1d6      	bne.n	800fda8 <_vfiprintf_r+0x1bc>
 800fdfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdfc:	07d9      	lsls	r1, r3, #31
 800fdfe:	d405      	bmi.n	800fe0c <_vfiprintf_r+0x220>
 800fe00:	89ab      	ldrh	r3, [r5, #12]
 800fe02:	059a      	lsls	r2, r3, #22
 800fe04:	d402      	bmi.n	800fe0c <_vfiprintf_r+0x220>
 800fe06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe08:	f001 fe32 	bl	8011a70 <__retarget_lock_release_recursive>
 800fe0c:	89ab      	ldrh	r3, [r5, #12]
 800fe0e:	065b      	lsls	r3, r3, #25
 800fe10:	f53f af12 	bmi.w	800fc38 <_vfiprintf_r+0x4c>
 800fe14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe16:	e711      	b.n	800fc3c <_vfiprintf_r+0x50>
 800fe18:	ab03      	add	r3, sp, #12
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	462a      	mov	r2, r5
 800fe1e:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <_vfiprintf_r+0x258>)
 800fe20:	a904      	add	r1, sp, #16
 800fe22:	4630      	mov	r0, r6
 800fe24:	f000 fb56 	bl	80104d4 <_printf_i>
 800fe28:	e7e4      	b.n	800fdf4 <_vfiprintf_r+0x208>
 800fe2a:	bf00      	nop
 800fe2c:	0802e788 	.word	0x0802e788
 800fe30:	0802e7a8 	.word	0x0802e7a8
 800fe34:	0802e768 	.word	0x0802e768
 800fe38:	0802e590 	.word	0x0802e590
 800fe3c:	0802e59a 	.word	0x0802e59a
 800fe40:	0800ff8d 	.word	0x0800ff8d
 800fe44:	0800fbc7 	.word	0x0800fbc7
 800fe48:	0802e596 	.word	0x0802e596

0800fe4c <__cvt>:
 800fe4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe50:	ec55 4b10 	vmov	r4, r5, d0
 800fe54:	2d00      	cmp	r5, #0
 800fe56:	460e      	mov	r6, r1
 800fe58:	4619      	mov	r1, r3
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	bfbb      	ittet	lt
 800fe5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fe62:	461d      	movlt	r5, r3
 800fe64:	2300      	movge	r3, #0
 800fe66:	232d      	movlt	r3, #45	; 0x2d
 800fe68:	700b      	strb	r3, [r1, #0]
 800fe6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fe70:	4691      	mov	r9, r2
 800fe72:	f023 0820 	bic.w	r8, r3, #32
 800fe76:	bfbc      	itt	lt
 800fe78:	4622      	movlt	r2, r4
 800fe7a:	4614      	movlt	r4, r2
 800fe7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fe80:	d005      	beq.n	800fe8e <__cvt+0x42>
 800fe82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fe86:	d100      	bne.n	800fe8a <__cvt+0x3e>
 800fe88:	3601      	adds	r6, #1
 800fe8a:	2102      	movs	r1, #2
 800fe8c:	e000      	b.n	800fe90 <__cvt+0x44>
 800fe8e:	2103      	movs	r1, #3
 800fe90:	ab03      	add	r3, sp, #12
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	ab02      	add	r3, sp, #8
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	ec45 4b10 	vmov	d0, r4, r5
 800fe9c:	4653      	mov	r3, sl
 800fe9e:	4632      	mov	r2, r6
 800fea0:	f000 fe3a 	bl	8010b18 <_dtoa_r>
 800fea4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fea8:	4607      	mov	r7, r0
 800feaa:	d102      	bne.n	800feb2 <__cvt+0x66>
 800feac:	f019 0f01 	tst.w	r9, #1
 800feb0:	d022      	beq.n	800fef8 <__cvt+0xac>
 800feb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800feb6:	eb07 0906 	add.w	r9, r7, r6
 800feba:	d110      	bne.n	800fede <__cvt+0x92>
 800febc:	783b      	ldrb	r3, [r7, #0]
 800febe:	2b30      	cmp	r3, #48	; 0x30
 800fec0:	d10a      	bne.n	800fed8 <__cvt+0x8c>
 800fec2:	2200      	movs	r2, #0
 800fec4:	2300      	movs	r3, #0
 800fec6:	4620      	mov	r0, r4
 800fec8:	4629      	mov	r1, r5
 800feca:	f7f0 fe0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800fece:	b918      	cbnz	r0, 800fed8 <__cvt+0x8c>
 800fed0:	f1c6 0601 	rsb	r6, r6, #1
 800fed4:	f8ca 6000 	str.w	r6, [sl]
 800fed8:	f8da 3000 	ldr.w	r3, [sl]
 800fedc:	4499      	add	r9, r3
 800fede:	2200      	movs	r2, #0
 800fee0:	2300      	movs	r3, #0
 800fee2:	4620      	mov	r0, r4
 800fee4:	4629      	mov	r1, r5
 800fee6:	f7f0 fdff 	bl	8000ae8 <__aeabi_dcmpeq>
 800feea:	b108      	cbz	r0, 800fef0 <__cvt+0xa4>
 800feec:	f8cd 900c 	str.w	r9, [sp, #12]
 800fef0:	2230      	movs	r2, #48	; 0x30
 800fef2:	9b03      	ldr	r3, [sp, #12]
 800fef4:	454b      	cmp	r3, r9
 800fef6:	d307      	bcc.n	800ff08 <__cvt+0xbc>
 800fef8:	9b03      	ldr	r3, [sp, #12]
 800fefa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fefc:	1bdb      	subs	r3, r3, r7
 800fefe:	4638      	mov	r0, r7
 800ff00:	6013      	str	r3, [r2, #0]
 800ff02:	b004      	add	sp, #16
 800ff04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff08:	1c59      	adds	r1, r3, #1
 800ff0a:	9103      	str	r1, [sp, #12]
 800ff0c:	701a      	strb	r2, [r3, #0]
 800ff0e:	e7f0      	b.n	800fef2 <__cvt+0xa6>

0800ff10 <__exponent>:
 800ff10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff12:	4603      	mov	r3, r0
 800ff14:	2900      	cmp	r1, #0
 800ff16:	bfb8      	it	lt
 800ff18:	4249      	neglt	r1, r1
 800ff1a:	f803 2b02 	strb.w	r2, [r3], #2
 800ff1e:	bfb4      	ite	lt
 800ff20:	222d      	movlt	r2, #45	; 0x2d
 800ff22:	222b      	movge	r2, #43	; 0x2b
 800ff24:	2909      	cmp	r1, #9
 800ff26:	7042      	strb	r2, [r0, #1]
 800ff28:	dd2a      	ble.n	800ff80 <__exponent+0x70>
 800ff2a:	f10d 0407 	add.w	r4, sp, #7
 800ff2e:	46a4      	mov	ip, r4
 800ff30:	270a      	movs	r7, #10
 800ff32:	46a6      	mov	lr, r4
 800ff34:	460a      	mov	r2, r1
 800ff36:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff3a:	fb07 1516 	mls	r5, r7, r6, r1
 800ff3e:	3530      	adds	r5, #48	; 0x30
 800ff40:	2a63      	cmp	r2, #99	; 0x63
 800ff42:	f104 34ff 	add.w	r4, r4, #4294967295
 800ff46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	dcf1      	bgt.n	800ff32 <__exponent+0x22>
 800ff4e:	3130      	adds	r1, #48	; 0x30
 800ff50:	f1ae 0502 	sub.w	r5, lr, #2
 800ff54:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ff58:	1c44      	adds	r4, r0, #1
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	4561      	cmp	r1, ip
 800ff5e:	d30a      	bcc.n	800ff76 <__exponent+0x66>
 800ff60:	f10d 0209 	add.w	r2, sp, #9
 800ff64:	eba2 020e 	sub.w	r2, r2, lr
 800ff68:	4565      	cmp	r5, ip
 800ff6a:	bf88      	it	hi
 800ff6c:	2200      	movhi	r2, #0
 800ff6e:	4413      	add	r3, r2
 800ff70:	1a18      	subs	r0, r3, r0
 800ff72:	b003      	add	sp, #12
 800ff74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ff7e:	e7ed      	b.n	800ff5c <__exponent+0x4c>
 800ff80:	2330      	movs	r3, #48	; 0x30
 800ff82:	3130      	adds	r1, #48	; 0x30
 800ff84:	7083      	strb	r3, [r0, #2]
 800ff86:	70c1      	strb	r1, [r0, #3]
 800ff88:	1d03      	adds	r3, r0, #4
 800ff8a:	e7f1      	b.n	800ff70 <__exponent+0x60>

0800ff8c <_printf_float>:
 800ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff90:	ed2d 8b02 	vpush	{d8}
 800ff94:	b08d      	sub	sp, #52	; 0x34
 800ff96:	460c      	mov	r4, r1
 800ff98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ff9c:	4616      	mov	r6, r2
 800ff9e:	461f      	mov	r7, r3
 800ffa0:	4605      	mov	r5, r0
 800ffa2:	f001 fd5f 	bl	8011a64 <_localeconv_r>
 800ffa6:	f8d0 a000 	ldr.w	sl, [r0]
 800ffaa:	4650      	mov	r0, sl
 800ffac:	f7f0 f920 	bl	80001f0 <strlen>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ffb4:	6823      	ldr	r3, [r4, #0]
 800ffb6:	9305      	str	r3, [sp, #20]
 800ffb8:	f8d8 3000 	ldr.w	r3, [r8]
 800ffbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ffc0:	3307      	adds	r3, #7
 800ffc2:	f023 0307 	bic.w	r3, r3, #7
 800ffc6:	f103 0208 	add.w	r2, r3, #8
 800ffca:	f8c8 2000 	str.w	r2, [r8]
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ffd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ffda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffde:	9307      	str	r3, [sp, #28]
 800ffe0:	f8cd 8018 	str.w	r8, [sp, #24]
 800ffe4:	ee08 0a10 	vmov	s16, r0
 800ffe8:	4b9f      	ldr	r3, [pc, #636]	; (8010268 <_printf_float+0x2dc>)
 800ffea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ffee:	f04f 32ff 	mov.w	r2, #4294967295
 800fff2:	f7f0 fdab 	bl	8000b4c <__aeabi_dcmpun>
 800fff6:	bb88      	cbnz	r0, 801005c <_printf_float+0xd0>
 800fff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fffc:	4b9a      	ldr	r3, [pc, #616]	; (8010268 <_printf_float+0x2dc>)
 800fffe:	f04f 32ff 	mov.w	r2, #4294967295
 8010002:	f7f0 fd85 	bl	8000b10 <__aeabi_dcmple>
 8010006:	bb48      	cbnz	r0, 801005c <_printf_float+0xd0>
 8010008:	2200      	movs	r2, #0
 801000a:	2300      	movs	r3, #0
 801000c:	4640      	mov	r0, r8
 801000e:	4649      	mov	r1, r9
 8010010:	f7f0 fd74 	bl	8000afc <__aeabi_dcmplt>
 8010014:	b110      	cbz	r0, 801001c <_printf_float+0x90>
 8010016:	232d      	movs	r3, #45	; 0x2d
 8010018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801001c:	4b93      	ldr	r3, [pc, #588]	; (801026c <_printf_float+0x2e0>)
 801001e:	4894      	ldr	r0, [pc, #592]	; (8010270 <_printf_float+0x2e4>)
 8010020:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010024:	bf94      	ite	ls
 8010026:	4698      	movls	r8, r3
 8010028:	4680      	movhi	r8, r0
 801002a:	2303      	movs	r3, #3
 801002c:	6123      	str	r3, [r4, #16]
 801002e:	9b05      	ldr	r3, [sp, #20]
 8010030:	f023 0204 	bic.w	r2, r3, #4
 8010034:	6022      	str	r2, [r4, #0]
 8010036:	f04f 0900 	mov.w	r9, #0
 801003a:	9700      	str	r7, [sp, #0]
 801003c:	4633      	mov	r3, r6
 801003e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010040:	4621      	mov	r1, r4
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f9d8 	bl	80103f8 <_printf_common>
 8010048:	3001      	adds	r0, #1
 801004a:	f040 8090 	bne.w	801016e <_printf_float+0x1e2>
 801004e:	f04f 30ff 	mov.w	r0, #4294967295
 8010052:	b00d      	add	sp, #52	; 0x34
 8010054:	ecbd 8b02 	vpop	{d8}
 8010058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005c:	4642      	mov	r2, r8
 801005e:	464b      	mov	r3, r9
 8010060:	4640      	mov	r0, r8
 8010062:	4649      	mov	r1, r9
 8010064:	f7f0 fd72 	bl	8000b4c <__aeabi_dcmpun>
 8010068:	b140      	cbz	r0, 801007c <_printf_float+0xf0>
 801006a:	464b      	mov	r3, r9
 801006c:	2b00      	cmp	r3, #0
 801006e:	bfbc      	itt	lt
 8010070:	232d      	movlt	r3, #45	; 0x2d
 8010072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010076:	487f      	ldr	r0, [pc, #508]	; (8010274 <_printf_float+0x2e8>)
 8010078:	4b7f      	ldr	r3, [pc, #508]	; (8010278 <_printf_float+0x2ec>)
 801007a:	e7d1      	b.n	8010020 <_printf_float+0x94>
 801007c:	6863      	ldr	r3, [r4, #4]
 801007e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010082:	9206      	str	r2, [sp, #24]
 8010084:	1c5a      	adds	r2, r3, #1
 8010086:	d13f      	bne.n	8010108 <_printf_float+0x17c>
 8010088:	2306      	movs	r3, #6
 801008a:	6063      	str	r3, [r4, #4]
 801008c:	9b05      	ldr	r3, [sp, #20]
 801008e:	6861      	ldr	r1, [r4, #4]
 8010090:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010094:	2300      	movs	r3, #0
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	ab0a      	add	r3, sp, #40	; 0x28
 801009a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801009e:	ab09      	add	r3, sp, #36	; 0x24
 80100a0:	ec49 8b10 	vmov	d0, r8, r9
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	6022      	str	r2, [r4, #0]
 80100a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80100ac:	4628      	mov	r0, r5
 80100ae:	f7ff fecd 	bl	800fe4c <__cvt>
 80100b2:	9b06      	ldr	r3, [sp, #24]
 80100b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80100b6:	2b47      	cmp	r3, #71	; 0x47
 80100b8:	4680      	mov	r8, r0
 80100ba:	d108      	bne.n	80100ce <_printf_float+0x142>
 80100bc:	1cc8      	adds	r0, r1, #3
 80100be:	db02      	blt.n	80100c6 <_printf_float+0x13a>
 80100c0:	6863      	ldr	r3, [r4, #4]
 80100c2:	4299      	cmp	r1, r3
 80100c4:	dd41      	ble.n	801014a <_printf_float+0x1be>
 80100c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80100ca:	fa5f fb8b 	uxtb.w	fp, fp
 80100ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100d2:	d820      	bhi.n	8010116 <_printf_float+0x18a>
 80100d4:	3901      	subs	r1, #1
 80100d6:	465a      	mov	r2, fp
 80100d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80100dc:	9109      	str	r1, [sp, #36]	; 0x24
 80100de:	f7ff ff17 	bl	800ff10 <__exponent>
 80100e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100e4:	1813      	adds	r3, r2, r0
 80100e6:	2a01      	cmp	r2, #1
 80100e8:	4681      	mov	r9, r0
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	dc02      	bgt.n	80100f4 <_printf_float+0x168>
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	07d2      	lsls	r2, r2, #31
 80100f2:	d501      	bpl.n	80100f8 <_printf_float+0x16c>
 80100f4:	3301      	adds	r3, #1
 80100f6:	6123      	str	r3, [r4, #16]
 80100f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d09c      	beq.n	801003a <_printf_float+0xae>
 8010100:	232d      	movs	r3, #45	; 0x2d
 8010102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010106:	e798      	b.n	801003a <_printf_float+0xae>
 8010108:	9a06      	ldr	r2, [sp, #24]
 801010a:	2a47      	cmp	r2, #71	; 0x47
 801010c:	d1be      	bne.n	801008c <_printf_float+0x100>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1bc      	bne.n	801008c <_printf_float+0x100>
 8010112:	2301      	movs	r3, #1
 8010114:	e7b9      	b.n	801008a <_printf_float+0xfe>
 8010116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801011a:	d118      	bne.n	801014e <_printf_float+0x1c2>
 801011c:	2900      	cmp	r1, #0
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	dd0b      	ble.n	801013a <_printf_float+0x1ae>
 8010122:	6121      	str	r1, [r4, #16]
 8010124:	b913      	cbnz	r3, 801012c <_printf_float+0x1a0>
 8010126:	6822      	ldr	r2, [r4, #0]
 8010128:	07d0      	lsls	r0, r2, #31
 801012a:	d502      	bpl.n	8010132 <_printf_float+0x1a6>
 801012c:	3301      	adds	r3, #1
 801012e:	440b      	add	r3, r1
 8010130:	6123      	str	r3, [r4, #16]
 8010132:	65a1      	str	r1, [r4, #88]	; 0x58
 8010134:	f04f 0900 	mov.w	r9, #0
 8010138:	e7de      	b.n	80100f8 <_printf_float+0x16c>
 801013a:	b913      	cbnz	r3, 8010142 <_printf_float+0x1b6>
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	07d2      	lsls	r2, r2, #31
 8010140:	d501      	bpl.n	8010146 <_printf_float+0x1ba>
 8010142:	3302      	adds	r3, #2
 8010144:	e7f4      	b.n	8010130 <_printf_float+0x1a4>
 8010146:	2301      	movs	r3, #1
 8010148:	e7f2      	b.n	8010130 <_printf_float+0x1a4>
 801014a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801014e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010150:	4299      	cmp	r1, r3
 8010152:	db05      	blt.n	8010160 <_printf_float+0x1d4>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	6121      	str	r1, [r4, #16]
 8010158:	07d8      	lsls	r0, r3, #31
 801015a:	d5ea      	bpl.n	8010132 <_printf_float+0x1a6>
 801015c:	1c4b      	adds	r3, r1, #1
 801015e:	e7e7      	b.n	8010130 <_printf_float+0x1a4>
 8010160:	2900      	cmp	r1, #0
 8010162:	bfd4      	ite	le
 8010164:	f1c1 0202 	rsble	r2, r1, #2
 8010168:	2201      	movgt	r2, #1
 801016a:	4413      	add	r3, r2
 801016c:	e7e0      	b.n	8010130 <_printf_float+0x1a4>
 801016e:	6823      	ldr	r3, [r4, #0]
 8010170:	055a      	lsls	r2, r3, #21
 8010172:	d407      	bmi.n	8010184 <_printf_float+0x1f8>
 8010174:	6923      	ldr	r3, [r4, #16]
 8010176:	4642      	mov	r2, r8
 8010178:	4631      	mov	r1, r6
 801017a:	4628      	mov	r0, r5
 801017c:	47b8      	blx	r7
 801017e:	3001      	adds	r0, #1
 8010180:	d12c      	bne.n	80101dc <_printf_float+0x250>
 8010182:	e764      	b.n	801004e <_printf_float+0xc2>
 8010184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010188:	f240 80e0 	bls.w	801034c <_printf_float+0x3c0>
 801018c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010190:	2200      	movs	r2, #0
 8010192:	2300      	movs	r3, #0
 8010194:	f7f0 fca8 	bl	8000ae8 <__aeabi_dcmpeq>
 8010198:	2800      	cmp	r0, #0
 801019a:	d034      	beq.n	8010206 <_printf_float+0x27a>
 801019c:	4a37      	ldr	r2, [pc, #220]	; (801027c <_printf_float+0x2f0>)
 801019e:	2301      	movs	r3, #1
 80101a0:	4631      	mov	r1, r6
 80101a2:	4628      	mov	r0, r5
 80101a4:	47b8      	blx	r7
 80101a6:	3001      	adds	r0, #1
 80101a8:	f43f af51 	beq.w	801004e <_printf_float+0xc2>
 80101ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101b0:	429a      	cmp	r2, r3
 80101b2:	db02      	blt.n	80101ba <_printf_float+0x22e>
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	07d8      	lsls	r0, r3, #31
 80101b8:	d510      	bpl.n	80101dc <_printf_float+0x250>
 80101ba:	ee18 3a10 	vmov	r3, s16
 80101be:	4652      	mov	r2, sl
 80101c0:	4631      	mov	r1, r6
 80101c2:	4628      	mov	r0, r5
 80101c4:	47b8      	blx	r7
 80101c6:	3001      	adds	r0, #1
 80101c8:	f43f af41 	beq.w	801004e <_printf_float+0xc2>
 80101cc:	f04f 0800 	mov.w	r8, #0
 80101d0:	f104 091a 	add.w	r9, r4, #26
 80101d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d6:	3b01      	subs	r3, #1
 80101d8:	4543      	cmp	r3, r8
 80101da:	dc09      	bgt.n	80101f0 <_printf_float+0x264>
 80101dc:	6823      	ldr	r3, [r4, #0]
 80101de:	079b      	lsls	r3, r3, #30
 80101e0:	f100 8105 	bmi.w	80103ee <_printf_float+0x462>
 80101e4:	68e0      	ldr	r0, [r4, #12]
 80101e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101e8:	4298      	cmp	r0, r3
 80101ea:	bfb8      	it	lt
 80101ec:	4618      	movlt	r0, r3
 80101ee:	e730      	b.n	8010052 <_printf_float+0xc6>
 80101f0:	2301      	movs	r3, #1
 80101f2:	464a      	mov	r2, r9
 80101f4:	4631      	mov	r1, r6
 80101f6:	4628      	mov	r0, r5
 80101f8:	47b8      	blx	r7
 80101fa:	3001      	adds	r0, #1
 80101fc:	f43f af27 	beq.w	801004e <_printf_float+0xc2>
 8010200:	f108 0801 	add.w	r8, r8, #1
 8010204:	e7e6      	b.n	80101d4 <_printf_float+0x248>
 8010206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010208:	2b00      	cmp	r3, #0
 801020a:	dc39      	bgt.n	8010280 <_printf_float+0x2f4>
 801020c:	4a1b      	ldr	r2, [pc, #108]	; (801027c <_printf_float+0x2f0>)
 801020e:	2301      	movs	r3, #1
 8010210:	4631      	mov	r1, r6
 8010212:	4628      	mov	r0, r5
 8010214:	47b8      	blx	r7
 8010216:	3001      	adds	r0, #1
 8010218:	f43f af19 	beq.w	801004e <_printf_float+0xc2>
 801021c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010220:	4313      	orrs	r3, r2
 8010222:	d102      	bne.n	801022a <_printf_float+0x29e>
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	07d9      	lsls	r1, r3, #31
 8010228:	d5d8      	bpl.n	80101dc <_printf_float+0x250>
 801022a:	ee18 3a10 	vmov	r3, s16
 801022e:	4652      	mov	r2, sl
 8010230:	4631      	mov	r1, r6
 8010232:	4628      	mov	r0, r5
 8010234:	47b8      	blx	r7
 8010236:	3001      	adds	r0, #1
 8010238:	f43f af09 	beq.w	801004e <_printf_float+0xc2>
 801023c:	f04f 0900 	mov.w	r9, #0
 8010240:	f104 0a1a 	add.w	sl, r4, #26
 8010244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010246:	425b      	negs	r3, r3
 8010248:	454b      	cmp	r3, r9
 801024a:	dc01      	bgt.n	8010250 <_printf_float+0x2c4>
 801024c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024e:	e792      	b.n	8010176 <_printf_float+0x1ea>
 8010250:	2301      	movs	r3, #1
 8010252:	4652      	mov	r2, sl
 8010254:	4631      	mov	r1, r6
 8010256:	4628      	mov	r0, r5
 8010258:	47b8      	blx	r7
 801025a:	3001      	adds	r0, #1
 801025c:	f43f aef7 	beq.w	801004e <_printf_float+0xc2>
 8010260:	f109 0901 	add.w	r9, r9, #1
 8010264:	e7ee      	b.n	8010244 <_printf_float+0x2b8>
 8010266:	bf00      	nop
 8010268:	7fefffff 	.word	0x7fefffff
 801026c:	0802e5a1 	.word	0x0802e5a1
 8010270:	0802e5a5 	.word	0x0802e5a5
 8010274:	0802e5ad 	.word	0x0802e5ad
 8010278:	0802e5a9 	.word	0x0802e5a9
 801027c:	0802e5b1 	.word	0x0802e5b1
 8010280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010284:	429a      	cmp	r2, r3
 8010286:	bfa8      	it	ge
 8010288:	461a      	movge	r2, r3
 801028a:	2a00      	cmp	r2, #0
 801028c:	4691      	mov	r9, r2
 801028e:	dc37      	bgt.n	8010300 <_printf_float+0x374>
 8010290:	f04f 0b00 	mov.w	fp, #0
 8010294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010298:	f104 021a 	add.w	r2, r4, #26
 801029c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	eba3 0309 	sub.w	r3, r3, r9
 80102a4:	455b      	cmp	r3, fp
 80102a6:	dc33      	bgt.n	8010310 <_printf_float+0x384>
 80102a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102ac:	429a      	cmp	r2, r3
 80102ae:	db3b      	blt.n	8010328 <_printf_float+0x39c>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	07da      	lsls	r2, r3, #31
 80102b4:	d438      	bmi.n	8010328 <_printf_float+0x39c>
 80102b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b8:	9a05      	ldr	r2, [sp, #20]
 80102ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102bc:	1a9a      	subs	r2, r3, r2
 80102be:	eba3 0901 	sub.w	r9, r3, r1
 80102c2:	4591      	cmp	r9, r2
 80102c4:	bfa8      	it	ge
 80102c6:	4691      	movge	r9, r2
 80102c8:	f1b9 0f00 	cmp.w	r9, #0
 80102cc:	dc35      	bgt.n	801033a <_printf_float+0x3ae>
 80102ce:	f04f 0800 	mov.w	r8, #0
 80102d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102d6:	f104 0a1a 	add.w	sl, r4, #26
 80102da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	eba3 0309 	sub.w	r3, r3, r9
 80102e4:	4543      	cmp	r3, r8
 80102e6:	f77f af79 	ble.w	80101dc <_printf_float+0x250>
 80102ea:	2301      	movs	r3, #1
 80102ec:	4652      	mov	r2, sl
 80102ee:	4631      	mov	r1, r6
 80102f0:	4628      	mov	r0, r5
 80102f2:	47b8      	blx	r7
 80102f4:	3001      	adds	r0, #1
 80102f6:	f43f aeaa 	beq.w	801004e <_printf_float+0xc2>
 80102fa:	f108 0801 	add.w	r8, r8, #1
 80102fe:	e7ec      	b.n	80102da <_printf_float+0x34e>
 8010300:	4613      	mov	r3, r2
 8010302:	4631      	mov	r1, r6
 8010304:	4642      	mov	r2, r8
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	d1c0      	bne.n	8010290 <_printf_float+0x304>
 801030e:	e69e      	b.n	801004e <_printf_float+0xc2>
 8010310:	2301      	movs	r3, #1
 8010312:	4631      	mov	r1, r6
 8010314:	4628      	mov	r0, r5
 8010316:	9205      	str	r2, [sp, #20]
 8010318:	47b8      	blx	r7
 801031a:	3001      	adds	r0, #1
 801031c:	f43f ae97 	beq.w	801004e <_printf_float+0xc2>
 8010320:	9a05      	ldr	r2, [sp, #20]
 8010322:	f10b 0b01 	add.w	fp, fp, #1
 8010326:	e7b9      	b.n	801029c <_printf_float+0x310>
 8010328:	ee18 3a10 	vmov	r3, s16
 801032c:	4652      	mov	r2, sl
 801032e:	4631      	mov	r1, r6
 8010330:	4628      	mov	r0, r5
 8010332:	47b8      	blx	r7
 8010334:	3001      	adds	r0, #1
 8010336:	d1be      	bne.n	80102b6 <_printf_float+0x32a>
 8010338:	e689      	b.n	801004e <_printf_float+0xc2>
 801033a:	9a05      	ldr	r2, [sp, #20]
 801033c:	464b      	mov	r3, r9
 801033e:	4442      	add	r2, r8
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	d1c1      	bne.n	80102ce <_printf_float+0x342>
 801034a:	e680      	b.n	801004e <_printf_float+0xc2>
 801034c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801034e:	2a01      	cmp	r2, #1
 8010350:	dc01      	bgt.n	8010356 <_printf_float+0x3ca>
 8010352:	07db      	lsls	r3, r3, #31
 8010354:	d538      	bpl.n	80103c8 <_printf_float+0x43c>
 8010356:	2301      	movs	r3, #1
 8010358:	4642      	mov	r2, r8
 801035a:	4631      	mov	r1, r6
 801035c:	4628      	mov	r0, r5
 801035e:	47b8      	blx	r7
 8010360:	3001      	adds	r0, #1
 8010362:	f43f ae74 	beq.w	801004e <_printf_float+0xc2>
 8010366:	ee18 3a10 	vmov	r3, s16
 801036a:	4652      	mov	r2, sl
 801036c:	4631      	mov	r1, r6
 801036e:	4628      	mov	r0, r5
 8010370:	47b8      	blx	r7
 8010372:	3001      	adds	r0, #1
 8010374:	f43f ae6b 	beq.w	801004e <_printf_float+0xc2>
 8010378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801037c:	2200      	movs	r2, #0
 801037e:	2300      	movs	r3, #0
 8010380:	f7f0 fbb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010384:	b9d8      	cbnz	r0, 80103be <_printf_float+0x432>
 8010386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010388:	f108 0201 	add.w	r2, r8, #1
 801038c:	3b01      	subs	r3, #1
 801038e:	4631      	mov	r1, r6
 8010390:	4628      	mov	r0, r5
 8010392:	47b8      	blx	r7
 8010394:	3001      	adds	r0, #1
 8010396:	d10e      	bne.n	80103b6 <_printf_float+0x42a>
 8010398:	e659      	b.n	801004e <_printf_float+0xc2>
 801039a:	2301      	movs	r3, #1
 801039c:	4652      	mov	r2, sl
 801039e:	4631      	mov	r1, r6
 80103a0:	4628      	mov	r0, r5
 80103a2:	47b8      	blx	r7
 80103a4:	3001      	adds	r0, #1
 80103a6:	f43f ae52 	beq.w	801004e <_printf_float+0xc2>
 80103aa:	f108 0801 	add.w	r8, r8, #1
 80103ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103b0:	3b01      	subs	r3, #1
 80103b2:	4543      	cmp	r3, r8
 80103b4:	dcf1      	bgt.n	801039a <_printf_float+0x40e>
 80103b6:	464b      	mov	r3, r9
 80103b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80103bc:	e6dc      	b.n	8010178 <_printf_float+0x1ec>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	f104 0a1a 	add.w	sl, r4, #26
 80103c6:	e7f2      	b.n	80103ae <_printf_float+0x422>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4642      	mov	r2, r8
 80103cc:	e7df      	b.n	801038e <_printf_float+0x402>
 80103ce:	2301      	movs	r3, #1
 80103d0:	464a      	mov	r2, r9
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	f43f ae38 	beq.w	801004e <_printf_float+0xc2>
 80103de:	f108 0801 	add.w	r8, r8, #1
 80103e2:	68e3      	ldr	r3, [r4, #12]
 80103e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	4543      	cmp	r3, r8
 80103ea:	dcf0      	bgt.n	80103ce <_printf_float+0x442>
 80103ec:	e6fa      	b.n	80101e4 <_printf_float+0x258>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	f104 0919 	add.w	r9, r4, #25
 80103f6:	e7f4      	b.n	80103e2 <_printf_float+0x456>

080103f8 <_printf_common>:
 80103f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103fc:	4616      	mov	r6, r2
 80103fe:	4699      	mov	r9, r3
 8010400:	688a      	ldr	r2, [r1, #8]
 8010402:	690b      	ldr	r3, [r1, #16]
 8010404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010408:	4293      	cmp	r3, r2
 801040a:	bfb8      	it	lt
 801040c:	4613      	movlt	r3, r2
 801040e:	6033      	str	r3, [r6, #0]
 8010410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010414:	4607      	mov	r7, r0
 8010416:	460c      	mov	r4, r1
 8010418:	b10a      	cbz	r2, 801041e <_printf_common+0x26>
 801041a:	3301      	adds	r3, #1
 801041c:	6033      	str	r3, [r6, #0]
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	0699      	lsls	r1, r3, #26
 8010422:	bf42      	ittt	mi
 8010424:	6833      	ldrmi	r3, [r6, #0]
 8010426:	3302      	addmi	r3, #2
 8010428:	6033      	strmi	r3, [r6, #0]
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	f015 0506 	ands.w	r5, r5, #6
 8010430:	d106      	bne.n	8010440 <_printf_common+0x48>
 8010432:	f104 0a19 	add.w	sl, r4, #25
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	6832      	ldr	r2, [r6, #0]
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	42ab      	cmp	r3, r5
 801043e:	dc26      	bgt.n	801048e <_printf_common+0x96>
 8010440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010444:	1e13      	subs	r3, r2, #0
 8010446:	6822      	ldr	r2, [r4, #0]
 8010448:	bf18      	it	ne
 801044a:	2301      	movne	r3, #1
 801044c:	0692      	lsls	r2, r2, #26
 801044e:	d42b      	bmi.n	80104a8 <_printf_common+0xb0>
 8010450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010454:	4649      	mov	r1, r9
 8010456:	4638      	mov	r0, r7
 8010458:	47c0      	blx	r8
 801045a:	3001      	adds	r0, #1
 801045c:	d01e      	beq.n	801049c <_printf_common+0xa4>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	68e5      	ldr	r5, [r4, #12]
 8010462:	6832      	ldr	r2, [r6, #0]
 8010464:	f003 0306 	and.w	r3, r3, #6
 8010468:	2b04      	cmp	r3, #4
 801046a:	bf08      	it	eq
 801046c:	1aad      	subeq	r5, r5, r2
 801046e:	68a3      	ldr	r3, [r4, #8]
 8010470:	6922      	ldr	r2, [r4, #16]
 8010472:	bf0c      	ite	eq
 8010474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010478:	2500      	movne	r5, #0
 801047a:	4293      	cmp	r3, r2
 801047c:	bfc4      	itt	gt
 801047e:	1a9b      	subgt	r3, r3, r2
 8010480:	18ed      	addgt	r5, r5, r3
 8010482:	2600      	movs	r6, #0
 8010484:	341a      	adds	r4, #26
 8010486:	42b5      	cmp	r5, r6
 8010488:	d11a      	bne.n	80104c0 <_printf_common+0xc8>
 801048a:	2000      	movs	r0, #0
 801048c:	e008      	b.n	80104a0 <_printf_common+0xa8>
 801048e:	2301      	movs	r3, #1
 8010490:	4652      	mov	r2, sl
 8010492:	4649      	mov	r1, r9
 8010494:	4638      	mov	r0, r7
 8010496:	47c0      	blx	r8
 8010498:	3001      	adds	r0, #1
 801049a:	d103      	bne.n	80104a4 <_printf_common+0xac>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a4:	3501      	adds	r5, #1
 80104a6:	e7c6      	b.n	8010436 <_printf_common+0x3e>
 80104a8:	18e1      	adds	r1, r4, r3
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	2030      	movs	r0, #48	; 0x30
 80104ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80104b2:	4422      	add	r2, r4
 80104b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80104b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104bc:	3302      	adds	r3, #2
 80104be:	e7c7      	b.n	8010450 <_printf_common+0x58>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4622      	mov	r2, r4
 80104c4:	4649      	mov	r1, r9
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c0      	blx	r8
 80104ca:	3001      	adds	r0, #1
 80104cc:	d0e6      	beq.n	801049c <_printf_common+0xa4>
 80104ce:	3601      	adds	r6, #1
 80104d0:	e7d9      	b.n	8010486 <_printf_common+0x8e>
	...

080104d4 <_printf_i>:
 80104d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	7e0f      	ldrb	r7, [r1, #24]
 80104da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80104dc:	2f78      	cmp	r7, #120	; 0x78
 80104de:	4691      	mov	r9, r2
 80104e0:	4680      	mov	r8, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	469a      	mov	sl, r3
 80104e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80104ea:	d807      	bhi.n	80104fc <_printf_i+0x28>
 80104ec:	2f62      	cmp	r7, #98	; 0x62
 80104ee:	d80a      	bhi.n	8010506 <_printf_i+0x32>
 80104f0:	2f00      	cmp	r7, #0
 80104f2:	f000 80d8 	beq.w	80106a6 <_printf_i+0x1d2>
 80104f6:	2f58      	cmp	r7, #88	; 0x58
 80104f8:	f000 80a3 	beq.w	8010642 <_printf_i+0x16e>
 80104fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010504:	e03a      	b.n	801057c <_printf_i+0xa8>
 8010506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801050a:	2b15      	cmp	r3, #21
 801050c:	d8f6      	bhi.n	80104fc <_printf_i+0x28>
 801050e:	a101      	add	r1, pc, #4	; (adr r1, 8010514 <_printf_i+0x40>)
 8010510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010514:	0801056d 	.word	0x0801056d
 8010518:	08010581 	.word	0x08010581
 801051c:	080104fd 	.word	0x080104fd
 8010520:	080104fd 	.word	0x080104fd
 8010524:	080104fd 	.word	0x080104fd
 8010528:	080104fd 	.word	0x080104fd
 801052c:	08010581 	.word	0x08010581
 8010530:	080104fd 	.word	0x080104fd
 8010534:	080104fd 	.word	0x080104fd
 8010538:	080104fd 	.word	0x080104fd
 801053c:	080104fd 	.word	0x080104fd
 8010540:	0801068d 	.word	0x0801068d
 8010544:	080105b1 	.word	0x080105b1
 8010548:	0801066f 	.word	0x0801066f
 801054c:	080104fd 	.word	0x080104fd
 8010550:	080104fd 	.word	0x080104fd
 8010554:	080106af 	.word	0x080106af
 8010558:	080104fd 	.word	0x080104fd
 801055c:	080105b1 	.word	0x080105b1
 8010560:	080104fd 	.word	0x080104fd
 8010564:	080104fd 	.word	0x080104fd
 8010568:	08010677 	.word	0x08010677
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	1d1a      	adds	r2, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	602a      	str	r2, [r5, #0]
 8010574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801057c:	2301      	movs	r3, #1
 801057e:	e0a3      	b.n	80106c8 <_printf_i+0x1f4>
 8010580:	6820      	ldr	r0, [r4, #0]
 8010582:	6829      	ldr	r1, [r5, #0]
 8010584:	0606      	lsls	r6, r0, #24
 8010586:	f101 0304 	add.w	r3, r1, #4
 801058a:	d50a      	bpl.n	80105a2 <_printf_i+0xce>
 801058c:	680e      	ldr	r6, [r1, #0]
 801058e:	602b      	str	r3, [r5, #0]
 8010590:	2e00      	cmp	r6, #0
 8010592:	da03      	bge.n	801059c <_printf_i+0xc8>
 8010594:	232d      	movs	r3, #45	; 0x2d
 8010596:	4276      	negs	r6, r6
 8010598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059c:	485e      	ldr	r0, [pc, #376]	; (8010718 <_printf_i+0x244>)
 801059e:	230a      	movs	r3, #10
 80105a0:	e019      	b.n	80105d6 <_printf_i+0x102>
 80105a2:	680e      	ldr	r6, [r1, #0]
 80105a4:	602b      	str	r3, [r5, #0]
 80105a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80105aa:	bf18      	it	ne
 80105ac:	b236      	sxthne	r6, r6
 80105ae:	e7ef      	b.n	8010590 <_printf_i+0xbc>
 80105b0:	682b      	ldr	r3, [r5, #0]
 80105b2:	6820      	ldr	r0, [r4, #0]
 80105b4:	1d19      	adds	r1, r3, #4
 80105b6:	6029      	str	r1, [r5, #0]
 80105b8:	0601      	lsls	r1, r0, #24
 80105ba:	d501      	bpl.n	80105c0 <_printf_i+0xec>
 80105bc:	681e      	ldr	r6, [r3, #0]
 80105be:	e002      	b.n	80105c6 <_printf_i+0xf2>
 80105c0:	0646      	lsls	r6, r0, #25
 80105c2:	d5fb      	bpl.n	80105bc <_printf_i+0xe8>
 80105c4:	881e      	ldrh	r6, [r3, #0]
 80105c6:	4854      	ldr	r0, [pc, #336]	; (8010718 <_printf_i+0x244>)
 80105c8:	2f6f      	cmp	r7, #111	; 0x6f
 80105ca:	bf0c      	ite	eq
 80105cc:	2308      	moveq	r3, #8
 80105ce:	230a      	movne	r3, #10
 80105d0:	2100      	movs	r1, #0
 80105d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105d6:	6865      	ldr	r5, [r4, #4]
 80105d8:	60a5      	str	r5, [r4, #8]
 80105da:	2d00      	cmp	r5, #0
 80105dc:	bfa2      	ittt	ge
 80105de:	6821      	ldrge	r1, [r4, #0]
 80105e0:	f021 0104 	bicge.w	r1, r1, #4
 80105e4:	6021      	strge	r1, [r4, #0]
 80105e6:	b90e      	cbnz	r6, 80105ec <_printf_i+0x118>
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	d04d      	beq.n	8010688 <_printf_i+0x1b4>
 80105ec:	4615      	mov	r5, r2
 80105ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80105f2:	fb03 6711 	mls	r7, r3, r1, r6
 80105f6:	5dc7      	ldrb	r7, [r0, r7]
 80105f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80105fc:	4637      	mov	r7, r6
 80105fe:	42bb      	cmp	r3, r7
 8010600:	460e      	mov	r6, r1
 8010602:	d9f4      	bls.n	80105ee <_printf_i+0x11a>
 8010604:	2b08      	cmp	r3, #8
 8010606:	d10b      	bne.n	8010620 <_printf_i+0x14c>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	07de      	lsls	r6, r3, #31
 801060c:	d508      	bpl.n	8010620 <_printf_i+0x14c>
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6861      	ldr	r1, [r4, #4]
 8010612:	4299      	cmp	r1, r3
 8010614:	bfde      	ittt	le
 8010616:	2330      	movle	r3, #48	; 0x30
 8010618:	f805 3c01 	strble.w	r3, [r5, #-1]
 801061c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010620:	1b52      	subs	r2, r2, r5
 8010622:	6122      	str	r2, [r4, #16]
 8010624:	f8cd a000 	str.w	sl, [sp]
 8010628:	464b      	mov	r3, r9
 801062a:	aa03      	add	r2, sp, #12
 801062c:	4621      	mov	r1, r4
 801062e:	4640      	mov	r0, r8
 8010630:	f7ff fee2 	bl	80103f8 <_printf_common>
 8010634:	3001      	adds	r0, #1
 8010636:	d14c      	bne.n	80106d2 <_printf_i+0x1fe>
 8010638:	f04f 30ff 	mov.w	r0, #4294967295
 801063c:	b004      	add	sp, #16
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	4835      	ldr	r0, [pc, #212]	; (8010718 <_printf_i+0x244>)
 8010644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010648:	6829      	ldr	r1, [r5, #0]
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010650:	6029      	str	r1, [r5, #0]
 8010652:	061d      	lsls	r5, r3, #24
 8010654:	d514      	bpl.n	8010680 <_printf_i+0x1ac>
 8010656:	07df      	lsls	r7, r3, #31
 8010658:	bf44      	itt	mi
 801065a:	f043 0320 	orrmi.w	r3, r3, #32
 801065e:	6023      	strmi	r3, [r4, #0]
 8010660:	b91e      	cbnz	r6, 801066a <_printf_i+0x196>
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	f023 0320 	bic.w	r3, r3, #32
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	2310      	movs	r3, #16
 801066c:	e7b0      	b.n	80105d0 <_printf_i+0xfc>
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	f043 0320 	orr.w	r3, r3, #32
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	2378      	movs	r3, #120	; 0x78
 8010678:	4828      	ldr	r0, [pc, #160]	; (801071c <_printf_i+0x248>)
 801067a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801067e:	e7e3      	b.n	8010648 <_printf_i+0x174>
 8010680:	0659      	lsls	r1, r3, #25
 8010682:	bf48      	it	mi
 8010684:	b2b6      	uxthmi	r6, r6
 8010686:	e7e6      	b.n	8010656 <_printf_i+0x182>
 8010688:	4615      	mov	r5, r2
 801068a:	e7bb      	b.n	8010604 <_printf_i+0x130>
 801068c:	682b      	ldr	r3, [r5, #0]
 801068e:	6826      	ldr	r6, [r4, #0]
 8010690:	6961      	ldr	r1, [r4, #20]
 8010692:	1d18      	adds	r0, r3, #4
 8010694:	6028      	str	r0, [r5, #0]
 8010696:	0635      	lsls	r5, r6, #24
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	d501      	bpl.n	80106a0 <_printf_i+0x1cc>
 801069c:	6019      	str	r1, [r3, #0]
 801069e:	e002      	b.n	80106a6 <_printf_i+0x1d2>
 80106a0:	0670      	lsls	r0, r6, #25
 80106a2:	d5fb      	bpl.n	801069c <_printf_i+0x1c8>
 80106a4:	8019      	strh	r1, [r3, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	6123      	str	r3, [r4, #16]
 80106aa:	4615      	mov	r5, r2
 80106ac:	e7ba      	b.n	8010624 <_printf_i+0x150>
 80106ae:	682b      	ldr	r3, [r5, #0]
 80106b0:	1d1a      	adds	r2, r3, #4
 80106b2:	602a      	str	r2, [r5, #0]
 80106b4:	681d      	ldr	r5, [r3, #0]
 80106b6:	6862      	ldr	r2, [r4, #4]
 80106b8:	2100      	movs	r1, #0
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7ef fda0 	bl	8000200 <memchr>
 80106c0:	b108      	cbz	r0, 80106c6 <_printf_i+0x1f2>
 80106c2:	1b40      	subs	r0, r0, r5
 80106c4:	6060      	str	r0, [r4, #4]
 80106c6:	6863      	ldr	r3, [r4, #4]
 80106c8:	6123      	str	r3, [r4, #16]
 80106ca:	2300      	movs	r3, #0
 80106cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106d0:	e7a8      	b.n	8010624 <_printf_i+0x150>
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	462a      	mov	r2, r5
 80106d6:	4649      	mov	r1, r9
 80106d8:	4640      	mov	r0, r8
 80106da:	47d0      	blx	sl
 80106dc:	3001      	adds	r0, #1
 80106de:	d0ab      	beq.n	8010638 <_printf_i+0x164>
 80106e0:	6823      	ldr	r3, [r4, #0]
 80106e2:	079b      	lsls	r3, r3, #30
 80106e4:	d413      	bmi.n	801070e <_printf_i+0x23a>
 80106e6:	68e0      	ldr	r0, [r4, #12]
 80106e8:	9b03      	ldr	r3, [sp, #12]
 80106ea:	4298      	cmp	r0, r3
 80106ec:	bfb8      	it	lt
 80106ee:	4618      	movlt	r0, r3
 80106f0:	e7a4      	b.n	801063c <_printf_i+0x168>
 80106f2:	2301      	movs	r3, #1
 80106f4:	4632      	mov	r2, r6
 80106f6:	4649      	mov	r1, r9
 80106f8:	4640      	mov	r0, r8
 80106fa:	47d0      	blx	sl
 80106fc:	3001      	adds	r0, #1
 80106fe:	d09b      	beq.n	8010638 <_printf_i+0x164>
 8010700:	3501      	adds	r5, #1
 8010702:	68e3      	ldr	r3, [r4, #12]
 8010704:	9903      	ldr	r1, [sp, #12]
 8010706:	1a5b      	subs	r3, r3, r1
 8010708:	42ab      	cmp	r3, r5
 801070a:	dcf2      	bgt.n	80106f2 <_printf_i+0x21e>
 801070c:	e7eb      	b.n	80106e6 <_printf_i+0x212>
 801070e:	2500      	movs	r5, #0
 8010710:	f104 0619 	add.w	r6, r4, #25
 8010714:	e7f5      	b.n	8010702 <_printf_i+0x22e>
 8010716:	bf00      	nop
 8010718:	0802e5b3 	.word	0x0802e5b3
 801071c:	0802e5c4 	.word	0x0802e5c4

08010720 <_sbrk_r>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4d06      	ldr	r5, [pc, #24]	; (801073c <_sbrk_r+0x1c>)
 8010724:	2300      	movs	r3, #0
 8010726:	4604      	mov	r4, r0
 8010728:	4608      	mov	r0, r1
 801072a:	602b      	str	r3, [r5, #0]
 801072c:	f7f4 faae 	bl	8004c8c <_sbrk>
 8010730:	1c43      	adds	r3, r0, #1
 8010732:	d102      	bne.n	801073a <_sbrk_r+0x1a>
 8010734:	682b      	ldr	r3, [r5, #0]
 8010736:	b103      	cbz	r3, 801073a <_sbrk_r+0x1a>
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	bd38      	pop	{r3, r4, r5, pc}
 801073c:	20005c88 	.word	0x20005c88

08010740 <siprintf>:
 8010740:	b40e      	push	{r1, r2, r3}
 8010742:	b500      	push	{lr}
 8010744:	b09c      	sub	sp, #112	; 0x70
 8010746:	ab1d      	add	r3, sp, #116	; 0x74
 8010748:	9002      	str	r0, [sp, #8]
 801074a:	9006      	str	r0, [sp, #24]
 801074c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010750:	4809      	ldr	r0, [pc, #36]	; (8010778 <siprintf+0x38>)
 8010752:	9107      	str	r1, [sp, #28]
 8010754:	9104      	str	r1, [sp, #16]
 8010756:	4909      	ldr	r1, [pc, #36]	; (801077c <siprintf+0x3c>)
 8010758:	f853 2b04 	ldr.w	r2, [r3], #4
 801075c:	9105      	str	r1, [sp, #20]
 801075e:	6800      	ldr	r0, [r0, #0]
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	a902      	add	r1, sp, #8
 8010764:	f001 fe5a 	bl	801241c <_svfiprintf_r>
 8010768:	9b02      	ldr	r3, [sp, #8]
 801076a:	2200      	movs	r2, #0
 801076c:	701a      	strb	r2, [r3, #0]
 801076e:	b01c      	add	sp, #112	; 0x70
 8010770:	f85d eb04 	ldr.w	lr, [sp], #4
 8010774:	b003      	add	sp, #12
 8010776:	4770      	bx	lr
 8010778:	200000f8 	.word	0x200000f8
 801077c:	ffff0208 	.word	0xffff0208

08010780 <__sread>:
 8010780:	b510      	push	{r4, lr}
 8010782:	460c      	mov	r4, r1
 8010784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010788:	f001 ff48 	bl	801261c <_read_r>
 801078c:	2800      	cmp	r0, #0
 801078e:	bfab      	itete	ge
 8010790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010792:	89a3      	ldrhlt	r3, [r4, #12]
 8010794:	181b      	addge	r3, r3, r0
 8010796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801079a:	bfac      	ite	ge
 801079c:	6563      	strge	r3, [r4, #84]	; 0x54
 801079e:	81a3      	strhlt	r3, [r4, #12]
 80107a0:	bd10      	pop	{r4, pc}

080107a2 <__swrite>:
 80107a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a6:	461f      	mov	r7, r3
 80107a8:	898b      	ldrh	r3, [r1, #12]
 80107aa:	05db      	lsls	r3, r3, #23
 80107ac:	4605      	mov	r5, r0
 80107ae:	460c      	mov	r4, r1
 80107b0:	4616      	mov	r6, r2
 80107b2:	d505      	bpl.n	80107c0 <__swrite+0x1e>
 80107b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b8:	2302      	movs	r3, #2
 80107ba:	2200      	movs	r2, #0
 80107bc:	f001 f95a 	bl	8011a74 <_lseek_r>
 80107c0:	89a3      	ldrh	r3, [r4, #12]
 80107c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107ca:	81a3      	strh	r3, [r4, #12]
 80107cc:	4632      	mov	r2, r6
 80107ce:	463b      	mov	r3, r7
 80107d0:	4628      	mov	r0, r5
 80107d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107d6:	f000 b87b 	b.w	80108d0 <_write_r>

080107da <__sseek>:
 80107da:	b510      	push	{r4, lr}
 80107dc:	460c      	mov	r4, r1
 80107de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107e2:	f001 f947 	bl	8011a74 <_lseek_r>
 80107e6:	1c43      	adds	r3, r0, #1
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	bf15      	itete	ne
 80107ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80107ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107f6:	81a3      	strheq	r3, [r4, #12]
 80107f8:	bf18      	it	ne
 80107fa:	81a3      	strhne	r3, [r4, #12]
 80107fc:	bd10      	pop	{r4, pc}

080107fe <__sclose>:
 80107fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010802:	f000 b8ed 	b.w	80109e0 <_close_r>

08010806 <strncpy>:
 8010806:	b510      	push	{r4, lr}
 8010808:	3901      	subs	r1, #1
 801080a:	4603      	mov	r3, r0
 801080c:	b132      	cbz	r2, 801081c <strncpy+0x16>
 801080e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010812:	f803 4b01 	strb.w	r4, [r3], #1
 8010816:	3a01      	subs	r2, #1
 8010818:	2c00      	cmp	r4, #0
 801081a:	d1f7      	bne.n	801080c <strncpy+0x6>
 801081c:	441a      	add	r2, r3
 801081e:	2100      	movs	r1, #0
 8010820:	4293      	cmp	r3, r2
 8010822:	d100      	bne.n	8010826 <strncpy+0x20>
 8010824:	bd10      	pop	{r4, pc}
 8010826:	f803 1b01 	strb.w	r1, [r3], #1
 801082a:	e7f9      	b.n	8010820 <strncpy+0x1a>

0801082c <__swbuf_r>:
 801082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801082e:	460e      	mov	r6, r1
 8010830:	4614      	mov	r4, r2
 8010832:	4605      	mov	r5, r0
 8010834:	b118      	cbz	r0, 801083e <__swbuf_r+0x12>
 8010836:	6983      	ldr	r3, [r0, #24]
 8010838:	b90b      	cbnz	r3, 801083e <__swbuf_r+0x12>
 801083a:	f001 f875 	bl	8011928 <__sinit>
 801083e:	4b21      	ldr	r3, [pc, #132]	; (80108c4 <__swbuf_r+0x98>)
 8010840:	429c      	cmp	r4, r3
 8010842:	d12b      	bne.n	801089c <__swbuf_r+0x70>
 8010844:	686c      	ldr	r4, [r5, #4]
 8010846:	69a3      	ldr	r3, [r4, #24]
 8010848:	60a3      	str	r3, [r4, #8]
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	071a      	lsls	r2, r3, #28
 801084e:	d52f      	bpl.n	80108b0 <__swbuf_r+0x84>
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	b36b      	cbz	r3, 80108b0 <__swbuf_r+0x84>
 8010854:	6923      	ldr	r3, [r4, #16]
 8010856:	6820      	ldr	r0, [r4, #0]
 8010858:	1ac0      	subs	r0, r0, r3
 801085a:	6963      	ldr	r3, [r4, #20]
 801085c:	b2f6      	uxtb	r6, r6
 801085e:	4283      	cmp	r3, r0
 8010860:	4637      	mov	r7, r6
 8010862:	dc04      	bgt.n	801086e <__swbuf_r+0x42>
 8010864:	4621      	mov	r1, r4
 8010866:	4628      	mov	r0, r5
 8010868:	f000 ffca 	bl	8011800 <_fflush_r>
 801086c:	bb30      	cbnz	r0, 80108bc <__swbuf_r+0x90>
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	3b01      	subs	r3, #1
 8010872:	60a3      	str	r3, [r4, #8]
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	1c5a      	adds	r2, r3, #1
 8010878:	6022      	str	r2, [r4, #0]
 801087a:	701e      	strb	r6, [r3, #0]
 801087c:	6963      	ldr	r3, [r4, #20]
 801087e:	3001      	adds	r0, #1
 8010880:	4283      	cmp	r3, r0
 8010882:	d004      	beq.n	801088e <__swbuf_r+0x62>
 8010884:	89a3      	ldrh	r3, [r4, #12]
 8010886:	07db      	lsls	r3, r3, #31
 8010888:	d506      	bpl.n	8010898 <__swbuf_r+0x6c>
 801088a:	2e0a      	cmp	r6, #10
 801088c:	d104      	bne.n	8010898 <__swbuf_r+0x6c>
 801088e:	4621      	mov	r1, r4
 8010890:	4628      	mov	r0, r5
 8010892:	f000 ffb5 	bl	8011800 <_fflush_r>
 8010896:	b988      	cbnz	r0, 80108bc <__swbuf_r+0x90>
 8010898:	4638      	mov	r0, r7
 801089a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801089c:	4b0a      	ldr	r3, [pc, #40]	; (80108c8 <__swbuf_r+0x9c>)
 801089e:	429c      	cmp	r4, r3
 80108a0:	d101      	bne.n	80108a6 <__swbuf_r+0x7a>
 80108a2:	68ac      	ldr	r4, [r5, #8]
 80108a4:	e7cf      	b.n	8010846 <__swbuf_r+0x1a>
 80108a6:	4b09      	ldr	r3, [pc, #36]	; (80108cc <__swbuf_r+0xa0>)
 80108a8:	429c      	cmp	r4, r3
 80108aa:	bf08      	it	eq
 80108ac:	68ec      	ldreq	r4, [r5, #12]
 80108ae:	e7ca      	b.n	8010846 <__swbuf_r+0x1a>
 80108b0:	4621      	mov	r1, r4
 80108b2:	4628      	mov	r0, r5
 80108b4:	f000 f81e 	bl	80108f4 <__swsetup_r>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d0cb      	beq.n	8010854 <__swbuf_r+0x28>
 80108bc:	f04f 37ff 	mov.w	r7, #4294967295
 80108c0:	e7ea      	b.n	8010898 <__swbuf_r+0x6c>
 80108c2:	bf00      	nop
 80108c4:	0802e788 	.word	0x0802e788
 80108c8:	0802e7a8 	.word	0x0802e7a8
 80108cc:	0802e768 	.word	0x0802e768

080108d0 <_write_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4d07      	ldr	r5, [pc, #28]	; (80108f0 <_write_r+0x20>)
 80108d4:	4604      	mov	r4, r0
 80108d6:	4608      	mov	r0, r1
 80108d8:	4611      	mov	r1, r2
 80108da:	2200      	movs	r2, #0
 80108dc:	602a      	str	r2, [r5, #0]
 80108de:	461a      	mov	r2, r3
 80108e0:	f7f4 f983 	bl	8004bea <_write>
 80108e4:	1c43      	adds	r3, r0, #1
 80108e6:	d102      	bne.n	80108ee <_write_r+0x1e>
 80108e8:	682b      	ldr	r3, [r5, #0]
 80108ea:	b103      	cbz	r3, 80108ee <_write_r+0x1e>
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	bd38      	pop	{r3, r4, r5, pc}
 80108f0:	20005c88 	.word	0x20005c88

080108f4 <__swsetup_r>:
 80108f4:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <__swsetup_r+0xcc>)
 80108f6:	b570      	push	{r4, r5, r6, lr}
 80108f8:	681d      	ldr	r5, [r3, #0]
 80108fa:	4606      	mov	r6, r0
 80108fc:	460c      	mov	r4, r1
 80108fe:	b125      	cbz	r5, 801090a <__swsetup_r+0x16>
 8010900:	69ab      	ldr	r3, [r5, #24]
 8010902:	b913      	cbnz	r3, 801090a <__swsetup_r+0x16>
 8010904:	4628      	mov	r0, r5
 8010906:	f001 f80f 	bl	8011928 <__sinit>
 801090a:	4b2e      	ldr	r3, [pc, #184]	; (80109c4 <__swsetup_r+0xd0>)
 801090c:	429c      	cmp	r4, r3
 801090e:	d10f      	bne.n	8010930 <__swsetup_r+0x3c>
 8010910:	686c      	ldr	r4, [r5, #4]
 8010912:	89a3      	ldrh	r3, [r4, #12]
 8010914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010918:	0719      	lsls	r1, r3, #28
 801091a:	d42c      	bmi.n	8010976 <__swsetup_r+0x82>
 801091c:	06dd      	lsls	r5, r3, #27
 801091e:	d411      	bmi.n	8010944 <__swsetup_r+0x50>
 8010920:	2309      	movs	r3, #9
 8010922:	6033      	str	r3, [r6, #0]
 8010924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010928:	81a3      	strh	r3, [r4, #12]
 801092a:	f04f 30ff 	mov.w	r0, #4294967295
 801092e:	e03e      	b.n	80109ae <__swsetup_r+0xba>
 8010930:	4b25      	ldr	r3, [pc, #148]	; (80109c8 <__swsetup_r+0xd4>)
 8010932:	429c      	cmp	r4, r3
 8010934:	d101      	bne.n	801093a <__swsetup_r+0x46>
 8010936:	68ac      	ldr	r4, [r5, #8]
 8010938:	e7eb      	b.n	8010912 <__swsetup_r+0x1e>
 801093a:	4b24      	ldr	r3, [pc, #144]	; (80109cc <__swsetup_r+0xd8>)
 801093c:	429c      	cmp	r4, r3
 801093e:	bf08      	it	eq
 8010940:	68ec      	ldreq	r4, [r5, #12]
 8010942:	e7e6      	b.n	8010912 <__swsetup_r+0x1e>
 8010944:	0758      	lsls	r0, r3, #29
 8010946:	d512      	bpl.n	801096e <__swsetup_r+0x7a>
 8010948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801094a:	b141      	cbz	r1, 801095e <__swsetup_r+0x6a>
 801094c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010950:	4299      	cmp	r1, r3
 8010952:	d002      	beq.n	801095a <__swsetup_r+0x66>
 8010954:	4630      	mov	r0, r6
 8010956:	f7ff f83f 	bl	800f9d8 <_free_r>
 801095a:	2300      	movs	r3, #0
 801095c:	6363      	str	r3, [r4, #52]	; 0x34
 801095e:	89a3      	ldrh	r3, [r4, #12]
 8010960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	2300      	movs	r3, #0
 8010968:	6063      	str	r3, [r4, #4]
 801096a:	6923      	ldr	r3, [r4, #16]
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f043 0308 	orr.w	r3, r3, #8
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	6923      	ldr	r3, [r4, #16]
 8010978:	b94b      	cbnz	r3, 801098e <__swsetup_r+0x9a>
 801097a:	89a3      	ldrh	r3, [r4, #12]
 801097c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010984:	d003      	beq.n	801098e <__swsetup_r+0x9a>
 8010986:	4621      	mov	r1, r4
 8010988:	4630      	mov	r0, r6
 801098a:	f001 f8ab 	bl	8011ae4 <__smakebuf_r>
 801098e:	89a0      	ldrh	r0, [r4, #12]
 8010990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010994:	f010 0301 	ands.w	r3, r0, #1
 8010998:	d00a      	beq.n	80109b0 <__swsetup_r+0xbc>
 801099a:	2300      	movs	r3, #0
 801099c:	60a3      	str	r3, [r4, #8]
 801099e:	6963      	ldr	r3, [r4, #20]
 80109a0:	425b      	negs	r3, r3
 80109a2:	61a3      	str	r3, [r4, #24]
 80109a4:	6923      	ldr	r3, [r4, #16]
 80109a6:	b943      	cbnz	r3, 80109ba <__swsetup_r+0xc6>
 80109a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109ac:	d1ba      	bne.n	8010924 <__swsetup_r+0x30>
 80109ae:	bd70      	pop	{r4, r5, r6, pc}
 80109b0:	0781      	lsls	r1, r0, #30
 80109b2:	bf58      	it	pl
 80109b4:	6963      	ldrpl	r3, [r4, #20]
 80109b6:	60a3      	str	r3, [r4, #8]
 80109b8:	e7f4      	b.n	80109a4 <__swsetup_r+0xb0>
 80109ba:	2000      	movs	r0, #0
 80109bc:	e7f7      	b.n	80109ae <__swsetup_r+0xba>
 80109be:	bf00      	nop
 80109c0:	200000f8 	.word	0x200000f8
 80109c4:	0802e788 	.word	0x0802e788
 80109c8:	0802e7a8 	.word	0x0802e7a8
 80109cc:	0802e768 	.word	0x0802e768

080109d0 <abort>:
 80109d0:	b508      	push	{r3, lr}
 80109d2:	2006      	movs	r0, #6
 80109d4:	f001 fe5c 	bl	8012690 <raise>
 80109d8:	2001      	movs	r0, #1
 80109da:	f7f4 f8df 	bl	8004b9c <_exit>
	...

080109e0 <_close_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4d06      	ldr	r5, [pc, #24]	; (80109fc <_close_r+0x1c>)
 80109e4:	2300      	movs	r3, #0
 80109e6:	4604      	mov	r4, r0
 80109e8:	4608      	mov	r0, r1
 80109ea:	602b      	str	r3, [r5, #0]
 80109ec:	f7f4 f919 	bl	8004c22 <_close>
 80109f0:	1c43      	adds	r3, r0, #1
 80109f2:	d102      	bne.n	80109fa <_close_r+0x1a>
 80109f4:	682b      	ldr	r3, [r5, #0]
 80109f6:	b103      	cbz	r3, 80109fa <_close_r+0x1a>
 80109f8:	6023      	str	r3, [r4, #0]
 80109fa:	bd38      	pop	{r3, r4, r5, pc}
 80109fc:	20005c88 	.word	0x20005c88

08010a00 <quorem>:
 8010a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	6903      	ldr	r3, [r0, #16]
 8010a06:	690c      	ldr	r4, [r1, #16]
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	4607      	mov	r7, r0
 8010a0c:	f2c0 8081 	blt.w	8010b12 <quorem+0x112>
 8010a10:	3c01      	subs	r4, #1
 8010a12:	f101 0814 	add.w	r8, r1, #20
 8010a16:	f100 0514 	add.w	r5, r0, #20
 8010a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010a30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a34:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a38:	d331      	bcc.n	8010a9e <quorem+0x9e>
 8010a3a:	f04f 0e00 	mov.w	lr, #0
 8010a3e:	4640      	mov	r0, r8
 8010a40:	46ac      	mov	ip, r5
 8010a42:	46f2      	mov	sl, lr
 8010a44:	f850 2b04 	ldr.w	r2, [r0], #4
 8010a48:	b293      	uxth	r3, r2
 8010a4a:	fb06 e303 	mla	r3, r6, r3, lr
 8010a4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	ebaa 0303 	sub.w	r3, sl, r3
 8010a58:	f8dc a000 	ldr.w	sl, [ip]
 8010a5c:	0c12      	lsrs	r2, r2, #16
 8010a5e:	fa13 f38a 	uxtah	r3, r3, sl
 8010a62:	fb06 e202 	mla	r2, r6, r2, lr
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	9b00      	ldr	r3, [sp, #0]
 8010a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010a6e:	b292      	uxth	r2, r2
 8010a70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a78:	f8bd 3000 	ldrh.w	r3, [sp]
 8010a7c:	4581      	cmp	r9, r0
 8010a7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a82:	f84c 3b04 	str.w	r3, [ip], #4
 8010a86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a8a:	d2db      	bcs.n	8010a44 <quorem+0x44>
 8010a8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a90:	b92b      	cbnz	r3, 8010a9e <quorem+0x9e>
 8010a92:	9b01      	ldr	r3, [sp, #4]
 8010a94:	3b04      	subs	r3, #4
 8010a96:	429d      	cmp	r5, r3
 8010a98:	461a      	mov	r2, r3
 8010a9a:	d32e      	bcc.n	8010afa <quorem+0xfa>
 8010a9c:	613c      	str	r4, [r7, #16]
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	f001 fb1a 	bl	80120d8 <__mcmp>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	db24      	blt.n	8010af2 <quorem+0xf2>
 8010aa8:	3601      	adds	r6, #1
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f04f 0c00 	mov.w	ip, #0
 8010ab0:	f858 2b04 	ldr.w	r2, [r8], #4
 8010ab4:	f8d0 e000 	ldr.w	lr, [r0]
 8010ab8:	b293      	uxth	r3, r2
 8010aba:	ebac 0303 	sub.w	r3, ip, r3
 8010abe:	0c12      	lsrs	r2, r2, #16
 8010ac0:	fa13 f38e 	uxtah	r3, r3, lr
 8010ac4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ad2:	45c1      	cmp	r9, r8
 8010ad4:	f840 3b04 	str.w	r3, [r0], #4
 8010ad8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010adc:	d2e8      	bcs.n	8010ab0 <quorem+0xb0>
 8010ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ae6:	b922      	cbnz	r2, 8010af2 <quorem+0xf2>
 8010ae8:	3b04      	subs	r3, #4
 8010aea:	429d      	cmp	r5, r3
 8010aec:	461a      	mov	r2, r3
 8010aee:	d30a      	bcc.n	8010b06 <quorem+0x106>
 8010af0:	613c      	str	r4, [r7, #16]
 8010af2:	4630      	mov	r0, r6
 8010af4:	b003      	add	sp, #12
 8010af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afa:	6812      	ldr	r2, [r2, #0]
 8010afc:	3b04      	subs	r3, #4
 8010afe:	2a00      	cmp	r2, #0
 8010b00:	d1cc      	bne.n	8010a9c <quorem+0x9c>
 8010b02:	3c01      	subs	r4, #1
 8010b04:	e7c7      	b.n	8010a96 <quorem+0x96>
 8010b06:	6812      	ldr	r2, [r2, #0]
 8010b08:	3b04      	subs	r3, #4
 8010b0a:	2a00      	cmp	r2, #0
 8010b0c:	d1f0      	bne.n	8010af0 <quorem+0xf0>
 8010b0e:	3c01      	subs	r4, #1
 8010b10:	e7eb      	b.n	8010aea <quorem+0xea>
 8010b12:	2000      	movs	r0, #0
 8010b14:	e7ee      	b.n	8010af4 <quorem+0xf4>
	...

08010b18 <_dtoa_r>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	ed2d 8b04 	vpush	{d8-d9}
 8010b20:	ec57 6b10 	vmov	r6, r7, d0
 8010b24:	b093      	sub	sp, #76	; 0x4c
 8010b26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010b28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010b2c:	9106      	str	r1, [sp, #24]
 8010b2e:	ee10 aa10 	vmov	sl, s0
 8010b32:	4604      	mov	r4, r0
 8010b34:	9209      	str	r2, [sp, #36]	; 0x24
 8010b36:	930c      	str	r3, [sp, #48]	; 0x30
 8010b38:	46bb      	mov	fp, r7
 8010b3a:	b975      	cbnz	r5, 8010b5a <_dtoa_r+0x42>
 8010b3c:	2010      	movs	r0, #16
 8010b3e:	f7fe ff25 	bl	800f98c <malloc>
 8010b42:	4602      	mov	r2, r0
 8010b44:	6260      	str	r0, [r4, #36]	; 0x24
 8010b46:	b920      	cbnz	r0, 8010b52 <_dtoa_r+0x3a>
 8010b48:	4ba7      	ldr	r3, [pc, #668]	; (8010de8 <_dtoa_r+0x2d0>)
 8010b4a:	21ea      	movs	r1, #234	; 0xea
 8010b4c:	48a7      	ldr	r0, [pc, #668]	; (8010dec <_dtoa_r+0x2d4>)
 8010b4e:	f7fe fec3 	bl	800f8d8 <__assert_func>
 8010b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010b56:	6005      	str	r5, [r0, #0]
 8010b58:	60c5      	str	r5, [r0, #12]
 8010b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b5c:	6819      	ldr	r1, [r3, #0]
 8010b5e:	b151      	cbz	r1, 8010b76 <_dtoa_r+0x5e>
 8010b60:	685a      	ldr	r2, [r3, #4]
 8010b62:	604a      	str	r2, [r1, #4]
 8010b64:	2301      	movs	r3, #1
 8010b66:	4093      	lsls	r3, r2
 8010b68:	608b      	str	r3, [r1, #8]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f001 f872 	bl	8011c54 <_Bfree>
 8010b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b72:	2200      	movs	r2, #0
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	1e3b      	subs	r3, r7, #0
 8010b78:	bfaa      	itet	ge
 8010b7a:	2300      	movge	r3, #0
 8010b7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010b80:	f8c8 3000 	strge.w	r3, [r8]
 8010b84:	4b9a      	ldr	r3, [pc, #616]	; (8010df0 <_dtoa_r+0x2d8>)
 8010b86:	bfbc      	itt	lt
 8010b88:	2201      	movlt	r2, #1
 8010b8a:	f8c8 2000 	strlt.w	r2, [r8]
 8010b8e:	ea33 030b 	bics.w	r3, r3, fp
 8010b92:	d11b      	bne.n	8010bcc <_dtoa_r+0xb4>
 8010b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b96:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b9a:	6013      	str	r3, [r2, #0]
 8010b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ba0:	4333      	orrs	r3, r6
 8010ba2:	f000 8592 	beq.w	80116ca <_dtoa_r+0xbb2>
 8010ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ba8:	b963      	cbnz	r3, 8010bc4 <_dtoa_r+0xac>
 8010baa:	4b92      	ldr	r3, [pc, #584]	; (8010df4 <_dtoa_r+0x2dc>)
 8010bac:	e022      	b.n	8010bf4 <_dtoa_r+0xdc>
 8010bae:	4b92      	ldr	r3, [pc, #584]	; (8010df8 <_dtoa_r+0x2e0>)
 8010bb0:	9301      	str	r3, [sp, #4]
 8010bb2:	3308      	adds	r3, #8
 8010bb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010bb6:	6013      	str	r3, [r2, #0]
 8010bb8:	9801      	ldr	r0, [sp, #4]
 8010bba:	b013      	add	sp, #76	; 0x4c
 8010bbc:	ecbd 8b04 	vpop	{d8-d9}
 8010bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc4:	4b8b      	ldr	r3, [pc, #556]	; (8010df4 <_dtoa_r+0x2dc>)
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	3303      	adds	r3, #3
 8010bca:	e7f3      	b.n	8010bb4 <_dtoa_r+0x9c>
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2300      	movs	r3, #0
 8010bd0:	4650      	mov	r0, sl
 8010bd2:	4659      	mov	r1, fp
 8010bd4:	f7ef ff88 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bd8:	ec4b ab19 	vmov	d9, sl, fp
 8010bdc:	4680      	mov	r8, r0
 8010bde:	b158      	cbz	r0, 8010bf8 <_dtoa_r+0xe0>
 8010be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010be2:	2301      	movs	r3, #1
 8010be4:	6013      	str	r3, [r2, #0]
 8010be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 856b 	beq.w	80116c4 <_dtoa_r+0xbac>
 8010bee:	4883      	ldr	r0, [pc, #524]	; (8010dfc <_dtoa_r+0x2e4>)
 8010bf0:	6018      	str	r0, [r3, #0]
 8010bf2:	1e43      	subs	r3, r0, #1
 8010bf4:	9301      	str	r3, [sp, #4]
 8010bf6:	e7df      	b.n	8010bb8 <_dtoa_r+0xa0>
 8010bf8:	ec4b ab10 	vmov	d0, sl, fp
 8010bfc:	aa10      	add	r2, sp, #64	; 0x40
 8010bfe:	a911      	add	r1, sp, #68	; 0x44
 8010c00:	4620      	mov	r0, r4
 8010c02:	f001 fb0f 	bl	8012224 <__d2b>
 8010c06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010c0a:	ee08 0a10 	vmov	s16, r0
 8010c0e:	2d00      	cmp	r5, #0
 8010c10:	f000 8084 	beq.w	8010d1c <_dtoa_r+0x204>
 8010c14:	ee19 3a90 	vmov	r3, s19
 8010c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010c20:	4656      	mov	r6, sl
 8010c22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010c2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010c2e:	4b74      	ldr	r3, [pc, #464]	; (8010e00 <_dtoa_r+0x2e8>)
 8010c30:	2200      	movs	r2, #0
 8010c32:	4630      	mov	r0, r6
 8010c34:	4639      	mov	r1, r7
 8010c36:	f7ef fb37 	bl	80002a8 <__aeabi_dsub>
 8010c3a:	a365      	add	r3, pc, #404	; (adr r3, 8010dd0 <_dtoa_r+0x2b8>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	f7ef fcea 	bl	8000618 <__aeabi_dmul>
 8010c44:	a364      	add	r3, pc, #400	; (adr r3, 8010dd8 <_dtoa_r+0x2c0>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	f7ef fb2f 	bl	80002ac <__adddf3>
 8010c4e:	4606      	mov	r6, r0
 8010c50:	4628      	mov	r0, r5
 8010c52:	460f      	mov	r7, r1
 8010c54:	f7ef fc76 	bl	8000544 <__aeabi_i2d>
 8010c58:	a361      	add	r3, pc, #388	; (adr r3, 8010de0 <_dtoa_r+0x2c8>)
 8010c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5e:	f7ef fcdb 	bl	8000618 <__aeabi_dmul>
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	4630      	mov	r0, r6
 8010c68:	4639      	mov	r1, r7
 8010c6a:	f7ef fb1f 	bl	80002ac <__adddf3>
 8010c6e:	4606      	mov	r6, r0
 8010c70:	460f      	mov	r7, r1
 8010c72:	f7ef ff81 	bl	8000b78 <__aeabi_d2iz>
 8010c76:	2200      	movs	r2, #0
 8010c78:	9000      	str	r0, [sp, #0]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	4639      	mov	r1, r7
 8010c80:	f7ef ff3c 	bl	8000afc <__aeabi_dcmplt>
 8010c84:	b150      	cbz	r0, 8010c9c <_dtoa_r+0x184>
 8010c86:	9800      	ldr	r0, [sp, #0]
 8010c88:	f7ef fc5c 	bl	8000544 <__aeabi_i2d>
 8010c8c:	4632      	mov	r2, r6
 8010c8e:	463b      	mov	r3, r7
 8010c90:	f7ef ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c94:	b910      	cbnz	r0, 8010c9c <_dtoa_r+0x184>
 8010c96:	9b00      	ldr	r3, [sp, #0]
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	9b00      	ldr	r3, [sp, #0]
 8010c9e:	2b16      	cmp	r3, #22
 8010ca0:	d85a      	bhi.n	8010d58 <_dtoa_r+0x240>
 8010ca2:	9a00      	ldr	r2, [sp, #0]
 8010ca4:	4b57      	ldr	r3, [pc, #348]	; (8010e04 <_dtoa_r+0x2ec>)
 8010ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cae:	ec51 0b19 	vmov	r0, r1, d9
 8010cb2:	f7ef ff23 	bl	8000afc <__aeabi_dcmplt>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d050      	beq.n	8010d5c <_dtoa_r+0x244>
 8010cba:	9b00      	ldr	r3, [sp, #0]
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cc6:	1b5d      	subs	r5, r3, r5
 8010cc8:	1e6b      	subs	r3, r5, #1
 8010cca:	9305      	str	r3, [sp, #20]
 8010ccc:	bf45      	ittet	mi
 8010cce:	f1c5 0301 	rsbmi	r3, r5, #1
 8010cd2:	9304      	strmi	r3, [sp, #16]
 8010cd4:	2300      	movpl	r3, #0
 8010cd6:	2300      	movmi	r3, #0
 8010cd8:	bf4c      	ite	mi
 8010cda:	9305      	strmi	r3, [sp, #20]
 8010cdc:	9304      	strpl	r3, [sp, #16]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	db3d      	blt.n	8010d60 <_dtoa_r+0x248>
 8010ce4:	9b05      	ldr	r3, [sp, #20]
 8010ce6:	9a00      	ldr	r2, [sp, #0]
 8010ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8010cea:	4413      	add	r3, r2
 8010cec:	9305      	str	r3, [sp, #20]
 8010cee:	2300      	movs	r3, #0
 8010cf0:	9307      	str	r3, [sp, #28]
 8010cf2:	9b06      	ldr	r3, [sp, #24]
 8010cf4:	2b09      	cmp	r3, #9
 8010cf6:	f200 8089 	bhi.w	8010e0c <_dtoa_r+0x2f4>
 8010cfa:	2b05      	cmp	r3, #5
 8010cfc:	bfc4      	itt	gt
 8010cfe:	3b04      	subgt	r3, #4
 8010d00:	9306      	strgt	r3, [sp, #24]
 8010d02:	9b06      	ldr	r3, [sp, #24]
 8010d04:	f1a3 0302 	sub.w	r3, r3, #2
 8010d08:	bfcc      	ite	gt
 8010d0a:	2500      	movgt	r5, #0
 8010d0c:	2501      	movle	r5, #1
 8010d0e:	2b03      	cmp	r3, #3
 8010d10:	f200 8087 	bhi.w	8010e22 <_dtoa_r+0x30a>
 8010d14:	e8df f003 	tbb	[pc, r3]
 8010d18:	59383a2d 	.word	0x59383a2d
 8010d1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010d20:	441d      	add	r5, r3
 8010d22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010d26:	2b20      	cmp	r3, #32
 8010d28:	bfc1      	itttt	gt
 8010d2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010d2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010d32:	fa0b f303 	lslgt.w	r3, fp, r3
 8010d36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010d3a:	bfda      	itte	le
 8010d3c:	f1c3 0320 	rsble	r3, r3, #32
 8010d40:	fa06 f003 	lslle.w	r0, r6, r3
 8010d44:	4318      	orrgt	r0, r3
 8010d46:	f7ef fbed 	bl	8000524 <__aeabi_ui2d>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010d52:	3d01      	subs	r5, #1
 8010d54:	930e      	str	r3, [sp, #56]	; 0x38
 8010d56:	e76a      	b.n	8010c2e <_dtoa_r+0x116>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	e7b2      	b.n	8010cc2 <_dtoa_r+0x1aa>
 8010d5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d5e:	e7b1      	b.n	8010cc4 <_dtoa_r+0x1ac>
 8010d60:	9b04      	ldr	r3, [sp, #16]
 8010d62:	9a00      	ldr	r2, [sp, #0]
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	9304      	str	r3, [sp, #16]
 8010d68:	4253      	negs	r3, r2
 8010d6a:	9307      	str	r3, [sp, #28]
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d70:	e7bf      	b.n	8010cf2 <_dtoa_r+0x1da>
 8010d72:	2300      	movs	r3, #0
 8010d74:	9308      	str	r3, [sp, #32]
 8010d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	dc55      	bgt.n	8010e28 <_dtoa_r+0x310>
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d82:	461a      	mov	r2, r3
 8010d84:	9209      	str	r2, [sp, #36]	; 0x24
 8010d86:	e00c      	b.n	8010da2 <_dtoa_r+0x28a>
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e7f3      	b.n	8010d74 <_dtoa_r+0x25c>
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d90:	9308      	str	r3, [sp, #32]
 8010d92:	9b00      	ldr	r3, [sp, #0]
 8010d94:	4413      	add	r3, r2
 8010d96:	9302      	str	r3, [sp, #8]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	9303      	str	r3, [sp, #12]
 8010d9e:	bfb8      	it	lt
 8010da0:	2301      	movlt	r3, #1
 8010da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010da4:	2200      	movs	r2, #0
 8010da6:	6042      	str	r2, [r0, #4]
 8010da8:	2204      	movs	r2, #4
 8010daa:	f102 0614 	add.w	r6, r2, #20
 8010dae:	429e      	cmp	r6, r3
 8010db0:	6841      	ldr	r1, [r0, #4]
 8010db2:	d93d      	bls.n	8010e30 <_dtoa_r+0x318>
 8010db4:	4620      	mov	r0, r4
 8010db6:	f000 ff0d 	bl	8011bd4 <_Balloc>
 8010dba:	9001      	str	r0, [sp, #4]
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d13b      	bne.n	8010e38 <_dtoa_r+0x320>
 8010dc0:	4b11      	ldr	r3, [pc, #68]	; (8010e08 <_dtoa_r+0x2f0>)
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010dc8:	e6c0      	b.n	8010b4c <_dtoa_r+0x34>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	e7df      	b.n	8010d8e <_dtoa_r+0x276>
 8010dce:	bf00      	nop
 8010dd0:	636f4361 	.word	0x636f4361
 8010dd4:	3fd287a7 	.word	0x3fd287a7
 8010dd8:	8b60c8b3 	.word	0x8b60c8b3
 8010ddc:	3fc68a28 	.word	0x3fc68a28
 8010de0:	509f79fb 	.word	0x509f79fb
 8010de4:	3fd34413 	.word	0x3fd34413
 8010de8:	0802e6e3 	.word	0x0802e6e3
 8010dec:	0802e6fa 	.word	0x0802e6fa
 8010df0:	7ff00000 	.word	0x7ff00000
 8010df4:	0802e6df 	.word	0x0802e6df
 8010df8:	0802e6d6 	.word	0x0802e6d6
 8010dfc:	0802e5b2 	.word	0x0802e5b2
 8010e00:	3ff80000 	.word	0x3ff80000
 8010e04:	0802e858 	.word	0x0802e858
 8010e08:	0802e755 	.word	0x0802e755
 8010e0c:	2501      	movs	r5, #1
 8010e0e:	2300      	movs	r3, #0
 8010e10:	9306      	str	r3, [sp, #24]
 8010e12:	9508      	str	r5, [sp, #32]
 8010e14:	f04f 33ff 	mov.w	r3, #4294967295
 8010e18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	2312      	movs	r3, #18
 8010e20:	e7b0      	b.n	8010d84 <_dtoa_r+0x26c>
 8010e22:	2301      	movs	r3, #1
 8010e24:	9308      	str	r3, [sp, #32]
 8010e26:	e7f5      	b.n	8010e14 <_dtoa_r+0x2fc>
 8010e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010e2e:	e7b8      	b.n	8010da2 <_dtoa_r+0x28a>
 8010e30:	3101      	adds	r1, #1
 8010e32:	6041      	str	r1, [r0, #4]
 8010e34:	0052      	lsls	r2, r2, #1
 8010e36:	e7b8      	b.n	8010daa <_dtoa_r+0x292>
 8010e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e3a:	9a01      	ldr	r2, [sp, #4]
 8010e3c:	601a      	str	r2, [r3, #0]
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	2b0e      	cmp	r3, #14
 8010e42:	f200 809d 	bhi.w	8010f80 <_dtoa_r+0x468>
 8010e46:	2d00      	cmp	r5, #0
 8010e48:	f000 809a 	beq.w	8010f80 <_dtoa_r+0x468>
 8010e4c:	9b00      	ldr	r3, [sp, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	dd32      	ble.n	8010eb8 <_dtoa_r+0x3a0>
 8010e52:	4ab7      	ldr	r2, [pc, #732]	; (8011130 <_dtoa_r+0x618>)
 8010e54:	f003 030f 	and.w	r3, r3, #15
 8010e58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e60:	9b00      	ldr	r3, [sp, #0]
 8010e62:	05d8      	lsls	r0, r3, #23
 8010e64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010e68:	d516      	bpl.n	8010e98 <_dtoa_r+0x380>
 8010e6a:	4bb2      	ldr	r3, [pc, #712]	; (8011134 <_dtoa_r+0x61c>)
 8010e6c:	ec51 0b19 	vmov	r0, r1, d9
 8010e70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e74:	f7ef fcfa 	bl	800086c <__aeabi_ddiv>
 8010e78:	f007 070f 	and.w	r7, r7, #15
 8010e7c:	4682      	mov	sl, r0
 8010e7e:	468b      	mov	fp, r1
 8010e80:	2503      	movs	r5, #3
 8010e82:	4eac      	ldr	r6, [pc, #688]	; (8011134 <_dtoa_r+0x61c>)
 8010e84:	b957      	cbnz	r7, 8010e9c <_dtoa_r+0x384>
 8010e86:	4642      	mov	r2, r8
 8010e88:	464b      	mov	r3, r9
 8010e8a:	4650      	mov	r0, sl
 8010e8c:	4659      	mov	r1, fp
 8010e8e:	f7ef fced 	bl	800086c <__aeabi_ddiv>
 8010e92:	4682      	mov	sl, r0
 8010e94:	468b      	mov	fp, r1
 8010e96:	e028      	b.n	8010eea <_dtoa_r+0x3d2>
 8010e98:	2502      	movs	r5, #2
 8010e9a:	e7f2      	b.n	8010e82 <_dtoa_r+0x36a>
 8010e9c:	07f9      	lsls	r1, r7, #31
 8010e9e:	d508      	bpl.n	8010eb2 <_dtoa_r+0x39a>
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ea8:	f7ef fbb6 	bl	8000618 <__aeabi_dmul>
 8010eac:	3501      	adds	r5, #1
 8010eae:	4680      	mov	r8, r0
 8010eb0:	4689      	mov	r9, r1
 8010eb2:	107f      	asrs	r7, r7, #1
 8010eb4:	3608      	adds	r6, #8
 8010eb6:	e7e5      	b.n	8010e84 <_dtoa_r+0x36c>
 8010eb8:	f000 809b 	beq.w	8010ff2 <_dtoa_r+0x4da>
 8010ebc:	9b00      	ldr	r3, [sp, #0]
 8010ebe:	4f9d      	ldr	r7, [pc, #628]	; (8011134 <_dtoa_r+0x61c>)
 8010ec0:	425e      	negs	r6, r3
 8010ec2:	4b9b      	ldr	r3, [pc, #620]	; (8011130 <_dtoa_r+0x618>)
 8010ec4:	f006 020f 	and.w	r2, r6, #15
 8010ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed0:	ec51 0b19 	vmov	r0, r1, d9
 8010ed4:	f7ef fba0 	bl	8000618 <__aeabi_dmul>
 8010ed8:	1136      	asrs	r6, r6, #4
 8010eda:	4682      	mov	sl, r0
 8010edc:	468b      	mov	fp, r1
 8010ede:	2300      	movs	r3, #0
 8010ee0:	2502      	movs	r5, #2
 8010ee2:	2e00      	cmp	r6, #0
 8010ee4:	d17a      	bne.n	8010fdc <_dtoa_r+0x4c4>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d1d3      	bne.n	8010e92 <_dtoa_r+0x37a>
 8010eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f000 8082 	beq.w	8010ff6 <_dtoa_r+0x4de>
 8010ef2:	4b91      	ldr	r3, [pc, #580]	; (8011138 <_dtoa_r+0x620>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	4650      	mov	r0, sl
 8010ef8:	4659      	mov	r1, fp
 8010efa:	f7ef fdff 	bl	8000afc <__aeabi_dcmplt>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d079      	beq.n	8010ff6 <_dtoa_r+0x4de>
 8010f02:	9b03      	ldr	r3, [sp, #12]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d076      	beq.n	8010ff6 <_dtoa_r+0x4de>
 8010f08:	9b02      	ldr	r3, [sp, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	dd36      	ble.n	8010f7c <_dtoa_r+0x464>
 8010f0e:	9b00      	ldr	r3, [sp, #0]
 8010f10:	4650      	mov	r0, sl
 8010f12:	4659      	mov	r1, fp
 8010f14:	1e5f      	subs	r7, r3, #1
 8010f16:	2200      	movs	r2, #0
 8010f18:	4b88      	ldr	r3, [pc, #544]	; (801113c <_dtoa_r+0x624>)
 8010f1a:	f7ef fb7d 	bl	8000618 <__aeabi_dmul>
 8010f1e:	9e02      	ldr	r6, [sp, #8]
 8010f20:	4682      	mov	sl, r0
 8010f22:	468b      	mov	fp, r1
 8010f24:	3501      	adds	r5, #1
 8010f26:	4628      	mov	r0, r5
 8010f28:	f7ef fb0c 	bl	8000544 <__aeabi_i2d>
 8010f2c:	4652      	mov	r2, sl
 8010f2e:	465b      	mov	r3, fp
 8010f30:	f7ef fb72 	bl	8000618 <__aeabi_dmul>
 8010f34:	4b82      	ldr	r3, [pc, #520]	; (8011140 <_dtoa_r+0x628>)
 8010f36:	2200      	movs	r2, #0
 8010f38:	f7ef f9b8 	bl	80002ac <__adddf3>
 8010f3c:	46d0      	mov	r8, sl
 8010f3e:	46d9      	mov	r9, fp
 8010f40:	4682      	mov	sl, r0
 8010f42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010f46:	2e00      	cmp	r6, #0
 8010f48:	d158      	bne.n	8010ffc <_dtoa_r+0x4e4>
 8010f4a:	4b7e      	ldr	r3, [pc, #504]	; (8011144 <_dtoa_r+0x62c>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4649      	mov	r1, r9
 8010f52:	f7ef f9a9 	bl	80002a8 <__aeabi_dsub>
 8010f56:	4652      	mov	r2, sl
 8010f58:	465b      	mov	r3, fp
 8010f5a:	4680      	mov	r8, r0
 8010f5c:	4689      	mov	r9, r1
 8010f5e:	f7ef fdeb 	bl	8000b38 <__aeabi_dcmpgt>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	f040 8295 	bne.w	8011492 <_dtoa_r+0x97a>
 8010f68:	4652      	mov	r2, sl
 8010f6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010f6e:	4640      	mov	r0, r8
 8010f70:	4649      	mov	r1, r9
 8010f72:	f7ef fdc3 	bl	8000afc <__aeabi_dcmplt>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	f040 8289 	bne.w	801148e <_dtoa_r+0x976>
 8010f7c:	ec5b ab19 	vmov	sl, fp, d9
 8010f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	f2c0 8148 	blt.w	8011218 <_dtoa_r+0x700>
 8010f88:	9a00      	ldr	r2, [sp, #0]
 8010f8a:	2a0e      	cmp	r2, #14
 8010f8c:	f300 8144 	bgt.w	8011218 <_dtoa_r+0x700>
 8010f90:	4b67      	ldr	r3, [pc, #412]	; (8011130 <_dtoa_r+0x618>)
 8010f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f280 80d5 	bge.w	801114c <_dtoa_r+0x634>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f300 80d1 	bgt.w	801114c <_dtoa_r+0x634>
 8010faa:	f040 826f 	bne.w	801148c <_dtoa_r+0x974>
 8010fae:	4b65      	ldr	r3, [pc, #404]	; (8011144 <_dtoa_r+0x62c>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	f7ef fb2f 	bl	8000618 <__aeabi_dmul>
 8010fba:	4652      	mov	r2, sl
 8010fbc:	465b      	mov	r3, fp
 8010fbe:	f7ef fdb1 	bl	8000b24 <__aeabi_dcmpge>
 8010fc2:	9e03      	ldr	r6, [sp, #12]
 8010fc4:	4637      	mov	r7, r6
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	f040 8245 	bne.w	8011456 <_dtoa_r+0x93e>
 8010fcc:	9d01      	ldr	r5, [sp, #4]
 8010fce:	2331      	movs	r3, #49	; 0x31
 8010fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8010fd4:	9b00      	ldr	r3, [sp, #0]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	9300      	str	r3, [sp, #0]
 8010fda:	e240      	b.n	801145e <_dtoa_r+0x946>
 8010fdc:	07f2      	lsls	r2, r6, #31
 8010fde:	d505      	bpl.n	8010fec <_dtoa_r+0x4d4>
 8010fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fe4:	f7ef fb18 	bl	8000618 <__aeabi_dmul>
 8010fe8:	3501      	adds	r5, #1
 8010fea:	2301      	movs	r3, #1
 8010fec:	1076      	asrs	r6, r6, #1
 8010fee:	3708      	adds	r7, #8
 8010ff0:	e777      	b.n	8010ee2 <_dtoa_r+0x3ca>
 8010ff2:	2502      	movs	r5, #2
 8010ff4:	e779      	b.n	8010eea <_dtoa_r+0x3d2>
 8010ff6:	9f00      	ldr	r7, [sp, #0]
 8010ff8:	9e03      	ldr	r6, [sp, #12]
 8010ffa:	e794      	b.n	8010f26 <_dtoa_r+0x40e>
 8010ffc:	9901      	ldr	r1, [sp, #4]
 8010ffe:	4b4c      	ldr	r3, [pc, #304]	; (8011130 <_dtoa_r+0x618>)
 8011000:	4431      	add	r1, r6
 8011002:	910d      	str	r1, [sp, #52]	; 0x34
 8011004:	9908      	ldr	r1, [sp, #32]
 8011006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801100a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801100e:	2900      	cmp	r1, #0
 8011010:	d043      	beq.n	801109a <_dtoa_r+0x582>
 8011012:	494d      	ldr	r1, [pc, #308]	; (8011148 <_dtoa_r+0x630>)
 8011014:	2000      	movs	r0, #0
 8011016:	f7ef fc29 	bl	800086c <__aeabi_ddiv>
 801101a:	4652      	mov	r2, sl
 801101c:	465b      	mov	r3, fp
 801101e:	f7ef f943 	bl	80002a8 <__aeabi_dsub>
 8011022:	9d01      	ldr	r5, [sp, #4]
 8011024:	4682      	mov	sl, r0
 8011026:	468b      	mov	fp, r1
 8011028:	4649      	mov	r1, r9
 801102a:	4640      	mov	r0, r8
 801102c:	f7ef fda4 	bl	8000b78 <__aeabi_d2iz>
 8011030:	4606      	mov	r6, r0
 8011032:	f7ef fa87 	bl	8000544 <__aeabi_i2d>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4640      	mov	r0, r8
 801103c:	4649      	mov	r1, r9
 801103e:	f7ef f933 	bl	80002a8 <__aeabi_dsub>
 8011042:	3630      	adds	r6, #48	; 0x30
 8011044:	f805 6b01 	strb.w	r6, [r5], #1
 8011048:	4652      	mov	r2, sl
 801104a:	465b      	mov	r3, fp
 801104c:	4680      	mov	r8, r0
 801104e:	4689      	mov	r9, r1
 8011050:	f7ef fd54 	bl	8000afc <__aeabi_dcmplt>
 8011054:	2800      	cmp	r0, #0
 8011056:	d163      	bne.n	8011120 <_dtoa_r+0x608>
 8011058:	4642      	mov	r2, r8
 801105a:	464b      	mov	r3, r9
 801105c:	4936      	ldr	r1, [pc, #216]	; (8011138 <_dtoa_r+0x620>)
 801105e:	2000      	movs	r0, #0
 8011060:	f7ef f922 	bl	80002a8 <__aeabi_dsub>
 8011064:	4652      	mov	r2, sl
 8011066:	465b      	mov	r3, fp
 8011068:	f7ef fd48 	bl	8000afc <__aeabi_dcmplt>
 801106c:	2800      	cmp	r0, #0
 801106e:	f040 80b5 	bne.w	80111dc <_dtoa_r+0x6c4>
 8011072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011074:	429d      	cmp	r5, r3
 8011076:	d081      	beq.n	8010f7c <_dtoa_r+0x464>
 8011078:	4b30      	ldr	r3, [pc, #192]	; (801113c <_dtoa_r+0x624>)
 801107a:	2200      	movs	r2, #0
 801107c:	4650      	mov	r0, sl
 801107e:	4659      	mov	r1, fp
 8011080:	f7ef faca 	bl	8000618 <__aeabi_dmul>
 8011084:	4b2d      	ldr	r3, [pc, #180]	; (801113c <_dtoa_r+0x624>)
 8011086:	4682      	mov	sl, r0
 8011088:	468b      	mov	fp, r1
 801108a:	4640      	mov	r0, r8
 801108c:	4649      	mov	r1, r9
 801108e:	2200      	movs	r2, #0
 8011090:	f7ef fac2 	bl	8000618 <__aeabi_dmul>
 8011094:	4680      	mov	r8, r0
 8011096:	4689      	mov	r9, r1
 8011098:	e7c6      	b.n	8011028 <_dtoa_r+0x510>
 801109a:	4650      	mov	r0, sl
 801109c:	4659      	mov	r1, fp
 801109e:	f7ef fabb 	bl	8000618 <__aeabi_dmul>
 80110a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110a4:	9d01      	ldr	r5, [sp, #4]
 80110a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80110a8:	4682      	mov	sl, r0
 80110aa:	468b      	mov	fp, r1
 80110ac:	4649      	mov	r1, r9
 80110ae:	4640      	mov	r0, r8
 80110b0:	f7ef fd62 	bl	8000b78 <__aeabi_d2iz>
 80110b4:	4606      	mov	r6, r0
 80110b6:	f7ef fa45 	bl	8000544 <__aeabi_i2d>
 80110ba:	3630      	adds	r6, #48	; 0x30
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	4640      	mov	r0, r8
 80110c2:	4649      	mov	r1, r9
 80110c4:	f7ef f8f0 	bl	80002a8 <__aeabi_dsub>
 80110c8:	f805 6b01 	strb.w	r6, [r5], #1
 80110cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110ce:	429d      	cmp	r5, r3
 80110d0:	4680      	mov	r8, r0
 80110d2:	4689      	mov	r9, r1
 80110d4:	f04f 0200 	mov.w	r2, #0
 80110d8:	d124      	bne.n	8011124 <_dtoa_r+0x60c>
 80110da:	4b1b      	ldr	r3, [pc, #108]	; (8011148 <_dtoa_r+0x630>)
 80110dc:	4650      	mov	r0, sl
 80110de:	4659      	mov	r1, fp
 80110e0:	f7ef f8e4 	bl	80002ac <__adddf3>
 80110e4:	4602      	mov	r2, r0
 80110e6:	460b      	mov	r3, r1
 80110e8:	4640      	mov	r0, r8
 80110ea:	4649      	mov	r1, r9
 80110ec:	f7ef fd24 	bl	8000b38 <__aeabi_dcmpgt>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	d173      	bne.n	80111dc <_dtoa_r+0x6c4>
 80110f4:	4652      	mov	r2, sl
 80110f6:	465b      	mov	r3, fp
 80110f8:	4913      	ldr	r1, [pc, #76]	; (8011148 <_dtoa_r+0x630>)
 80110fa:	2000      	movs	r0, #0
 80110fc:	f7ef f8d4 	bl	80002a8 <__aeabi_dsub>
 8011100:	4602      	mov	r2, r0
 8011102:	460b      	mov	r3, r1
 8011104:	4640      	mov	r0, r8
 8011106:	4649      	mov	r1, r9
 8011108:	f7ef fcf8 	bl	8000afc <__aeabi_dcmplt>
 801110c:	2800      	cmp	r0, #0
 801110e:	f43f af35 	beq.w	8010f7c <_dtoa_r+0x464>
 8011112:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011114:	1e6b      	subs	r3, r5, #1
 8011116:	930f      	str	r3, [sp, #60]	; 0x3c
 8011118:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801111c:	2b30      	cmp	r3, #48	; 0x30
 801111e:	d0f8      	beq.n	8011112 <_dtoa_r+0x5fa>
 8011120:	9700      	str	r7, [sp, #0]
 8011122:	e049      	b.n	80111b8 <_dtoa_r+0x6a0>
 8011124:	4b05      	ldr	r3, [pc, #20]	; (801113c <_dtoa_r+0x624>)
 8011126:	f7ef fa77 	bl	8000618 <__aeabi_dmul>
 801112a:	4680      	mov	r8, r0
 801112c:	4689      	mov	r9, r1
 801112e:	e7bd      	b.n	80110ac <_dtoa_r+0x594>
 8011130:	0802e858 	.word	0x0802e858
 8011134:	0802e830 	.word	0x0802e830
 8011138:	3ff00000 	.word	0x3ff00000
 801113c:	40240000 	.word	0x40240000
 8011140:	401c0000 	.word	0x401c0000
 8011144:	40140000 	.word	0x40140000
 8011148:	3fe00000 	.word	0x3fe00000
 801114c:	9d01      	ldr	r5, [sp, #4]
 801114e:	4656      	mov	r6, sl
 8011150:	465f      	mov	r7, fp
 8011152:	4642      	mov	r2, r8
 8011154:	464b      	mov	r3, r9
 8011156:	4630      	mov	r0, r6
 8011158:	4639      	mov	r1, r7
 801115a:	f7ef fb87 	bl	800086c <__aeabi_ddiv>
 801115e:	f7ef fd0b 	bl	8000b78 <__aeabi_d2iz>
 8011162:	4682      	mov	sl, r0
 8011164:	f7ef f9ee 	bl	8000544 <__aeabi_i2d>
 8011168:	4642      	mov	r2, r8
 801116a:	464b      	mov	r3, r9
 801116c:	f7ef fa54 	bl	8000618 <__aeabi_dmul>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	4630      	mov	r0, r6
 8011176:	4639      	mov	r1, r7
 8011178:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801117c:	f7ef f894 	bl	80002a8 <__aeabi_dsub>
 8011180:	f805 6b01 	strb.w	r6, [r5], #1
 8011184:	9e01      	ldr	r6, [sp, #4]
 8011186:	9f03      	ldr	r7, [sp, #12]
 8011188:	1bae      	subs	r6, r5, r6
 801118a:	42b7      	cmp	r7, r6
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	d135      	bne.n	80111fe <_dtoa_r+0x6e6>
 8011192:	f7ef f88b 	bl	80002ac <__adddf3>
 8011196:	4642      	mov	r2, r8
 8011198:	464b      	mov	r3, r9
 801119a:	4606      	mov	r6, r0
 801119c:	460f      	mov	r7, r1
 801119e:	f7ef fccb 	bl	8000b38 <__aeabi_dcmpgt>
 80111a2:	b9d0      	cbnz	r0, 80111da <_dtoa_r+0x6c2>
 80111a4:	4642      	mov	r2, r8
 80111a6:	464b      	mov	r3, r9
 80111a8:	4630      	mov	r0, r6
 80111aa:	4639      	mov	r1, r7
 80111ac:	f7ef fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80111b0:	b110      	cbz	r0, 80111b8 <_dtoa_r+0x6a0>
 80111b2:	f01a 0f01 	tst.w	sl, #1
 80111b6:	d110      	bne.n	80111da <_dtoa_r+0x6c2>
 80111b8:	4620      	mov	r0, r4
 80111ba:	ee18 1a10 	vmov	r1, s16
 80111be:	f000 fd49 	bl	8011c54 <_Bfree>
 80111c2:	2300      	movs	r3, #0
 80111c4:	9800      	ldr	r0, [sp, #0]
 80111c6:	702b      	strb	r3, [r5, #0]
 80111c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111ca:	3001      	adds	r0, #1
 80111cc:	6018      	str	r0, [r3, #0]
 80111ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f43f acf1 	beq.w	8010bb8 <_dtoa_r+0xa0>
 80111d6:	601d      	str	r5, [r3, #0]
 80111d8:	e4ee      	b.n	8010bb8 <_dtoa_r+0xa0>
 80111da:	9f00      	ldr	r7, [sp, #0]
 80111dc:	462b      	mov	r3, r5
 80111de:	461d      	mov	r5, r3
 80111e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111e4:	2a39      	cmp	r2, #57	; 0x39
 80111e6:	d106      	bne.n	80111f6 <_dtoa_r+0x6de>
 80111e8:	9a01      	ldr	r2, [sp, #4]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d1f7      	bne.n	80111de <_dtoa_r+0x6c6>
 80111ee:	9901      	ldr	r1, [sp, #4]
 80111f0:	2230      	movs	r2, #48	; 0x30
 80111f2:	3701      	adds	r7, #1
 80111f4:	700a      	strb	r2, [r1, #0]
 80111f6:	781a      	ldrb	r2, [r3, #0]
 80111f8:	3201      	adds	r2, #1
 80111fa:	701a      	strb	r2, [r3, #0]
 80111fc:	e790      	b.n	8011120 <_dtoa_r+0x608>
 80111fe:	4ba6      	ldr	r3, [pc, #664]	; (8011498 <_dtoa_r+0x980>)
 8011200:	2200      	movs	r2, #0
 8011202:	f7ef fa09 	bl	8000618 <__aeabi_dmul>
 8011206:	2200      	movs	r2, #0
 8011208:	2300      	movs	r3, #0
 801120a:	4606      	mov	r6, r0
 801120c:	460f      	mov	r7, r1
 801120e:	f7ef fc6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8011212:	2800      	cmp	r0, #0
 8011214:	d09d      	beq.n	8011152 <_dtoa_r+0x63a>
 8011216:	e7cf      	b.n	80111b8 <_dtoa_r+0x6a0>
 8011218:	9a08      	ldr	r2, [sp, #32]
 801121a:	2a00      	cmp	r2, #0
 801121c:	f000 80d7 	beq.w	80113ce <_dtoa_r+0x8b6>
 8011220:	9a06      	ldr	r2, [sp, #24]
 8011222:	2a01      	cmp	r2, #1
 8011224:	f300 80ba 	bgt.w	801139c <_dtoa_r+0x884>
 8011228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801122a:	2a00      	cmp	r2, #0
 801122c:	f000 80b2 	beq.w	8011394 <_dtoa_r+0x87c>
 8011230:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011234:	9e07      	ldr	r6, [sp, #28]
 8011236:	9d04      	ldr	r5, [sp, #16]
 8011238:	9a04      	ldr	r2, [sp, #16]
 801123a:	441a      	add	r2, r3
 801123c:	9204      	str	r2, [sp, #16]
 801123e:	9a05      	ldr	r2, [sp, #20]
 8011240:	2101      	movs	r1, #1
 8011242:	441a      	add	r2, r3
 8011244:	4620      	mov	r0, r4
 8011246:	9205      	str	r2, [sp, #20]
 8011248:	f000 fdbc 	bl	8011dc4 <__i2b>
 801124c:	4607      	mov	r7, r0
 801124e:	2d00      	cmp	r5, #0
 8011250:	dd0c      	ble.n	801126c <_dtoa_r+0x754>
 8011252:	9b05      	ldr	r3, [sp, #20]
 8011254:	2b00      	cmp	r3, #0
 8011256:	dd09      	ble.n	801126c <_dtoa_r+0x754>
 8011258:	42ab      	cmp	r3, r5
 801125a:	9a04      	ldr	r2, [sp, #16]
 801125c:	bfa8      	it	ge
 801125e:	462b      	movge	r3, r5
 8011260:	1ad2      	subs	r2, r2, r3
 8011262:	9204      	str	r2, [sp, #16]
 8011264:	9a05      	ldr	r2, [sp, #20]
 8011266:	1aed      	subs	r5, r5, r3
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	9305      	str	r3, [sp, #20]
 801126c:	9b07      	ldr	r3, [sp, #28]
 801126e:	b31b      	cbz	r3, 80112b8 <_dtoa_r+0x7a0>
 8011270:	9b08      	ldr	r3, [sp, #32]
 8011272:	2b00      	cmp	r3, #0
 8011274:	f000 80af 	beq.w	80113d6 <_dtoa_r+0x8be>
 8011278:	2e00      	cmp	r6, #0
 801127a:	dd13      	ble.n	80112a4 <_dtoa_r+0x78c>
 801127c:	4639      	mov	r1, r7
 801127e:	4632      	mov	r2, r6
 8011280:	4620      	mov	r0, r4
 8011282:	f000 fe5f 	bl	8011f44 <__pow5mult>
 8011286:	ee18 2a10 	vmov	r2, s16
 801128a:	4601      	mov	r1, r0
 801128c:	4607      	mov	r7, r0
 801128e:	4620      	mov	r0, r4
 8011290:	f000 fdae 	bl	8011df0 <__multiply>
 8011294:	ee18 1a10 	vmov	r1, s16
 8011298:	4680      	mov	r8, r0
 801129a:	4620      	mov	r0, r4
 801129c:	f000 fcda 	bl	8011c54 <_Bfree>
 80112a0:	ee08 8a10 	vmov	s16, r8
 80112a4:	9b07      	ldr	r3, [sp, #28]
 80112a6:	1b9a      	subs	r2, r3, r6
 80112a8:	d006      	beq.n	80112b8 <_dtoa_r+0x7a0>
 80112aa:	ee18 1a10 	vmov	r1, s16
 80112ae:	4620      	mov	r0, r4
 80112b0:	f000 fe48 	bl	8011f44 <__pow5mult>
 80112b4:	ee08 0a10 	vmov	s16, r0
 80112b8:	2101      	movs	r1, #1
 80112ba:	4620      	mov	r0, r4
 80112bc:	f000 fd82 	bl	8011dc4 <__i2b>
 80112c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	4606      	mov	r6, r0
 80112c6:	f340 8088 	ble.w	80113da <_dtoa_r+0x8c2>
 80112ca:	461a      	mov	r2, r3
 80112cc:	4601      	mov	r1, r0
 80112ce:	4620      	mov	r0, r4
 80112d0:	f000 fe38 	bl	8011f44 <__pow5mult>
 80112d4:	9b06      	ldr	r3, [sp, #24]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	4606      	mov	r6, r0
 80112da:	f340 8081 	ble.w	80113e0 <_dtoa_r+0x8c8>
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	6933      	ldr	r3, [r6, #16]
 80112e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80112e8:	6918      	ldr	r0, [r3, #16]
 80112ea:	f000 fd1b 	bl	8011d24 <__hi0bits>
 80112ee:	f1c0 0020 	rsb	r0, r0, #32
 80112f2:	9b05      	ldr	r3, [sp, #20]
 80112f4:	4418      	add	r0, r3
 80112f6:	f010 001f 	ands.w	r0, r0, #31
 80112fa:	f000 8092 	beq.w	8011422 <_dtoa_r+0x90a>
 80112fe:	f1c0 0320 	rsb	r3, r0, #32
 8011302:	2b04      	cmp	r3, #4
 8011304:	f340 808a 	ble.w	801141c <_dtoa_r+0x904>
 8011308:	f1c0 001c 	rsb	r0, r0, #28
 801130c:	9b04      	ldr	r3, [sp, #16]
 801130e:	4403      	add	r3, r0
 8011310:	9304      	str	r3, [sp, #16]
 8011312:	9b05      	ldr	r3, [sp, #20]
 8011314:	4403      	add	r3, r0
 8011316:	4405      	add	r5, r0
 8011318:	9305      	str	r3, [sp, #20]
 801131a:	9b04      	ldr	r3, [sp, #16]
 801131c:	2b00      	cmp	r3, #0
 801131e:	dd07      	ble.n	8011330 <_dtoa_r+0x818>
 8011320:	ee18 1a10 	vmov	r1, s16
 8011324:	461a      	mov	r2, r3
 8011326:	4620      	mov	r0, r4
 8011328:	f000 fe66 	bl	8011ff8 <__lshift>
 801132c:	ee08 0a10 	vmov	s16, r0
 8011330:	9b05      	ldr	r3, [sp, #20]
 8011332:	2b00      	cmp	r3, #0
 8011334:	dd05      	ble.n	8011342 <_dtoa_r+0x82a>
 8011336:	4631      	mov	r1, r6
 8011338:	461a      	mov	r2, r3
 801133a:	4620      	mov	r0, r4
 801133c:	f000 fe5c 	bl	8011ff8 <__lshift>
 8011340:	4606      	mov	r6, r0
 8011342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011344:	2b00      	cmp	r3, #0
 8011346:	d06e      	beq.n	8011426 <_dtoa_r+0x90e>
 8011348:	ee18 0a10 	vmov	r0, s16
 801134c:	4631      	mov	r1, r6
 801134e:	f000 fec3 	bl	80120d8 <__mcmp>
 8011352:	2800      	cmp	r0, #0
 8011354:	da67      	bge.n	8011426 <_dtoa_r+0x90e>
 8011356:	9b00      	ldr	r3, [sp, #0]
 8011358:	3b01      	subs	r3, #1
 801135a:	ee18 1a10 	vmov	r1, s16
 801135e:	9300      	str	r3, [sp, #0]
 8011360:	220a      	movs	r2, #10
 8011362:	2300      	movs	r3, #0
 8011364:	4620      	mov	r0, r4
 8011366:	f000 fc97 	bl	8011c98 <__multadd>
 801136a:	9b08      	ldr	r3, [sp, #32]
 801136c:	ee08 0a10 	vmov	s16, r0
 8011370:	2b00      	cmp	r3, #0
 8011372:	f000 81b1 	beq.w	80116d8 <_dtoa_r+0xbc0>
 8011376:	2300      	movs	r3, #0
 8011378:	4639      	mov	r1, r7
 801137a:	220a      	movs	r2, #10
 801137c:	4620      	mov	r0, r4
 801137e:	f000 fc8b 	bl	8011c98 <__multadd>
 8011382:	9b02      	ldr	r3, [sp, #8]
 8011384:	2b00      	cmp	r3, #0
 8011386:	4607      	mov	r7, r0
 8011388:	f300 808e 	bgt.w	80114a8 <_dtoa_r+0x990>
 801138c:	9b06      	ldr	r3, [sp, #24]
 801138e:	2b02      	cmp	r3, #2
 8011390:	dc51      	bgt.n	8011436 <_dtoa_r+0x91e>
 8011392:	e089      	b.n	80114a8 <_dtoa_r+0x990>
 8011394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801139a:	e74b      	b.n	8011234 <_dtoa_r+0x71c>
 801139c:	9b03      	ldr	r3, [sp, #12]
 801139e:	1e5e      	subs	r6, r3, #1
 80113a0:	9b07      	ldr	r3, [sp, #28]
 80113a2:	42b3      	cmp	r3, r6
 80113a4:	bfbf      	itttt	lt
 80113a6:	9b07      	ldrlt	r3, [sp, #28]
 80113a8:	9607      	strlt	r6, [sp, #28]
 80113aa:	1af2      	sublt	r2, r6, r3
 80113ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80113ae:	bfb6      	itet	lt
 80113b0:	189b      	addlt	r3, r3, r2
 80113b2:	1b9e      	subge	r6, r3, r6
 80113b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	bfb8      	it	lt
 80113ba:	2600      	movlt	r6, #0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	bfb7      	itett	lt
 80113c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80113c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80113c8:	1a9d      	sublt	r5, r3, r2
 80113ca:	2300      	movlt	r3, #0
 80113cc:	e734      	b.n	8011238 <_dtoa_r+0x720>
 80113ce:	9e07      	ldr	r6, [sp, #28]
 80113d0:	9d04      	ldr	r5, [sp, #16]
 80113d2:	9f08      	ldr	r7, [sp, #32]
 80113d4:	e73b      	b.n	801124e <_dtoa_r+0x736>
 80113d6:	9a07      	ldr	r2, [sp, #28]
 80113d8:	e767      	b.n	80112aa <_dtoa_r+0x792>
 80113da:	9b06      	ldr	r3, [sp, #24]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	dc18      	bgt.n	8011412 <_dtoa_r+0x8fa>
 80113e0:	f1ba 0f00 	cmp.w	sl, #0
 80113e4:	d115      	bne.n	8011412 <_dtoa_r+0x8fa>
 80113e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80113ea:	b993      	cbnz	r3, 8011412 <_dtoa_r+0x8fa>
 80113ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80113f0:	0d1b      	lsrs	r3, r3, #20
 80113f2:	051b      	lsls	r3, r3, #20
 80113f4:	b183      	cbz	r3, 8011418 <_dtoa_r+0x900>
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	3301      	adds	r3, #1
 80113fa:	9304      	str	r3, [sp, #16]
 80113fc:	9b05      	ldr	r3, [sp, #20]
 80113fe:	3301      	adds	r3, #1
 8011400:	9305      	str	r3, [sp, #20]
 8011402:	f04f 0801 	mov.w	r8, #1
 8011406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011408:	2b00      	cmp	r3, #0
 801140a:	f47f af6a 	bne.w	80112e2 <_dtoa_r+0x7ca>
 801140e:	2001      	movs	r0, #1
 8011410:	e76f      	b.n	80112f2 <_dtoa_r+0x7da>
 8011412:	f04f 0800 	mov.w	r8, #0
 8011416:	e7f6      	b.n	8011406 <_dtoa_r+0x8ee>
 8011418:	4698      	mov	r8, r3
 801141a:	e7f4      	b.n	8011406 <_dtoa_r+0x8ee>
 801141c:	f43f af7d 	beq.w	801131a <_dtoa_r+0x802>
 8011420:	4618      	mov	r0, r3
 8011422:	301c      	adds	r0, #28
 8011424:	e772      	b.n	801130c <_dtoa_r+0x7f4>
 8011426:	9b03      	ldr	r3, [sp, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	dc37      	bgt.n	801149c <_dtoa_r+0x984>
 801142c:	9b06      	ldr	r3, [sp, #24]
 801142e:	2b02      	cmp	r3, #2
 8011430:	dd34      	ble.n	801149c <_dtoa_r+0x984>
 8011432:	9b03      	ldr	r3, [sp, #12]
 8011434:	9302      	str	r3, [sp, #8]
 8011436:	9b02      	ldr	r3, [sp, #8]
 8011438:	b96b      	cbnz	r3, 8011456 <_dtoa_r+0x93e>
 801143a:	4631      	mov	r1, r6
 801143c:	2205      	movs	r2, #5
 801143e:	4620      	mov	r0, r4
 8011440:	f000 fc2a 	bl	8011c98 <__multadd>
 8011444:	4601      	mov	r1, r0
 8011446:	4606      	mov	r6, r0
 8011448:	ee18 0a10 	vmov	r0, s16
 801144c:	f000 fe44 	bl	80120d8 <__mcmp>
 8011450:	2800      	cmp	r0, #0
 8011452:	f73f adbb 	bgt.w	8010fcc <_dtoa_r+0x4b4>
 8011456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011458:	9d01      	ldr	r5, [sp, #4]
 801145a:	43db      	mvns	r3, r3
 801145c:	9300      	str	r3, [sp, #0]
 801145e:	f04f 0800 	mov.w	r8, #0
 8011462:	4631      	mov	r1, r6
 8011464:	4620      	mov	r0, r4
 8011466:	f000 fbf5 	bl	8011c54 <_Bfree>
 801146a:	2f00      	cmp	r7, #0
 801146c:	f43f aea4 	beq.w	80111b8 <_dtoa_r+0x6a0>
 8011470:	f1b8 0f00 	cmp.w	r8, #0
 8011474:	d005      	beq.n	8011482 <_dtoa_r+0x96a>
 8011476:	45b8      	cmp	r8, r7
 8011478:	d003      	beq.n	8011482 <_dtoa_r+0x96a>
 801147a:	4641      	mov	r1, r8
 801147c:	4620      	mov	r0, r4
 801147e:	f000 fbe9 	bl	8011c54 <_Bfree>
 8011482:	4639      	mov	r1, r7
 8011484:	4620      	mov	r0, r4
 8011486:	f000 fbe5 	bl	8011c54 <_Bfree>
 801148a:	e695      	b.n	80111b8 <_dtoa_r+0x6a0>
 801148c:	2600      	movs	r6, #0
 801148e:	4637      	mov	r7, r6
 8011490:	e7e1      	b.n	8011456 <_dtoa_r+0x93e>
 8011492:	9700      	str	r7, [sp, #0]
 8011494:	4637      	mov	r7, r6
 8011496:	e599      	b.n	8010fcc <_dtoa_r+0x4b4>
 8011498:	40240000 	.word	0x40240000
 801149c:	9b08      	ldr	r3, [sp, #32]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f000 80ca 	beq.w	8011638 <_dtoa_r+0xb20>
 80114a4:	9b03      	ldr	r3, [sp, #12]
 80114a6:	9302      	str	r3, [sp, #8]
 80114a8:	2d00      	cmp	r5, #0
 80114aa:	dd05      	ble.n	80114b8 <_dtoa_r+0x9a0>
 80114ac:	4639      	mov	r1, r7
 80114ae:	462a      	mov	r2, r5
 80114b0:	4620      	mov	r0, r4
 80114b2:	f000 fda1 	bl	8011ff8 <__lshift>
 80114b6:	4607      	mov	r7, r0
 80114b8:	f1b8 0f00 	cmp.w	r8, #0
 80114bc:	d05b      	beq.n	8011576 <_dtoa_r+0xa5e>
 80114be:	6879      	ldr	r1, [r7, #4]
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fb87 	bl	8011bd4 <_Balloc>
 80114c6:	4605      	mov	r5, r0
 80114c8:	b928      	cbnz	r0, 80114d6 <_dtoa_r+0x9be>
 80114ca:	4b87      	ldr	r3, [pc, #540]	; (80116e8 <_dtoa_r+0xbd0>)
 80114cc:	4602      	mov	r2, r0
 80114ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80114d2:	f7ff bb3b 	b.w	8010b4c <_dtoa_r+0x34>
 80114d6:	693a      	ldr	r2, [r7, #16]
 80114d8:	3202      	adds	r2, #2
 80114da:	0092      	lsls	r2, r2, #2
 80114dc:	f107 010c 	add.w	r1, r7, #12
 80114e0:	300c      	adds	r0, #12
 80114e2:	f7fe fa63 	bl	800f9ac <memcpy>
 80114e6:	2201      	movs	r2, #1
 80114e8:	4629      	mov	r1, r5
 80114ea:	4620      	mov	r0, r4
 80114ec:	f000 fd84 	bl	8011ff8 <__lshift>
 80114f0:	9b01      	ldr	r3, [sp, #4]
 80114f2:	f103 0901 	add.w	r9, r3, #1
 80114f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80114fa:	4413      	add	r3, r2
 80114fc:	9305      	str	r3, [sp, #20]
 80114fe:	f00a 0301 	and.w	r3, sl, #1
 8011502:	46b8      	mov	r8, r7
 8011504:	9304      	str	r3, [sp, #16]
 8011506:	4607      	mov	r7, r0
 8011508:	4631      	mov	r1, r6
 801150a:	ee18 0a10 	vmov	r0, s16
 801150e:	f7ff fa77 	bl	8010a00 <quorem>
 8011512:	4641      	mov	r1, r8
 8011514:	9002      	str	r0, [sp, #8]
 8011516:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801151a:	ee18 0a10 	vmov	r0, s16
 801151e:	f000 fddb 	bl	80120d8 <__mcmp>
 8011522:	463a      	mov	r2, r7
 8011524:	9003      	str	r0, [sp, #12]
 8011526:	4631      	mov	r1, r6
 8011528:	4620      	mov	r0, r4
 801152a:	f000 fdf1 	bl	8012110 <__mdiff>
 801152e:	68c2      	ldr	r2, [r0, #12]
 8011530:	f109 3bff 	add.w	fp, r9, #4294967295
 8011534:	4605      	mov	r5, r0
 8011536:	bb02      	cbnz	r2, 801157a <_dtoa_r+0xa62>
 8011538:	4601      	mov	r1, r0
 801153a:	ee18 0a10 	vmov	r0, s16
 801153e:	f000 fdcb 	bl	80120d8 <__mcmp>
 8011542:	4602      	mov	r2, r0
 8011544:	4629      	mov	r1, r5
 8011546:	4620      	mov	r0, r4
 8011548:	9207      	str	r2, [sp, #28]
 801154a:	f000 fb83 	bl	8011c54 <_Bfree>
 801154e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011552:	ea43 0102 	orr.w	r1, r3, r2
 8011556:	9b04      	ldr	r3, [sp, #16]
 8011558:	430b      	orrs	r3, r1
 801155a:	464d      	mov	r5, r9
 801155c:	d10f      	bne.n	801157e <_dtoa_r+0xa66>
 801155e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011562:	d02a      	beq.n	80115ba <_dtoa_r+0xaa2>
 8011564:	9b03      	ldr	r3, [sp, #12]
 8011566:	2b00      	cmp	r3, #0
 8011568:	dd02      	ble.n	8011570 <_dtoa_r+0xa58>
 801156a:	9b02      	ldr	r3, [sp, #8]
 801156c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011570:	f88b a000 	strb.w	sl, [fp]
 8011574:	e775      	b.n	8011462 <_dtoa_r+0x94a>
 8011576:	4638      	mov	r0, r7
 8011578:	e7ba      	b.n	80114f0 <_dtoa_r+0x9d8>
 801157a:	2201      	movs	r2, #1
 801157c:	e7e2      	b.n	8011544 <_dtoa_r+0xa2c>
 801157e:	9b03      	ldr	r3, [sp, #12]
 8011580:	2b00      	cmp	r3, #0
 8011582:	db04      	blt.n	801158e <_dtoa_r+0xa76>
 8011584:	9906      	ldr	r1, [sp, #24]
 8011586:	430b      	orrs	r3, r1
 8011588:	9904      	ldr	r1, [sp, #16]
 801158a:	430b      	orrs	r3, r1
 801158c:	d122      	bne.n	80115d4 <_dtoa_r+0xabc>
 801158e:	2a00      	cmp	r2, #0
 8011590:	ddee      	ble.n	8011570 <_dtoa_r+0xa58>
 8011592:	ee18 1a10 	vmov	r1, s16
 8011596:	2201      	movs	r2, #1
 8011598:	4620      	mov	r0, r4
 801159a:	f000 fd2d 	bl	8011ff8 <__lshift>
 801159e:	4631      	mov	r1, r6
 80115a0:	ee08 0a10 	vmov	s16, r0
 80115a4:	f000 fd98 	bl	80120d8 <__mcmp>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	dc03      	bgt.n	80115b4 <_dtoa_r+0xa9c>
 80115ac:	d1e0      	bne.n	8011570 <_dtoa_r+0xa58>
 80115ae:	f01a 0f01 	tst.w	sl, #1
 80115b2:	d0dd      	beq.n	8011570 <_dtoa_r+0xa58>
 80115b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115b8:	d1d7      	bne.n	801156a <_dtoa_r+0xa52>
 80115ba:	2339      	movs	r3, #57	; 0x39
 80115bc:	f88b 3000 	strb.w	r3, [fp]
 80115c0:	462b      	mov	r3, r5
 80115c2:	461d      	mov	r5, r3
 80115c4:	3b01      	subs	r3, #1
 80115c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80115ca:	2a39      	cmp	r2, #57	; 0x39
 80115cc:	d071      	beq.n	80116b2 <_dtoa_r+0xb9a>
 80115ce:	3201      	adds	r2, #1
 80115d0:	701a      	strb	r2, [r3, #0]
 80115d2:	e746      	b.n	8011462 <_dtoa_r+0x94a>
 80115d4:	2a00      	cmp	r2, #0
 80115d6:	dd07      	ble.n	80115e8 <_dtoa_r+0xad0>
 80115d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80115dc:	d0ed      	beq.n	80115ba <_dtoa_r+0xaa2>
 80115de:	f10a 0301 	add.w	r3, sl, #1
 80115e2:	f88b 3000 	strb.w	r3, [fp]
 80115e6:	e73c      	b.n	8011462 <_dtoa_r+0x94a>
 80115e8:	9b05      	ldr	r3, [sp, #20]
 80115ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80115ee:	4599      	cmp	r9, r3
 80115f0:	d047      	beq.n	8011682 <_dtoa_r+0xb6a>
 80115f2:	ee18 1a10 	vmov	r1, s16
 80115f6:	2300      	movs	r3, #0
 80115f8:	220a      	movs	r2, #10
 80115fa:	4620      	mov	r0, r4
 80115fc:	f000 fb4c 	bl	8011c98 <__multadd>
 8011600:	45b8      	cmp	r8, r7
 8011602:	ee08 0a10 	vmov	s16, r0
 8011606:	f04f 0300 	mov.w	r3, #0
 801160a:	f04f 020a 	mov.w	r2, #10
 801160e:	4641      	mov	r1, r8
 8011610:	4620      	mov	r0, r4
 8011612:	d106      	bne.n	8011622 <_dtoa_r+0xb0a>
 8011614:	f000 fb40 	bl	8011c98 <__multadd>
 8011618:	4680      	mov	r8, r0
 801161a:	4607      	mov	r7, r0
 801161c:	f109 0901 	add.w	r9, r9, #1
 8011620:	e772      	b.n	8011508 <_dtoa_r+0x9f0>
 8011622:	f000 fb39 	bl	8011c98 <__multadd>
 8011626:	4639      	mov	r1, r7
 8011628:	4680      	mov	r8, r0
 801162a:	2300      	movs	r3, #0
 801162c:	220a      	movs	r2, #10
 801162e:	4620      	mov	r0, r4
 8011630:	f000 fb32 	bl	8011c98 <__multadd>
 8011634:	4607      	mov	r7, r0
 8011636:	e7f1      	b.n	801161c <_dtoa_r+0xb04>
 8011638:	9b03      	ldr	r3, [sp, #12]
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	9d01      	ldr	r5, [sp, #4]
 801163e:	ee18 0a10 	vmov	r0, s16
 8011642:	4631      	mov	r1, r6
 8011644:	f7ff f9dc 	bl	8010a00 <quorem>
 8011648:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801164c:	9b01      	ldr	r3, [sp, #4]
 801164e:	f805 ab01 	strb.w	sl, [r5], #1
 8011652:	1aea      	subs	r2, r5, r3
 8011654:	9b02      	ldr	r3, [sp, #8]
 8011656:	4293      	cmp	r3, r2
 8011658:	dd09      	ble.n	801166e <_dtoa_r+0xb56>
 801165a:	ee18 1a10 	vmov	r1, s16
 801165e:	2300      	movs	r3, #0
 8011660:	220a      	movs	r2, #10
 8011662:	4620      	mov	r0, r4
 8011664:	f000 fb18 	bl	8011c98 <__multadd>
 8011668:	ee08 0a10 	vmov	s16, r0
 801166c:	e7e7      	b.n	801163e <_dtoa_r+0xb26>
 801166e:	9b02      	ldr	r3, [sp, #8]
 8011670:	2b00      	cmp	r3, #0
 8011672:	bfc8      	it	gt
 8011674:	461d      	movgt	r5, r3
 8011676:	9b01      	ldr	r3, [sp, #4]
 8011678:	bfd8      	it	le
 801167a:	2501      	movle	r5, #1
 801167c:	441d      	add	r5, r3
 801167e:	f04f 0800 	mov.w	r8, #0
 8011682:	ee18 1a10 	vmov	r1, s16
 8011686:	2201      	movs	r2, #1
 8011688:	4620      	mov	r0, r4
 801168a:	f000 fcb5 	bl	8011ff8 <__lshift>
 801168e:	4631      	mov	r1, r6
 8011690:	ee08 0a10 	vmov	s16, r0
 8011694:	f000 fd20 	bl	80120d8 <__mcmp>
 8011698:	2800      	cmp	r0, #0
 801169a:	dc91      	bgt.n	80115c0 <_dtoa_r+0xaa8>
 801169c:	d102      	bne.n	80116a4 <_dtoa_r+0xb8c>
 801169e:	f01a 0f01 	tst.w	sl, #1
 80116a2:	d18d      	bne.n	80115c0 <_dtoa_r+0xaa8>
 80116a4:	462b      	mov	r3, r5
 80116a6:	461d      	mov	r5, r3
 80116a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116ac:	2a30      	cmp	r2, #48	; 0x30
 80116ae:	d0fa      	beq.n	80116a6 <_dtoa_r+0xb8e>
 80116b0:	e6d7      	b.n	8011462 <_dtoa_r+0x94a>
 80116b2:	9a01      	ldr	r2, [sp, #4]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d184      	bne.n	80115c2 <_dtoa_r+0xaaa>
 80116b8:	9b00      	ldr	r3, [sp, #0]
 80116ba:	3301      	adds	r3, #1
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	2331      	movs	r3, #49	; 0x31
 80116c0:	7013      	strb	r3, [r2, #0]
 80116c2:	e6ce      	b.n	8011462 <_dtoa_r+0x94a>
 80116c4:	4b09      	ldr	r3, [pc, #36]	; (80116ec <_dtoa_r+0xbd4>)
 80116c6:	f7ff ba95 	b.w	8010bf4 <_dtoa_r+0xdc>
 80116ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f47f aa6e 	bne.w	8010bae <_dtoa_r+0x96>
 80116d2:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <_dtoa_r+0xbd8>)
 80116d4:	f7ff ba8e 	b.w	8010bf4 <_dtoa_r+0xdc>
 80116d8:	9b02      	ldr	r3, [sp, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dcae      	bgt.n	801163c <_dtoa_r+0xb24>
 80116de:	9b06      	ldr	r3, [sp, #24]
 80116e0:	2b02      	cmp	r3, #2
 80116e2:	f73f aea8 	bgt.w	8011436 <_dtoa_r+0x91e>
 80116e6:	e7a9      	b.n	801163c <_dtoa_r+0xb24>
 80116e8:	0802e755 	.word	0x0802e755
 80116ec:	0802e5b1 	.word	0x0802e5b1
 80116f0:	0802e6d6 	.word	0x0802e6d6

080116f4 <__sflush_r>:
 80116f4:	898a      	ldrh	r2, [r1, #12]
 80116f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116fa:	4605      	mov	r5, r0
 80116fc:	0710      	lsls	r0, r2, #28
 80116fe:	460c      	mov	r4, r1
 8011700:	d458      	bmi.n	80117b4 <__sflush_r+0xc0>
 8011702:	684b      	ldr	r3, [r1, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	dc05      	bgt.n	8011714 <__sflush_r+0x20>
 8011708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801170a:	2b00      	cmp	r3, #0
 801170c:	dc02      	bgt.n	8011714 <__sflush_r+0x20>
 801170e:	2000      	movs	r0, #0
 8011710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011716:	2e00      	cmp	r6, #0
 8011718:	d0f9      	beq.n	801170e <__sflush_r+0x1a>
 801171a:	2300      	movs	r3, #0
 801171c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011720:	682f      	ldr	r7, [r5, #0]
 8011722:	602b      	str	r3, [r5, #0]
 8011724:	d032      	beq.n	801178c <__sflush_r+0x98>
 8011726:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011728:	89a3      	ldrh	r3, [r4, #12]
 801172a:	075a      	lsls	r2, r3, #29
 801172c:	d505      	bpl.n	801173a <__sflush_r+0x46>
 801172e:	6863      	ldr	r3, [r4, #4]
 8011730:	1ac0      	subs	r0, r0, r3
 8011732:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011734:	b10b      	cbz	r3, 801173a <__sflush_r+0x46>
 8011736:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011738:	1ac0      	subs	r0, r0, r3
 801173a:	2300      	movs	r3, #0
 801173c:	4602      	mov	r2, r0
 801173e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011740:	6a21      	ldr	r1, [r4, #32]
 8011742:	4628      	mov	r0, r5
 8011744:	47b0      	blx	r6
 8011746:	1c43      	adds	r3, r0, #1
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	d106      	bne.n	801175a <__sflush_r+0x66>
 801174c:	6829      	ldr	r1, [r5, #0]
 801174e:	291d      	cmp	r1, #29
 8011750:	d82c      	bhi.n	80117ac <__sflush_r+0xb8>
 8011752:	4a2a      	ldr	r2, [pc, #168]	; (80117fc <__sflush_r+0x108>)
 8011754:	40ca      	lsrs	r2, r1
 8011756:	07d6      	lsls	r6, r2, #31
 8011758:	d528      	bpl.n	80117ac <__sflush_r+0xb8>
 801175a:	2200      	movs	r2, #0
 801175c:	6062      	str	r2, [r4, #4]
 801175e:	04d9      	lsls	r1, r3, #19
 8011760:	6922      	ldr	r2, [r4, #16]
 8011762:	6022      	str	r2, [r4, #0]
 8011764:	d504      	bpl.n	8011770 <__sflush_r+0x7c>
 8011766:	1c42      	adds	r2, r0, #1
 8011768:	d101      	bne.n	801176e <__sflush_r+0x7a>
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	b903      	cbnz	r3, 8011770 <__sflush_r+0x7c>
 801176e:	6560      	str	r0, [r4, #84]	; 0x54
 8011770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011772:	602f      	str	r7, [r5, #0]
 8011774:	2900      	cmp	r1, #0
 8011776:	d0ca      	beq.n	801170e <__sflush_r+0x1a>
 8011778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801177c:	4299      	cmp	r1, r3
 801177e:	d002      	beq.n	8011786 <__sflush_r+0x92>
 8011780:	4628      	mov	r0, r5
 8011782:	f7fe f929 	bl	800f9d8 <_free_r>
 8011786:	2000      	movs	r0, #0
 8011788:	6360      	str	r0, [r4, #52]	; 0x34
 801178a:	e7c1      	b.n	8011710 <__sflush_r+0x1c>
 801178c:	6a21      	ldr	r1, [r4, #32]
 801178e:	2301      	movs	r3, #1
 8011790:	4628      	mov	r0, r5
 8011792:	47b0      	blx	r6
 8011794:	1c41      	adds	r1, r0, #1
 8011796:	d1c7      	bne.n	8011728 <__sflush_r+0x34>
 8011798:	682b      	ldr	r3, [r5, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d0c4      	beq.n	8011728 <__sflush_r+0x34>
 801179e:	2b1d      	cmp	r3, #29
 80117a0:	d001      	beq.n	80117a6 <__sflush_r+0xb2>
 80117a2:	2b16      	cmp	r3, #22
 80117a4:	d101      	bne.n	80117aa <__sflush_r+0xb6>
 80117a6:	602f      	str	r7, [r5, #0]
 80117a8:	e7b1      	b.n	801170e <__sflush_r+0x1a>
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b0:	81a3      	strh	r3, [r4, #12]
 80117b2:	e7ad      	b.n	8011710 <__sflush_r+0x1c>
 80117b4:	690f      	ldr	r7, [r1, #16]
 80117b6:	2f00      	cmp	r7, #0
 80117b8:	d0a9      	beq.n	801170e <__sflush_r+0x1a>
 80117ba:	0793      	lsls	r3, r2, #30
 80117bc:	680e      	ldr	r6, [r1, #0]
 80117be:	bf08      	it	eq
 80117c0:	694b      	ldreq	r3, [r1, #20]
 80117c2:	600f      	str	r7, [r1, #0]
 80117c4:	bf18      	it	ne
 80117c6:	2300      	movne	r3, #0
 80117c8:	eba6 0807 	sub.w	r8, r6, r7
 80117cc:	608b      	str	r3, [r1, #8]
 80117ce:	f1b8 0f00 	cmp.w	r8, #0
 80117d2:	dd9c      	ble.n	801170e <__sflush_r+0x1a>
 80117d4:	6a21      	ldr	r1, [r4, #32]
 80117d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80117d8:	4643      	mov	r3, r8
 80117da:	463a      	mov	r2, r7
 80117dc:	4628      	mov	r0, r5
 80117de:	47b0      	blx	r6
 80117e0:	2800      	cmp	r0, #0
 80117e2:	dc06      	bgt.n	80117f2 <__sflush_r+0xfe>
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117ea:	81a3      	strh	r3, [r4, #12]
 80117ec:	f04f 30ff 	mov.w	r0, #4294967295
 80117f0:	e78e      	b.n	8011710 <__sflush_r+0x1c>
 80117f2:	4407      	add	r7, r0
 80117f4:	eba8 0800 	sub.w	r8, r8, r0
 80117f8:	e7e9      	b.n	80117ce <__sflush_r+0xda>
 80117fa:	bf00      	nop
 80117fc:	20400001 	.word	0x20400001

08011800 <_fflush_r>:
 8011800:	b538      	push	{r3, r4, r5, lr}
 8011802:	690b      	ldr	r3, [r1, #16]
 8011804:	4605      	mov	r5, r0
 8011806:	460c      	mov	r4, r1
 8011808:	b913      	cbnz	r3, 8011810 <_fflush_r+0x10>
 801180a:	2500      	movs	r5, #0
 801180c:	4628      	mov	r0, r5
 801180e:	bd38      	pop	{r3, r4, r5, pc}
 8011810:	b118      	cbz	r0, 801181a <_fflush_r+0x1a>
 8011812:	6983      	ldr	r3, [r0, #24]
 8011814:	b90b      	cbnz	r3, 801181a <_fflush_r+0x1a>
 8011816:	f000 f887 	bl	8011928 <__sinit>
 801181a:	4b14      	ldr	r3, [pc, #80]	; (801186c <_fflush_r+0x6c>)
 801181c:	429c      	cmp	r4, r3
 801181e:	d11b      	bne.n	8011858 <_fflush_r+0x58>
 8011820:	686c      	ldr	r4, [r5, #4]
 8011822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d0ef      	beq.n	801180a <_fflush_r+0xa>
 801182a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801182c:	07d0      	lsls	r0, r2, #31
 801182e:	d404      	bmi.n	801183a <_fflush_r+0x3a>
 8011830:	0599      	lsls	r1, r3, #22
 8011832:	d402      	bmi.n	801183a <_fflush_r+0x3a>
 8011834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011836:	f000 f91a 	bl	8011a6e <__retarget_lock_acquire_recursive>
 801183a:	4628      	mov	r0, r5
 801183c:	4621      	mov	r1, r4
 801183e:	f7ff ff59 	bl	80116f4 <__sflush_r>
 8011842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011844:	07da      	lsls	r2, r3, #31
 8011846:	4605      	mov	r5, r0
 8011848:	d4e0      	bmi.n	801180c <_fflush_r+0xc>
 801184a:	89a3      	ldrh	r3, [r4, #12]
 801184c:	059b      	lsls	r3, r3, #22
 801184e:	d4dd      	bmi.n	801180c <_fflush_r+0xc>
 8011850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011852:	f000 f90d 	bl	8011a70 <__retarget_lock_release_recursive>
 8011856:	e7d9      	b.n	801180c <_fflush_r+0xc>
 8011858:	4b05      	ldr	r3, [pc, #20]	; (8011870 <_fflush_r+0x70>)
 801185a:	429c      	cmp	r4, r3
 801185c:	d101      	bne.n	8011862 <_fflush_r+0x62>
 801185e:	68ac      	ldr	r4, [r5, #8]
 8011860:	e7df      	b.n	8011822 <_fflush_r+0x22>
 8011862:	4b04      	ldr	r3, [pc, #16]	; (8011874 <_fflush_r+0x74>)
 8011864:	429c      	cmp	r4, r3
 8011866:	bf08      	it	eq
 8011868:	68ec      	ldreq	r4, [r5, #12]
 801186a:	e7da      	b.n	8011822 <_fflush_r+0x22>
 801186c:	0802e788 	.word	0x0802e788
 8011870:	0802e7a8 	.word	0x0802e7a8
 8011874:	0802e768 	.word	0x0802e768

08011878 <std>:
 8011878:	2300      	movs	r3, #0
 801187a:	b510      	push	{r4, lr}
 801187c:	4604      	mov	r4, r0
 801187e:	e9c0 3300 	strd	r3, r3, [r0]
 8011882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011886:	6083      	str	r3, [r0, #8]
 8011888:	8181      	strh	r1, [r0, #12]
 801188a:	6643      	str	r3, [r0, #100]	; 0x64
 801188c:	81c2      	strh	r2, [r0, #14]
 801188e:	6183      	str	r3, [r0, #24]
 8011890:	4619      	mov	r1, r3
 8011892:	2208      	movs	r2, #8
 8011894:	305c      	adds	r0, #92	; 0x5c
 8011896:	f7fe f897 	bl	800f9c8 <memset>
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <std+0x38>)
 801189c:	6263      	str	r3, [r4, #36]	; 0x24
 801189e:	4b05      	ldr	r3, [pc, #20]	; (80118b4 <std+0x3c>)
 80118a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <std+0x40>)
 80118a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118a6:	4b05      	ldr	r3, [pc, #20]	; (80118bc <std+0x44>)
 80118a8:	6224      	str	r4, [r4, #32]
 80118aa:	6323      	str	r3, [r4, #48]	; 0x30
 80118ac:	bd10      	pop	{r4, pc}
 80118ae:	bf00      	nop
 80118b0:	08010781 	.word	0x08010781
 80118b4:	080107a3 	.word	0x080107a3
 80118b8:	080107db 	.word	0x080107db
 80118bc:	080107ff 	.word	0x080107ff

080118c0 <_cleanup_r>:
 80118c0:	4901      	ldr	r1, [pc, #4]	; (80118c8 <_cleanup_r+0x8>)
 80118c2:	f000 b8af 	b.w	8011a24 <_fwalk_reent>
 80118c6:	bf00      	nop
 80118c8:	08011801 	.word	0x08011801

080118cc <__sfmoreglue>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	2268      	movs	r2, #104	; 0x68
 80118d0:	1e4d      	subs	r5, r1, #1
 80118d2:	4355      	muls	r5, r2
 80118d4:	460e      	mov	r6, r1
 80118d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80118da:	f7fe f8e9 	bl	800fab0 <_malloc_r>
 80118de:	4604      	mov	r4, r0
 80118e0:	b140      	cbz	r0, 80118f4 <__sfmoreglue+0x28>
 80118e2:	2100      	movs	r1, #0
 80118e4:	e9c0 1600 	strd	r1, r6, [r0]
 80118e8:	300c      	adds	r0, #12
 80118ea:	60a0      	str	r0, [r4, #8]
 80118ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80118f0:	f7fe f86a 	bl	800f9c8 <memset>
 80118f4:	4620      	mov	r0, r4
 80118f6:	bd70      	pop	{r4, r5, r6, pc}

080118f8 <__sfp_lock_acquire>:
 80118f8:	4801      	ldr	r0, [pc, #4]	; (8011900 <__sfp_lock_acquire+0x8>)
 80118fa:	f000 b8b8 	b.w	8011a6e <__retarget_lock_acquire_recursive>
 80118fe:	bf00      	nop
 8011900:	20005c85 	.word	0x20005c85

08011904 <__sfp_lock_release>:
 8011904:	4801      	ldr	r0, [pc, #4]	; (801190c <__sfp_lock_release+0x8>)
 8011906:	f000 b8b3 	b.w	8011a70 <__retarget_lock_release_recursive>
 801190a:	bf00      	nop
 801190c:	20005c85 	.word	0x20005c85

08011910 <__sinit_lock_acquire>:
 8011910:	4801      	ldr	r0, [pc, #4]	; (8011918 <__sinit_lock_acquire+0x8>)
 8011912:	f000 b8ac 	b.w	8011a6e <__retarget_lock_acquire_recursive>
 8011916:	bf00      	nop
 8011918:	20005c86 	.word	0x20005c86

0801191c <__sinit_lock_release>:
 801191c:	4801      	ldr	r0, [pc, #4]	; (8011924 <__sinit_lock_release+0x8>)
 801191e:	f000 b8a7 	b.w	8011a70 <__retarget_lock_release_recursive>
 8011922:	bf00      	nop
 8011924:	20005c86 	.word	0x20005c86

08011928 <__sinit>:
 8011928:	b510      	push	{r4, lr}
 801192a:	4604      	mov	r4, r0
 801192c:	f7ff fff0 	bl	8011910 <__sinit_lock_acquire>
 8011930:	69a3      	ldr	r3, [r4, #24]
 8011932:	b11b      	cbz	r3, 801193c <__sinit+0x14>
 8011934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011938:	f7ff bff0 	b.w	801191c <__sinit_lock_release>
 801193c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011940:	6523      	str	r3, [r4, #80]	; 0x50
 8011942:	4b13      	ldr	r3, [pc, #76]	; (8011990 <__sinit+0x68>)
 8011944:	4a13      	ldr	r2, [pc, #76]	; (8011994 <__sinit+0x6c>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	62a2      	str	r2, [r4, #40]	; 0x28
 801194a:	42a3      	cmp	r3, r4
 801194c:	bf04      	itt	eq
 801194e:	2301      	moveq	r3, #1
 8011950:	61a3      	streq	r3, [r4, #24]
 8011952:	4620      	mov	r0, r4
 8011954:	f000 f820 	bl	8011998 <__sfp>
 8011958:	6060      	str	r0, [r4, #4]
 801195a:	4620      	mov	r0, r4
 801195c:	f000 f81c 	bl	8011998 <__sfp>
 8011960:	60a0      	str	r0, [r4, #8]
 8011962:	4620      	mov	r0, r4
 8011964:	f000 f818 	bl	8011998 <__sfp>
 8011968:	2200      	movs	r2, #0
 801196a:	60e0      	str	r0, [r4, #12]
 801196c:	2104      	movs	r1, #4
 801196e:	6860      	ldr	r0, [r4, #4]
 8011970:	f7ff ff82 	bl	8011878 <std>
 8011974:	68a0      	ldr	r0, [r4, #8]
 8011976:	2201      	movs	r2, #1
 8011978:	2109      	movs	r1, #9
 801197a:	f7ff ff7d 	bl	8011878 <std>
 801197e:	68e0      	ldr	r0, [r4, #12]
 8011980:	2202      	movs	r2, #2
 8011982:	2112      	movs	r1, #18
 8011984:	f7ff ff78 	bl	8011878 <std>
 8011988:	2301      	movs	r3, #1
 801198a:	61a3      	str	r3, [r4, #24]
 801198c:	e7d2      	b.n	8011934 <__sinit+0xc>
 801198e:	bf00      	nop
 8011990:	0802e58c 	.word	0x0802e58c
 8011994:	080118c1 	.word	0x080118c1

08011998 <__sfp>:
 8011998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199a:	4607      	mov	r7, r0
 801199c:	f7ff ffac 	bl	80118f8 <__sfp_lock_acquire>
 80119a0:	4b1e      	ldr	r3, [pc, #120]	; (8011a1c <__sfp+0x84>)
 80119a2:	681e      	ldr	r6, [r3, #0]
 80119a4:	69b3      	ldr	r3, [r6, #24]
 80119a6:	b913      	cbnz	r3, 80119ae <__sfp+0x16>
 80119a8:	4630      	mov	r0, r6
 80119aa:	f7ff ffbd 	bl	8011928 <__sinit>
 80119ae:	3648      	adds	r6, #72	; 0x48
 80119b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80119b4:	3b01      	subs	r3, #1
 80119b6:	d503      	bpl.n	80119c0 <__sfp+0x28>
 80119b8:	6833      	ldr	r3, [r6, #0]
 80119ba:	b30b      	cbz	r3, 8011a00 <__sfp+0x68>
 80119bc:	6836      	ldr	r6, [r6, #0]
 80119be:	e7f7      	b.n	80119b0 <__sfp+0x18>
 80119c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80119c4:	b9d5      	cbnz	r5, 80119fc <__sfp+0x64>
 80119c6:	4b16      	ldr	r3, [pc, #88]	; (8011a20 <__sfp+0x88>)
 80119c8:	60e3      	str	r3, [r4, #12]
 80119ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119ce:	6665      	str	r5, [r4, #100]	; 0x64
 80119d0:	f000 f84c 	bl	8011a6c <__retarget_lock_init_recursive>
 80119d4:	f7ff ff96 	bl	8011904 <__sfp_lock_release>
 80119d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80119dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80119e0:	6025      	str	r5, [r4, #0]
 80119e2:	61a5      	str	r5, [r4, #24]
 80119e4:	2208      	movs	r2, #8
 80119e6:	4629      	mov	r1, r5
 80119e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80119ec:	f7fd ffec 	bl	800f9c8 <memset>
 80119f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80119f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80119f8:	4620      	mov	r0, r4
 80119fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119fc:	3468      	adds	r4, #104	; 0x68
 80119fe:	e7d9      	b.n	80119b4 <__sfp+0x1c>
 8011a00:	2104      	movs	r1, #4
 8011a02:	4638      	mov	r0, r7
 8011a04:	f7ff ff62 	bl	80118cc <__sfmoreglue>
 8011a08:	4604      	mov	r4, r0
 8011a0a:	6030      	str	r0, [r6, #0]
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d1d5      	bne.n	80119bc <__sfp+0x24>
 8011a10:	f7ff ff78 	bl	8011904 <__sfp_lock_release>
 8011a14:	230c      	movs	r3, #12
 8011a16:	603b      	str	r3, [r7, #0]
 8011a18:	e7ee      	b.n	80119f8 <__sfp+0x60>
 8011a1a:	bf00      	nop
 8011a1c:	0802e58c 	.word	0x0802e58c
 8011a20:	ffff0001 	.word	0xffff0001

08011a24 <_fwalk_reent>:
 8011a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a28:	4606      	mov	r6, r0
 8011a2a:	4688      	mov	r8, r1
 8011a2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a30:	2700      	movs	r7, #0
 8011a32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a36:	f1b9 0901 	subs.w	r9, r9, #1
 8011a3a:	d505      	bpl.n	8011a48 <_fwalk_reent+0x24>
 8011a3c:	6824      	ldr	r4, [r4, #0]
 8011a3e:	2c00      	cmp	r4, #0
 8011a40:	d1f7      	bne.n	8011a32 <_fwalk_reent+0xe>
 8011a42:	4638      	mov	r0, r7
 8011a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a48:	89ab      	ldrh	r3, [r5, #12]
 8011a4a:	2b01      	cmp	r3, #1
 8011a4c:	d907      	bls.n	8011a5e <_fwalk_reent+0x3a>
 8011a4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a52:	3301      	adds	r3, #1
 8011a54:	d003      	beq.n	8011a5e <_fwalk_reent+0x3a>
 8011a56:	4629      	mov	r1, r5
 8011a58:	4630      	mov	r0, r6
 8011a5a:	47c0      	blx	r8
 8011a5c:	4307      	orrs	r7, r0
 8011a5e:	3568      	adds	r5, #104	; 0x68
 8011a60:	e7e9      	b.n	8011a36 <_fwalk_reent+0x12>
	...

08011a64 <_localeconv_r>:
 8011a64:	4800      	ldr	r0, [pc, #0]	; (8011a68 <_localeconv_r+0x4>)
 8011a66:	4770      	bx	lr
 8011a68:	2000024c 	.word	0x2000024c

08011a6c <__retarget_lock_init_recursive>:
 8011a6c:	4770      	bx	lr

08011a6e <__retarget_lock_acquire_recursive>:
 8011a6e:	4770      	bx	lr

08011a70 <__retarget_lock_release_recursive>:
 8011a70:	4770      	bx	lr
	...

08011a74 <_lseek_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4d07      	ldr	r5, [pc, #28]	; (8011a94 <_lseek_r+0x20>)
 8011a78:	4604      	mov	r4, r0
 8011a7a:	4608      	mov	r0, r1
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	2200      	movs	r2, #0
 8011a80:	602a      	str	r2, [r5, #0]
 8011a82:	461a      	mov	r2, r3
 8011a84:	f7f3 f8f4 	bl	8004c70 <_lseek>
 8011a88:	1c43      	adds	r3, r0, #1
 8011a8a:	d102      	bne.n	8011a92 <_lseek_r+0x1e>
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	b103      	cbz	r3, 8011a92 <_lseek_r+0x1e>
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	bd38      	pop	{r3, r4, r5, pc}
 8011a94:	20005c88 	.word	0x20005c88

08011a98 <__swhatbuf_r>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	460e      	mov	r6, r1
 8011a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa0:	2900      	cmp	r1, #0
 8011aa2:	b096      	sub	sp, #88	; 0x58
 8011aa4:	4614      	mov	r4, r2
 8011aa6:	461d      	mov	r5, r3
 8011aa8:	da08      	bge.n	8011abc <__swhatbuf_r+0x24>
 8011aaa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	602a      	str	r2, [r5, #0]
 8011ab2:	061a      	lsls	r2, r3, #24
 8011ab4:	d410      	bmi.n	8011ad8 <__swhatbuf_r+0x40>
 8011ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011aba:	e00e      	b.n	8011ada <__swhatbuf_r+0x42>
 8011abc:	466a      	mov	r2, sp
 8011abe:	f000 fe11 	bl	80126e4 <_fstat_r>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	dbf1      	blt.n	8011aaa <__swhatbuf_r+0x12>
 8011ac6:	9a01      	ldr	r2, [sp, #4]
 8011ac8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011acc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ad0:	425a      	negs	r2, r3
 8011ad2:	415a      	adcs	r2, r3
 8011ad4:	602a      	str	r2, [r5, #0]
 8011ad6:	e7ee      	b.n	8011ab6 <__swhatbuf_r+0x1e>
 8011ad8:	2340      	movs	r3, #64	; 0x40
 8011ada:	2000      	movs	r0, #0
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	b016      	add	sp, #88	; 0x58
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ae4 <__smakebuf_r>:
 8011ae4:	898b      	ldrh	r3, [r1, #12]
 8011ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ae8:	079d      	lsls	r5, r3, #30
 8011aea:	4606      	mov	r6, r0
 8011aec:	460c      	mov	r4, r1
 8011aee:	d507      	bpl.n	8011b00 <__smakebuf_r+0x1c>
 8011af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011af4:	6023      	str	r3, [r4, #0]
 8011af6:	6123      	str	r3, [r4, #16]
 8011af8:	2301      	movs	r3, #1
 8011afa:	6163      	str	r3, [r4, #20]
 8011afc:	b002      	add	sp, #8
 8011afe:	bd70      	pop	{r4, r5, r6, pc}
 8011b00:	ab01      	add	r3, sp, #4
 8011b02:	466a      	mov	r2, sp
 8011b04:	f7ff ffc8 	bl	8011a98 <__swhatbuf_r>
 8011b08:	9900      	ldr	r1, [sp, #0]
 8011b0a:	4605      	mov	r5, r0
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f7fd ffcf 	bl	800fab0 <_malloc_r>
 8011b12:	b948      	cbnz	r0, 8011b28 <__smakebuf_r+0x44>
 8011b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b18:	059a      	lsls	r2, r3, #22
 8011b1a:	d4ef      	bmi.n	8011afc <__smakebuf_r+0x18>
 8011b1c:	f023 0303 	bic.w	r3, r3, #3
 8011b20:	f043 0302 	orr.w	r3, r3, #2
 8011b24:	81a3      	strh	r3, [r4, #12]
 8011b26:	e7e3      	b.n	8011af0 <__smakebuf_r+0xc>
 8011b28:	4b0d      	ldr	r3, [pc, #52]	; (8011b60 <__smakebuf_r+0x7c>)
 8011b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	6020      	str	r0, [r4, #0]
 8011b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b34:	81a3      	strh	r3, [r4, #12]
 8011b36:	9b00      	ldr	r3, [sp, #0]
 8011b38:	6163      	str	r3, [r4, #20]
 8011b3a:	9b01      	ldr	r3, [sp, #4]
 8011b3c:	6120      	str	r0, [r4, #16]
 8011b3e:	b15b      	cbz	r3, 8011b58 <__smakebuf_r+0x74>
 8011b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b44:	4630      	mov	r0, r6
 8011b46:	f000 fddf 	bl	8012708 <_isatty_r>
 8011b4a:	b128      	cbz	r0, 8011b58 <__smakebuf_r+0x74>
 8011b4c:	89a3      	ldrh	r3, [r4, #12]
 8011b4e:	f023 0303 	bic.w	r3, r3, #3
 8011b52:	f043 0301 	orr.w	r3, r3, #1
 8011b56:	81a3      	strh	r3, [r4, #12]
 8011b58:	89a0      	ldrh	r0, [r4, #12]
 8011b5a:	4305      	orrs	r5, r0
 8011b5c:	81a5      	strh	r5, [r4, #12]
 8011b5e:	e7cd      	b.n	8011afc <__smakebuf_r+0x18>
 8011b60:	080118c1 	.word	0x080118c1

08011b64 <__ascii_mbtowc>:
 8011b64:	b082      	sub	sp, #8
 8011b66:	b901      	cbnz	r1, 8011b6a <__ascii_mbtowc+0x6>
 8011b68:	a901      	add	r1, sp, #4
 8011b6a:	b142      	cbz	r2, 8011b7e <__ascii_mbtowc+0x1a>
 8011b6c:	b14b      	cbz	r3, 8011b82 <__ascii_mbtowc+0x1e>
 8011b6e:	7813      	ldrb	r3, [r2, #0]
 8011b70:	600b      	str	r3, [r1, #0]
 8011b72:	7812      	ldrb	r2, [r2, #0]
 8011b74:	1e10      	subs	r0, r2, #0
 8011b76:	bf18      	it	ne
 8011b78:	2001      	movne	r0, #1
 8011b7a:	b002      	add	sp, #8
 8011b7c:	4770      	bx	lr
 8011b7e:	4610      	mov	r0, r2
 8011b80:	e7fb      	b.n	8011b7a <__ascii_mbtowc+0x16>
 8011b82:	f06f 0001 	mvn.w	r0, #1
 8011b86:	e7f8      	b.n	8011b7a <__ascii_mbtowc+0x16>

08011b88 <memmove>:
 8011b88:	4288      	cmp	r0, r1
 8011b8a:	b510      	push	{r4, lr}
 8011b8c:	eb01 0402 	add.w	r4, r1, r2
 8011b90:	d902      	bls.n	8011b98 <memmove+0x10>
 8011b92:	4284      	cmp	r4, r0
 8011b94:	4623      	mov	r3, r4
 8011b96:	d807      	bhi.n	8011ba8 <memmove+0x20>
 8011b98:	1e43      	subs	r3, r0, #1
 8011b9a:	42a1      	cmp	r1, r4
 8011b9c:	d008      	beq.n	8011bb0 <memmove+0x28>
 8011b9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ba6:	e7f8      	b.n	8011b9a <memmove+0x12>
 8011ba8:	4402      	add	r2, r0
 8011baa:	4601      	mov	r1, r0
 8011bac:	428a      	cmp	r2, r1
 8011bae:	d100      	bne.n	8011bb2 <memmove+0x2a>
 8011bb0:	bd10      	pop	{r4, pc}
 8011bb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bba:	e7f7      	b.n	8011bac <memmove+0x24>

08011bbc <__malloc_lock>:
 8011bbc:	4801      	ldr	r0, [pc, #4]	; (8011bc4 <__malloc_lock+0x8>)
 8011bbe:	f7ff bf56 	b.w	8011a6e <__retarget_lock_acquire_recursive>
 8011bc2:	bf00      	nop
 8011bc4:	20005c84 	.word	0x20005c84

08011bc8 <__malloc_unlock>:
 8011bc8:	4801      	ldr	r0, [pc, #4]	; (8011bd0 <__malloc_unlock+0x8>)
 8011bca:	f7ff bf51 	b.w	8011a70 <__retarget_lock_release_recursive>
 8011bce:	bf00      	nop
 8011bd0:	20005c84 	.word	0x20005c84

08011bd4 <_Balloc>:
 8011bd4:	b570      	push	{r4, r5, r6, lr}
 8011bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011bd8:	4604      	mov	r4, r0
 8011bda:	460d      	mov	r5, r1
 8011bdc:	b976      	cbnz	r6, 8011bfc <_Balloc+0x28>
 8011bde:	2010      	movs	r0, #16
 8011be0:	f7fd fed4 	bl	800f98c <malloc>
 8011be4:	4602      	mov	r2, r0
 8011be6:	6260      	str	r0, [r4, #36]	; 0x24
 8011be8:	b920      	cbnz	r0, 8011bf4 <_Balloc+0x20>
 8011bea:	4b18      	ldr	r3, [pc, #96]	; (8011c4c <_Balloc+0x78>)
 8011bec:	4818      	ldr	r0, [pc, #96]	; (8011c50 <_Balloc+0x7c>)
 8011bee:	2166      	movs	r1, #102	; 0x66
 8011bf0:	f7fd fe72 	bl	800f8d8 <__assert_func>
 8011bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011bf8:	6006      	str	r6, [r0, #0]
 8011bfa:	60c6      	str	r6, [r0, #12]
 8011bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011bfe:	68f3      	ldr	r3, [r6, #12]
 8011c00:	b183      	cbz	r3, 8011c24 <_Balloc+0x50>
 8011c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c0a:	b9b8      	cbnz	r0, 8011c3c <_Balloc+0x68>
 8011c0c:	2101      	movs	r1, #1
 8011c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8011c12:	1d72      	adds	r2, r6, #5
 8011c14:	0092      	lsls	r2, r2, #2
 8011c16:	4620      	mov	r0, r4
 8011c18:	f000 fb60 	bl	80122dc <_calloc_r>
 8011c1c:	b160      	cbz	r0, 8011c38 <_Balloc+0x64>
 8011c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c22:	e00e      	b.n	8011c42 <_Balloc+0x6e>
 8011c24:	2221      	movs	r2, #33	; 0x21
 8011c26:	2104      	movs	r1, #4
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f000 fb57 	bl	80122dc <_calloc_r>
 8011c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c30:	60f0      	str	r0, [r6, #12]
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1e4      	bne.n	8011c02 <_Balloc+0x2e>
 8011c38:	2000      	movs	r0, #0
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}
 8011c3c:	6802      	ldr	r2, [r0, #0]
 8011c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c42:	2300      	movs	r3, #0
 8011c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c48:	e7f7      	b.n	8011c3a <_Balloc+0x66>
 8011c4a:	bf00      	nop
 8011c4c:	0802e6e3 	.word	0x0802e6e3
 8011c50:	0802e7d2 	.word	0x0802e7d2

08011c54 <_Bfree>:
 8011c54:	b570      	push	{r4, r5, r6, lr}
 8011c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c58:	4605      	mov	r5, r0
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	b976      	cbnz	r6, 8011c7c <_Bfree+0x28>
 8011c5e:	2010      	movs	r0, #16
 8011c60:	f7fd fe94 	bl	800f98c <malloc>
 8011c64:	4602      	mov	r2, r0
 8011c66:	6268      	str	r0, [r5, #36]	; 0x24
 8011c68:	b920      	cbnz	r0, 8011c74 <_Bfree+0x20>
 8011c6a:	4b09      	ldr	r3, [pc, #36]	; (8011c90 <_Bfree+0x3c>)
 8011c6c:	4809      	ldr	r0, [pc, #36]	; (8011c94 <_Bfree+0x40>)
 8011c6e:	218a      	movs	r1, #138	; 0x8a
 8011c70:	f7fd fe32 	bl	800f8d8 <__assert_func>
 8011c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c78:	6006      	str	r6, [r0, #0]
 8011c7a:	60c6      	str	r6, [r0, #12]
 8011c7c:	b13c      	cbz	r4, 8011c8e <_Bfree+0x3a>
 8011c7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011c80:	6862      	ldr	r2, [r4, #4]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c88:	6021      	str	r1, [r4, #0]
 8011c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c8e:	bd70      	pop	{r4, r5, r6, pc}
 8011c90:	0802e6e3 	.word	0x0802e6e3
 8011c94:	0802e7d2 	.word	0x0802e7d2

08011c98 <__multadd>:
 8011c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c9c:	690d      	ldr	r5, [r1, #16]
 8011c9e:	4607      	mov	r7, r0
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	461e      	mov	r6, r3
 8011ca4:	f101 0c14 	add.w	ip, r1, #20
 8011ca8:	2000      	movs	r0, #0
 8011caa:	f8dc 3000 	ldr.w	r3, [ip]
 8011cae:	b299      	uxth	r1, r3
 8011cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8011cb4:	0c1e      	lsrs	r6, r3, #16
 8011cb6:	0c0b      	lsrs	r3, r1, #16
 8011cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8011cbc:	b289      	uxth	r1, r1
 8011cbe:	3001      	adds	r0, #1
 8011cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011cc4:	4285      	cmp	r5, r0
 8011cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8011cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011cce:	dcec      	bgt.n	8011caa <__multadd+0x12>
 8011cd0:	b30e      	cbz	r6, 8011d16 <__multadd+0x7e>
 8011cd2:	68a3      	ldr	r3, [r4, #8]
 8011cd4:	42ab      	cmp	r3, r5
 8011cd6:	dc19      	bgt.n	8011d0c <__multadd+0x74>
 8011cd8:	6861      	ldr	r1, [r4, #4]
 8011cda:	4638      	mov	r0, r7
 8011cdc:	3101      	adds	r1, #1
 8011cde:	f7ff ff79 	bl	8011bd4 <_Balloc>
 8011ce2:	4680      	mov	r8, r0
 8011ce4:	b928      	cbnz	r0, 8011cf2 <__multadd+0x5a>
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	4b0c      	ldr	r3, [pc, #48]	; (8011d1c <__multadd+0x84>)
 8011cea:	480d      	ldr	r0, [pc, #52]	; (8011d20 <__multadd+0x88>)
 8011cec:	21b5      	movs	r1, #181	; 0xb5
 8011cee:	f7fd fdf3 	bl	800f8d8 <__assert_func>
 8011cf2:	6922      	ldr	r2, [r4, #16]
 8011cf4:	3202      	adds	r2, #2
 8011cf6:	f104 010c 	add.w	r1, r4, #12
 8011cfa:	0092      	lsls	r2, r2, #2
 8011cfc:	300c      	adds	r0, #12
 8011cfe:	f7fd fe55 	bl	800f9ac <memcpy>
 8011d02:	4621      	mov	r1, r4
 8011d04:	4638      	mov	r0, r7
 8011d06:	f7ff ffa5 	bl	8011c54 <_Bfree>
 8011d0a:	4644      	mov	r4, r8
 8011d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d10:	3501      	adds	r5, #1
 8011d12:	615e      	str	r6, [r3, #20]
 8011d14:	6125      	str	r5, [r4, #16]
 8011d16:	4620      	mov	r0, r4
 8011d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1c:	0802e755 	.word	0x0802e755
 8011d20:	0802e7d2 	.word	0x0802e7d2

08011d24 <__hi0bits>:
 8011d24:	0c03      	lsrs	r3, r0, #16
 8011d26:	041b      	lsls	r3, r3, #16
 8011d28:	b9d3      	cbnz	r3, 8011d60 <__hi0bits+0x3c>
 8011d2a:	0400      	lsls	r0, r0, #16
 8011d2c:	2310      	movs	r3, #16
 8011d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011d32:	bf04      	itt	eq
 8011d34:	0200      	lsleq	r0, r0, #8
 8011d36:	3308      	addeq	r3, #8
 8011d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011d3c:	bf04      	itt	eq
 8011d3e:	0100      	lsleq	r0, r0, #4
 8011d40:	3304      	addeq	r3, #4
 8011d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011d46:	bf04      	itt	eq
 8011d48:	0080      	lsleq	r0, r0, #2
 8011d4a:	3302      	addeq	r3, #2
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	db05      	blt.n	8011d5c <__hi0bits+0x38>
 8011d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011d54:	f103 0301 	add.w	r3, r3, #1
 8011d58:	bf08      	it	eq
 8011d5a:	2320      	moveq	r3, #32
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	4770      	bx	lr
 8011d60:	2300      	movs	r3, #0
 8011d62:	e7e4      	b.n	8011d2e <__hi0bits+0xa>

08011d64 <__lo0bits>:
 8011d64:	6803      	ldr	r3, [r0, #0]
 8011d66:	f013 0207 	ands.w	r2, r3, #7
 8011d6a:	4601      	mov	r1, r0
 8011d6c:	d00b      	beq.n	8011d86 <__lo0bits+0x22>
 8011d6e:	07da      	lsls	r2, r3, #31
 8011d70:	d423      	bmi.n	8011dba <__lo0bits+0x56>
 8011d72:	0798      	lsls	r0, r3, #30
 8011d74:	bf49      	itett	mi
 8011d76:	085b      	lsrmi	r3, r3, #1
 8011d78:	089b      	lsrpl	r3, r3, #2
 8011d7a:	2001      	movmi	r0, #1
 8011d7c:	600b      	strmi	r3, [r1, #0]
 8011d7e:	bf5c      	itt	pl
 8011d80:	600b      	strpl	r3, [r1, #0]
 8011d82:	2002      	movpl	r0, #2
 8011d84:	4770      	bx	lr
 8011d86:	b298      	uxth	r0, r3
 8011d88:	b9a8      	cbnz	r0, 8011db6 <__lo0bits+0x52>
 8011d8a:	0c1b      	lsrs	r3, r3, #16
 8011d8c:	2010      	movs	r0, #16
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	b90a      	cbnz	r2, 8011d96 <__lo0bits+0x32>
 8011d92:	3008      	adds	r0, #8
 8011d94:	0a1b      	lsrs	r3, r3, #8
 8011d96:	071a      	lsls	r2, r3, #28
 8011d98:	bf04      	itt	eq
 8011d9a:	091b      	lsreq	r3, r3, #4
 8011d9c:	3004      	addeq	r0, #4
 8011d9e:	079a      	lsls	r2, r3, #30
 8011da0:	bf04      	itt	eq
 8011da2:	089b      	lsreq	r3, r3, #2
 8011da4:	3002      	addeq	r0, #2
 8011da6:	07da      	lsls	r2, r3, #31
 8011da8:	d403      	bmi.n	8011db2 <__lo0bits+0x4e>
 8011daa:	085b      	lsrs	r3, r3, #1
 8011dac:	f100 0001 	add.w	r0, r0, #1
 8011db0:	d005      	beq.n	8011dbe <__lo0bits+0x5a>
 8011db2:	600b      	str	r3, [r1, #0]
 8011db4:	4770      	bx	lr
 8011db6:	4610      	mov	r0, r2
 8011db8:	e7e9      	b.n	8011d8e <__lo0bits+0x2a>
 8011dba:	2000      	movs	r0, #0
 8011dbc:	4770      	bx	lr
 8011dbe:	2020      	movs	r0, #32
 8011dc0:	4770      	bx	lr
	...

08011dc4 <__i2b>:
 8011dc4:	b510      	push	{r4, lr}
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	2101      	movs	r1, #1
 8011dca:	f7ff ff03 	bl	8011bd4 <_Balloc>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	b928      	cbnz	r0, 8011dde <__i2b+0x1a>
 8011dd2:	4b05      	ldr	r3, [pc, #20]	; (8011de8 <__i2b+0x24>)
 8011dd4:	4805      	ldr	r0, [pc, #20]	; (8011dec <__i2b+0x28>)
 8011dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011dda:	f7fd fd7d 	bl	800f8d8 <__assert_func>
 8011dde:	2301      	movs	r3, #1
 8011de0:	6144      	str	r4, [r0, #20]
 8011de2:	6103      	str	r3, [r0, #16]
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	bf00      	nop
 8011de8:	0802e755 	.word	0x0802e755
 8011dec:	0802e7d2 	.word	0x0802e7d2

08011df0 <__multiply>:
 8011df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df4:	4691      	mov	r9, r2
 8011df6:	690a      	ldr	r2, [r1, #16]
 8011df8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	bfb8      	it	lt
 8011e00:	460b      	movlt	r3, r1
 8011e02:	460c      	mov	r4, r1
 8011e04:	bfbc      	itt	lt
 8011e06:	464c      	movlt	r4, r9
 8011e08:	4699      	movlt	r9, r3
 8011e0a:	6927      	ldr	r7, [r4, #16]
 8011e0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011e10:	68a3      	ldr	r3, [r4, #8]
 8011e12:	6861      	ldr	r1, [r4, #4]
 8011e14:	eb07 060a 	add.w	r6, r7, sl
 8011e18:	42b3      	cmp	r3, r6
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	bfb8      	it	lt
 8011e1e:	3101      	addlt	r1, #1
 8011e20:	f7ff fed8 	bl	8011bd4 <_Balloc>
 8011e24:	b930      	cbnz	r0, 8011e34 <__multiply+0x44>
 8011e26:	4602      	mov	r2, r0
 8011e28:	4b44      	ldr	r3, [pc, #272]	; (8011f3c <__multiply+0x14c>)
 8011e2a:	4845      	ldr	r0, [pc, #276]	; (8011f40 <__multiply+0x150>)
 8011e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8011e30:	f7fd fd52 	bl	800f8d8 <__assert_func>
 8011e34:	f100 0514 	add.w	r5, r0, #20
 8011e38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011e3c:	462b      	mov	r3, r5
 8011e3e:	2200      	movs	r2, #0
 8011e40:	4543      	cmp	r3, r8
 8011e42:	d321      	bcc.n	8011e88 <__multiply+0x98>
 8011e44:	f104 0314 	add.w	r3, r4, #20
 8011e48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011e4c:	f109 0314 	add.w	r3, r9, #20
 8011e50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011e54:	9202      	str	r2, [sp, #8]
 8011e56:	1b3a      	subs	r2, r7, r4
 8011e58:	3a15      	subs	r2, #21
 8011e5a:	f022 0203 	bic.w	r2, r2, #3
 8011e5e:	3204      	adds	r2, #4
 8011e60:	f104 0115 	add.w	r1, r4, #21
 8011e64:	428f      	cmp	r7, r1
 8011e66:	bf38      	it	cc
 8011e68:	2204      	movcc	r2, #4
 8011e6a:	9201      	str	r2, [sp, #4]
 8011e6c:	9a02      	ldr	r2, [sp, #8]
 8011e6e:	9303      	str	r3, [sp, #12]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d80c      	bhi.n	8011e8e <__multiply+0x9e>
 8011e74:	2e00      	cmp	r6, #0
 8011e76:	dd03      	ble.n	8011e80 <__multiply+0x90>
 8011e78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d05a      	beq.n	8011f36 <__multiply+0x146>
 8011e80:	6106      	str	r6, [r0, #16]
 8011e82:	b005      	add	sp, #20
 8011e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e88:	f843 2b04 	str.w	r2, [r3], #4
 8011e8c:	e7d8      	b.n	8011e40 <__multiply+0x50>
 8011e8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011e92:	f1ba 0f00 	cmp.w	sl, #0
 8011e96:	d024      	beq.n	8011ee2 <__multiply+0xf2>
 8011e98:	f104 0e14 	add.w	lr, r4, #20
 8011e9c:	46a9      	mov	r9, r5
 8011e9e:	f04f 0c00 	mov.w	ip, #0
 8011ea2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011ea6:	f8d9 1000 	ldr.w	r1, [r9]
 8011eaa:	fa1f fb82 	uxth.w	fp, r2
 8011eae:	b289      	uxth	r1, r1
 8011eb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8011eb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8011ebc:	4461      	add	r1, ip
 8011ebe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ec2:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ec6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011eca:	b289      	uxth	r1, r1
 8011ecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011ed0:	4577      	cmp	r7, lr
 8011ed2:	f849 1b04 	str.w	r1, [r9], #4
 8011ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011eda:	d8e2      	bhi.n	8011ea2 <__multiply+0xb2>
 8011edc:	9a01      	ldr	r2, [sp, #4]
 8011ede:	f845 c002 	str.w	ip, [r5, r2]
 8011ee2:	9a03      	ldr	r2, [sp, #12]
 8011ee4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ee8:	3304      	adds	r3, #4
 8011eea:	f1b9 0f00 	cmp.w	r9, #0
 8011eee:	d020      	beq.n	8011f32 <__multiply+0x142>
 8011ef0:	6829      	ldr	r1, [r5, #0]
 8011ef2:	f104 0c14 	add.w	ip, r4, #20
 8011ef6:	46ae      	mov	lr, r5
 8011ef8:	f04f 0a00 	mov.w	sl, #0
 8011efc:	f8bc b000 	ldrh.w	fp, [ip]
 8011f00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011f04:	fb09 220b 	mla	r2, r9, fp, r2
 8011f08:	4492      	add	sl, r2
 8011f0a:	b289      	uxth	r1, r1
 8011f0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011f10:	f84e 1b04 	str.w	r1, [lr], #4
 8011f14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011f18:	f8be 1000 	ldrh.w	r1, [lr]
 8011f1c:	0c12      	lsrs	r2, r2, #16
 8011f1e:	fb09 1102 	mla	r1, r9, r2, r1
 8011f22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011f26:	4567      	cmp	r7, ip
 8011f28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011f2c:	d8e6      	bhi.n	8011efc <__multiply+0x10c>
 8011f2e:	9a01      	ldr	r2, [sp, #4]
 8011f30:	50a9      	str	r1, [r5, r2]
 8011f32:	3504      	adds	r5, #4
 8011f34:	e79a      	b.n	8011e6c <__multiply+0x7c>
 8011f36:	3e01      	subs	r6, #1
 8011f38:	e79c      	b.n	8011e74 <__multiply+0x84>
 8011f3a:	bf00      	nop
 8011f3c:	0802e755 	.word	0x0802e755
 8011f40:	0802e7d2 	.word	0x0802e7d2

08011f44 <__pow5mult>:
 8011f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f48:	4615      	mov	r5, r2
 8011f4a:	f012 0203 	ands.w	r2, r2, #3
 8011f4e:	4606      	mov	r6, r0
 8011f50:	460f      	mov	r7, r1
 8011f52:	d007      	beq.n	8011f64 <__pow5mult+0x20>
 8011f54:	4c25      	ldr	r4, [pc, #148]	; (8011fec <__pow5mult+0xa8>)
 8011f56:	3a01      	subs	r2, #1
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f5e:	f7ff fe9b 	bl	8011c98 <__multadd>
 8011f62:	4607      	mov	r7, r0
 8011f64:	10ad      	asrs	r5, r5, #2
 8011f66:	d03d      	beq.n	8011fe4 <__pow5mult+0xa0>
 8011f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011f6a:	b97c      	cbnz	r4, 8011f8c <__pow5mult+0x48>
 8011f6c:	2010      	movs	r0, #16
 8011f6e:	f7fd fd0d 	bl	800f98c <malloc>
 8011f72:	4602      	mov	r2, r0
 8011f74:	6270      	str	r0, [r6, #36]	; 0x24
 8011f76:	b928      	cbnz	r0, 8011f84 <__pow5mult+0x40>
 8011f78:	4b1d      	ldr	r3, [pc, #116]	; (8011ff0 <__pow5mult+0xac>)
 8011f7a:	481e      	ldr	r0, [pc, #120]	; (8011ff4 <__pow5mult+0xb0>)
 8011f7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011f80:	f7fd fcaa 	bl	800f8d8 <__assert_func>
 8011f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f88:	6004      	str	r4, [r0, #0]
 8011f8a:	60c4      	str	r4, [r0, #12]
 8011f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f94:	b94c      	cbnz	r4, 8011faa <__pow5mult+0x66>
 8011f96:	f240 2171 	movw	r1, #625	; 0x271
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	f7ff ff12 	bl	8011dc4 <__i2b>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011fa6:	4604      	mov	r4, r0
 8011fa8:	6003      	str	r3, [r0, #0]
 8011faa:	f04f 0900 	mov.w	r9, #0
 8011fae:	07eb      	lsls	r3, r5, #31
 8011fb0:	d50a      	bpl.n	8011fc8 <__pow5mult+0x84>
 8011fb2:	4639      	mov	r1, r7
 8011fb4:	4622      	mov	r2, r4
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7ff ff1a 	bl	8011df0 <__multiply>
 8011fbc:	4639      	mov	r1, r7
 8011fbe:	4680      	mov	r8, r0
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f7ff fe47 	bl	8011c54 <_Bfree>
 8011fc6:	4647      	mov	r7, r8
 8011fc8:	106d      	asrs	r5, r5, #1
 8011fca:	d00b      	beq.n	8011fe4 <__pow5mult+0xa0>
 8011fcc:	6820      	ldr	r0, [r4, #0]
 8011fce:	b938      	cbnz	r0, 8011fe0 <__pow5mult+0x9c>
 8011fd0:	4622      	mov	r2, r4
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f7ff ff0b 	bl	8011df0 <__multiply>
 8011fda:	6020      	str	r0, [r4, #0]
 8011fdc:	f8c0 9000 	str.w	r9, [r0]
 8011fe0:	4604      	mov	r4, r0
 8011fe2:	e7e4      	b.n	8011fae <__pow5mult+0x6a>
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fea:	bf00      	nop
 8011fec:	0802e920 	.word	0x0802e920
 8011ff0:	0802e6e3 	.word	0x0802e6e3
 8011ff4:	0802e7d2 	.word	0x0802e7d2

08011ff8 <__lshift>:
 8011ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	6849      	ldr	r1, [r1, #4]
 8012000:	6923      	ldr	r3, [r4, #16]
 8012002:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012006:	68a3      	ldr	r3, [r4, #8]
 8012008:	4607      	mov	r7, r0
 801200a:	4691      	mov	r9, r2
 801200c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012010:	f108 0601 	add.w	r6, r8, #1
 8012014:	42b3      	cmp	r3, r6
 8012016:	db0b      	blt.n	8012030 <__lshift+0x38>
 8012018:	4638      	mov	r0, r7
 801201a:	f7ff fddb 	bl	8011bd4 <_Balloc>
 801201e:	4605      	mov	r5, r0
 8012020:	b948      	cbnz	r0, 8012036 <__lshift+0x3e>
 8012022:	4602      	mov	r2, r0
 8012024:	4b2a      	ldr	r3, [pc, #168]	; (80120d0 <__lshift+0xd8>)
 8012026:	482b      	ldr	r0, [pc, #172]	; (80120d4 <__lshift+0xdc>)
 8012028:	f240 11d9 	movw	r1, #473	; 0x1d9
 801202c:	f7fd fc54 	bl	800f8d8 <__assert_func>
 8012030:	3101      	adds	r1, #1
 8012032:	005b      	lsls	r3, r3, #1
 8012034:	e7ee      	b.n	8012014 <__lshift+0x1c>
 8012036:	2300      	movs	r3, #0
 8012038:	f100 0114 	add.w	r1, r0, #20
 801203c:	f100 0210 	add.w	r2, r0, #16
 8012040:	4618      	mov	r0, r3
 8012042:	4553      	cmp	r3, sl
 8012044:	db37      	blt.n	80120b6 <__lshift+0xbe>
 8012046:	6920      	ldr	r0, [r4, #16]
 8012048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801204c:	f104 0314 	add.w	r3, r4, #20
 8012050:	f019 091f 	ands.w	r9, r9, #31
 8012054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012058:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801205c:	d02f      	beq.n	80120be <__lshift+0xc6>
 801205e:	f1c9 0e20 	rsb	lr, r9, #32
 8012062:	468a      	mov	sl, r1
 8012064:	f04f 0c00 	mov.w	ip, #0
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	fa02 f209 	lsl.w	r2, r2, r9
 801206e:	ea42 020c 	orr.w	r2, r2, ip
 8012072:	f84a 2b04 	str.w	r2, [sl], #4
 8012076:	f853 2b04 	ldr.w	r2, [r3], #4
 801207a:	4298      	cmp	r0, r3
 801207c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012080:	d8f2      	bhi.n	8012068 <__lshift+0x70>
 8012082:	1b03      	subs	r3, r0, r4
 8012084:	3b15      	subs	r3, #21
 8012086:	f023 0303 	bic.w	r3, r3, #3
 801208a:	3304      	adds	r3, #4
 801208c:	f104 0215 	add.w	r2, r4, #21
 8012090:	4290      	cmp	r0, r2
 8012092:	bf38      	it	cc
 8012094:	2304      	movcc	r3, #4
 8012096:	f841 c003 	str.w	ip, [r1, r3]
 801209a:	f1bc 0f00 	cmp.w	ip, #0
 801209e:	d001      	beq.n	80120a4 <__lshift+0xac>
 80120a0:	f108 0602 	add.w	r6, r8, #2
 80120a4:	3e01      	subs	r6, #1
 80120a6:	4638      	mov	r0, r7
 80120a8:	612e      	str	r6, [r5, #16]
 80120aa:	4621      	mov	r1, r4
 80120ac:	f7ff fdd2 	bl	8011c54 <_Bfree>
 80120b0:	4628      	mov	r0, r5
 80120b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80120ba:	3301      	adds	r3, #1
 80120bc:	e7c1      	b.n	8012042 <__lshift+0x4a>
 80120be:	3904      	subs	r1, #4
 80120c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80120c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80120c8:	4298      	cmp	r0, r3
 80120ca:	d8f9      	bhi.n	80120c0 <__lshift+0xc8>
 80120cc:	e7ea      	b.n	80120a4 <__lshift+0xac>
 80120ce:	bf00      	nop
 80120d0:	0802e755 	.word	0x0802e755
 80120d4:	0802e7d2 	.word	0x0802e7d2

080120d8 <__mcmp>:
 80120d8:	b530      	push	{r4, r5, lr}
 80120da:	6902      	ldr	r2, [r0, #16]
 80120dc:	690c      	ldr	r4, [r1, #16]
 80120de:	1b12      	subs	r2, r2, r4
 80120e0:	d10e      	bne.n	8012100 <__mcmp+0x28>
 80120e2:	f100 0314 	add.w	r3, r0, #20
 80120e6:	3114      	adds	r1, #20
 80120e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80120ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80120f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80120f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80120f8:	42a5      	cmp	r5, r4
 80120fa:	d003      	beq.n	8012104 <__mcmp+0x2c>
 80120fc:	d305      	bcc.n	801210a <__mcmp+0x32>
 80120fe:	2201      	movs	r2, #1
 8012100:	4610      	mov	r0, r2
 8012102:	bd30      	pop	{r4, r5, pc}
 8012104:	4283      	cmp	r3, r0
 8012106:	d3f3      	bcc.n	80120f0 <__mcmp+0x18>
 8012108:	e7fa      	b.n	8012100 <__mcmp+0x28>
 801210a:	f04f 32ff 	mov.w	r2, #4294967295
 801210e:	e7f7      	b.n	8012100 <__mcmp+0x28>

08012110 <__mdiff>:
 8012110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	460c      	mov	r4, r1
 8012116:	4606      	mov	r6, r0
 8012118:	4611      	mov	r1, r2
 801211a:	4620      	mov	r0, r4
 801211c:	4690      	mov	r8, r2
 801211e:	f7ff ffdb 	bl	80120d8 <__mcmp>
 8012122:	1e05      	subs	r5, r0, #0
 8012124:	d110      	bne.n	8012148 <__mdiff+0x38>
 8012126:	4629      	mov	r1, r5
 8012128:	4630      	mov	r0, r6
 801212a:	f7ff fd53 	bl	8011bd4 <_Balloc>
 801212e:	b930      	cbnz	r0, 801213e <__mdiff+0x2e>
 8012130:	4b3a      	ldr	r3, [pc, #232]	; (801221c <__mdiff+0x10c>)
 8012132:	4602      	mov	r2, r0
 8012134:	f240 2132 	movw	r1, #562	; 0x232
 8012138:	4839      	ldr	r0, [pc, #228]	; (8012220 <__mdiff+0x110>)
 801213a:	f7fd fbcd 	bl	800f8d8 <__assert_func>
 801213e:	2301      	movs	r3, #1
 8012140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012148:	bfa4      	itt	ge
 801214a:	4643      	movge	r3, r8
 801214c:	46a0      	movge	r8, r4
 801214e:	4630      	mov	r0, r6
 8012150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012154:	bfa6      	itte	ge
 8012156:	461c      	movge	r4, r3
 8012158:	2500      	movge	r5, #0
 801215a:	2501      	movlt	r5, #1
 801215c:	f7ff fd3a 	bl	8011bd4 <_Balloc>
 8012160:	b920      	cbnz	r0, 801216c <__mdiff+0x5c>
 8012162:	4b2e      	ldr	r3, [pc, #184]	; (801221c <__mdiff+0x10c>)
 8012164:	4602      	mov	r2, r0
 8012166:	f44f 7110 	mov.w	r1, #576	; 0x240
 801216a:	e7e5      	b.n	8012138 <__mdiff+0x28>
 801216c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012170:	6926      	ldr	r6, [r4, #16]
 8012172:	60c5      	str	r5, [r0, #12]
 8012174:	f104 0914 	add.w	r9, r4, #20
 8012178:	f108 0514 	add.w	r5, r8, #20
 801217c:	f100 0e14 	add.w	lr, r0, #20
 8012180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012188:	f108 0210 	add.w	r2, r8, #16
 801218c:	46f2      	mov	sl, lr
 801218e:	2100      	movs	r1, #0
 8012190:	f859 3b04 	ldr.w	r3, [r9], #4
 8012194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012198:	fa1f f883 	uxth.w	r8, r3
 801219c:	fa11 f18b 	uxtah	r1, r1, fp
 80121a0:	0c1b      	lsrs	r3, r3, #16
 80121a2:	eba1 0808 	sub.w	r8, r1, r8
 80121a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80121aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80121ae:	fa1f f888 	uxth.w	r8, r8
 80121b2:	1419      	asrs	r1, r3, #16
 80121b4:	454e      	cmp	r6, r9
 80121b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80121ba:	f84a 3b04 	str.w	r3, [sl], #4
 80121be:	d8e7      	bhi.n	8012190 <__mdiff+0x80>
 80121c0:	1b33      	subs	r3, r6, r4
 80121c2:	3b15      	subs	r3, #21
 80121c4:	f023 0303 	bic.w	r3, r3, #3
 80121c8:	3304      	adds	r3, #4
 80121ca:	3415      	adds	r4, #21
 80121cc:	42a6      	cmp	r6, r4
 80121ce:	bf38      	it	cc
 80121d0:	2304      	movcc	r3, #4
 80121d2:	441d      	add	r5, r3
 80121d4:	4473      	add	r3, lr
 80121d6:	469e      	mov	lr, r3
 80121d8:	462e      	mov	r6, r5
 80121da:	4566      	cmp	r6, ip
 80121dc:	d30e      	bcc.n	80121fc <__mdiff+0xec>
 80121de:	f10c 0203 	add.w	r2, ip, #3
 80121e2:	1b52      	subs	r2, r2, r5
 80121e4:	f022 0203 	bic.w	r2, r2, #3
 80121e8:	3d03      	subs	r5, #3
 80121ea:	45ac      	cmp	ip, r5
 80121ec:	bf38      	it	cc
 80121ee:	2200      	movcc	r2, #0
 80121f0:	441a      	add	r2, r3
 80121f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80121f6:	b17b      	cbz	r3, 8012218 <__mdiff+0x108>
 80121f8:	6107      	str	r7, [r0, #16]
 80121fa:	e7a3      	b.n	8012144 <__mdiff+0x34>
 80121fc:	f856 8b04 	ldr.w	r8, [r6], #4
 8012200:	fa11 f288 	uxtah	r2, r1, r8
 8012204:	1414      	asrs	r4, r2, #16
 8012206:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801220a:	b292      	uxth	r2, r2
 801220c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012210:	f84e 2b04 	str.w	r2, [lr], #4
 8012214:	1421      	asrs	r1, r4, #16
 8012216:	e7e0      	b.n	80121da <__mdiff+0xca>
 8012218:	3f01      	subs	r7, #1
 801221a:	e7ea      	b.n	80121f2 <__mdiff+0xe2>
 801221c:	0802e755 	.word	0x0802e755
 8012220:	0802e7d2 	.word	0x0802e7d2

08012224 <__d2b>:
 8012224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012228:	4689      	mov	r9, r1
 801222a:	2101      	movs	r1, #1
 801222c:	ec57 6b10 	vmov	r6, r7, d0
 8012230:	4690      	mov	r8, r2
 8012232:	f7ff fccf 	bl	8011bd4 <_Balloc>
 8012236:	4604      	mov	r4, r0
 8012238:	b930      	cbnz	r0, 8012248 <__d2b+0x24>
 801223a:	4602      	mov	r2, r0
 801223c:	4b25      	ldr	r3, [pc, #148]	; (80122d4 <__d2b+0xb0>)
 801223e:	4826      	ldr	r0, [pc, #152]	; (80122d8 <__d2b+0xb4>)
 8012240:	f240 310a 	movw	r1, #778	; 0x30a
 8012244:	f7fd fb48 	bl	800f8d8 <__assert_func>
 8012248:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801224c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012250:	bb35      	cbnz	r5, 80122a0 <__d2b+0x7c>
 8012252:	2e00      	cmp	r6, #0
 8012254:	9301      	str	r3, [sp, #4]
 8012256:	d028      	beq.n	80122aa <__d2b+0x86>
 8012258:	4668      	mov	r0, sp
 801225a:	9600      	str	r6, [sp, #0]
 801225c:	f7ff fd82 	bl	8011d64 <__lo0bits>
 8012260:	9900      	ldr	r1, [sp, #0]
 8012262:	b300      	cbz	r0, 80122a6 <__d2b+0x82>
 8012264:	9a01      	ldr	r2, [sp, #4]
 8012266:	f1c0 0320 	rsb	r3, r0, #32
 801226a:	fa02 f303 	lsl.w	r3, r2, r3
 801226e:	430b      	orrs	r3, r1
 8012270:	40c2      	lsrs	r2, r0
 8012272:	6163      	str	r3, [r4, #20]
 8012274:	9201      	str	r2, [sp, #4]
 8012276:	9b01      	ldr	r3, [sp, #4]
 8012278:	61a3      	str	r3, [r4, #24]
 801227a:	2b00      	cmp	r3, #0
 801227c:	bf14      	ite	ne
 801227e:	2202      	movne	r2, #2
 8012280:	2201      	moveq	r2, #1
 8012282:	6122      	str	r2, [r4, #16]
 8012284:	b1d5      	cbz	r5, 80122bc <__d2b+0x98>
 8012286:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801228a:	4405      	add	r5, r0
 801228c:	f8c9 5000 	str.w	r5, [r9]
 8012290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012294:	f8c8 0000 	str.w	r0, [r8]
 8012298:	4620      	mov	r0, r4
 801229a:	b003      	add	sp, #12
 801229c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80122a4:	e7d5      	b.n	8012252 <__d2b+0x2e>
 80122a6:	6161      	str	r1, [r4, #20]
 80122a8:	e7e5      	b.n	8012276 <__d2b+0x52>
 80122aa:	a801      	add	r0, sp, #4
 80122ac:	f7ff fd5a 	bl	8011d64 <__lo0bits>
 80122b0:	9b01      	ldr	r3, [sp, #4]
 80122b2:	6163      	str	r3, [r4, #20]
 80122b4:	2201      	movs	r2, #1
 80122b6:	6122      	str	r2, [r4, #16]
 80122b8:	3020      	adds	r0, #32
 80122ba:	e7e3      	b.n	8012284 <__d2b+0x60>
 80122bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80122c4:	f8c9 0000 	str.w	r0, [r9]
 80122c8:	6918      	ldr	r0, [r3, #16]
 80122ca:	f7ff fd2b 	bl	8011d24 <__hi0bits>
 80122ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122d2:	e7df      	b.n	8012294 <__d2b+0x70>
 80122d4:	0802e755 	.word	0x0802e755
 80122d8:	0802e7d2 	.word	0x0802e7d2

080122dc <_calloc_r>:
 80122dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122de:	fba1 2402 	umull	r2, r4, r1, r2
 80122e2:	b94c      	cbnz	r4, 80122f8 <_calloc_r+0x1c>
 80122e4:	4611      	mov	r1, r2
 80122e6:	9201      	str	r2, [sp, #4]
 80122e8:	f7fd fbe2 	bl	800fab0 <_malloc_r>
 80122ec:	9a01      	ldr	r2, [sp, #4]
 80122ee:	4605      	mov	r5, r0
 80122f0:	b930      	cbnz	r0, 8012300 <_calloc_r+0x24>
 80122f2:	4628      	mov	r0, r5
 80122f4:	b003      	add	sp, #12
 80122f6:	bd30      	pop	{r4, r5, pc}
 80122f8:	220c      	movs	r2, #12
 80122fa:	6002      	str	r2, [r0, #0]
 80122fc:	2500      	movs	r5, #0
 80122fe:	e7f8      	b.n	80122f2 <_calloc_r+0x16>
 8012300:	4621      	mov	r1, r4
 8012302:	f7fd fb61 	bl	800f9c8 <memset>
 8012306:	e7f4      	b.n	80122f2 <_calloc_r+0x16>

08012308 <_realloc_r>:
 8012308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801230c:	4680      	mov	r8, r0
 801230e:	4614      	mov	r4, r2
 8012310:	460e      	mov	r6, r1
 8012312:	b921      	cbnz	r1, 801231e <_realloc_r+0x16>
 8012314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012318:	4611      	mov	r1, r2
 801231a:	f7fd bbc9 	b.w	800fab0 <_malloc_r>
 801231e:	b92a      	cbnz	r2, 801232c <_realloc_r+0x24>
 8012320:	f7fd fb5a 	bl	800f9d8 <_free_r>
 8012324:	4625      	mov	r5, r4
 8012326:	4628      	mov	r0, r5
 8012328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801232c:	f000 f9fc 	bl	8012728 <_malloc_usable_size_r>
 8012330:	4284      	cmp	r4, r0
 8012332:	4607      	mov	r7, r0
 8012334:	d802      	bhi.n	801233c <_realloc_r+0x34>
 8012336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801233a:	d812      	bhi.n	8012362 <_realloc_r+0x5a>
 801233c:	4621      	mov	r1, r4
 801233e:	4640      	mov	r0, r8
 8012340:	f7fd fbb6 	bl	800fab0 <_malloc_r>
 8012344:	4605      	mov	r5, r0
 8012346:	2800      	cmp	r0, #0
 8012348:	d0ed      	beq.n	8012326 <_realloc_r+0x1e>
 801234a:	42bc      	cmp	r4, r7
 801234c:	4622      	mov	r2, r4
 801234e:	4631      	mov	r1, r6
 8012350:	bf28      	it	cs
 8012352:	463a      	movcs	r2, r7
 8012354:	f7fd fb2a 	bl	800f9ac <memcpy>
 8012358:	4631      	mov	r1, r6
 801235a:	4640      	mov	r0, r8
 801235c:	f7fd fb3c 	bl	800f9d8 <_free_r>
 8012360:	e7e1      	b.n	8012326 <_realloc_r+0x1e>
 8012362:	4635      	mov	r5, r6
 8012364:	e7df      	b.n	8012326 <_realloc_r+0x1e>

08012366 <__ssputs_r>:
 8012366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801236a:	688e      	ldr	r6, [r1, #8]
 801236c:	429e      	cmp	r6, r3
 801236e:	4682      	mov	sl, r0
 8012370:	460c      	mov	r4, r1
 8012372:	4690      	mov	r8, r2
 8012374:	461f      	mov	r7, r3
 8012376:	d838      	bhi.n	80123ea <__ssputs_r+0x84>
 8012378:	898a      	ldrh	r2, [r1, #12]
 801237a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801237e:	d032      	beq.n	80123e6 <__ssputs_r+0x80>
 8012380:	6825      	ldr	r5, [r4, #0]
 8012382:	6909      	ldr	r1, [r1, #16]
 8012384:	eba5 0901 	sub.w	r9, r5, r1
 8012388:	6965      	ldr	r5, [r4, #20]
 801238a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801238e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012392:	3301      	adds	r3, #1
 8012394:	444b      	add	r3, r9
 8012396:	106d      	asrs	r5, r5, #1
 8012398:	429d      	cmp	r5, r3
 801239a:	bf38      	it	cc
 801239c:	461d      	movcc	r5, r3
 801239e:	0553      	lsls	r3, r2, #21
 80123a0:	d531      	bpl.n	8012406 <__ssputs_r+0xa0>
 80123a2:	4629      	mov	r1, r5
 80123a4:	f7fd fb84 	bl	800fab0 <_malloc_r>
 80123a8:	4606      	mov	r6, r0
 80123aa:	b950      	cbnz	r0, 80123c2 <__ssputs_r+0x5c>
 80123ac:	230c      	movs	r3, #12
 80123ae:	f8ca 3000 	str.w	r3, [sl]
 80123b2:	89a3      	ldrh	r3, [r4, #12]
 80123b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123b8:	81a3      	strh	r3, [r4, #12]
 80123ba:	f04f 30ff 	mov.w	r0, #4294967295
 80123be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c2:	6921      	ldr	r1, [r4, #16]
 80123c4:	464a      	mov	r2, r9
 80123c6:	f7fd faf1 	bl	800f9ac <memcpy>
 80123ca:	89a3      	ldrh	r3, [r4, #12]
 80123cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123d4:	81a3      	strh	r3, [r4, #12]
 80123d6:	6126      	str	r6, [r4, #16]
 80123d8:	6165      	str	r5, [r4, #20]
 80123da:	444e      	add	r6, r9
 80123dc:	eba5 0509 	sub.w	r5, r5, r9
 80123e0:	6026      	str	r6, [r4, #0]
 80123e2:	60a5      	str	r5, [r4, #8]
 80123e4:	463e      	mov	r6, r7
 80123e6:	42be      	cmp	r6, r7
 80123e8:	d900      	bls.n	80123ec <__ssputs_r+0x86>
 80123ea:	463e      	mov	r6, r7
 80123ec:	6820      	ldr	r0, [r4, #0]
 80123ee:	4632      	mov	r2, r6
 80123f0:	4641      	mov	r1, r8
 80123f2:	f7ff fbc9 	bl	8011b88 <memmove>
 80123f6:	68a3      	ldr	r3, [r4, #8]
 80123f8:	1b9b      	subs	r3, r3, r6
 80123fa:	60a3      	str	r3, [r4, #8]
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	4433      	add	r3, r6
 8012400:	6023      	str	r3, [r4, #0]
 8012402:	2000      	movs	r0, #0
 8012404:	e7db      	b.n	80123be <__ssputs_r+0x58>
 8012406:	462a      	mov	r2, r5
 8012408:	f7ff ff7e 	bl	8012308 <_realloc_r>
 801240c:	4606      	mov	r6, r0
 801240e:	2800      	cmp	r0, #0
 8012410:	d1e1      	bne.n	80123d6 <__ssputs_r+0x70>
 8012412:	6921      	ldr	r1, [r4, #16]
 8012414:	4650      	mov	r0, sl
 8012416:	f7fd fadf 	bl	800f9d8 <_free_r>
 801241a:	e7c7      	b.n	80123ac <__ssputs_r+0x46>

0801241c <_svfiprintf_r>:
 801241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012420:	4698      	mov	r8, r3
 8012422:	898b      	ldrh	r3, [r1, #12]
 8012424:	061b      	lsls	r3, r3, #24
 8012426:	b09d      	sub	sp, #116	; 0x74
 8012428:	4607      	mov	r7, r0
 801242a:	460d      	mov	r5, r1
 801242c:	4614      	mov	r4, r2
 801242e:	d50e      	bpl.n	801244e <_svfiprintf_r+0x32>
 8012430:	690b      	ldr	r3, [r1, #16]
 8012432:	b963      	cbnz	r3, 801244e <_svfiprintf_r+0x32>
 8012434:	2140      	movs	r1, #64	; 0x40
 8012436:	f7fd fb3b 	bl	800fab0 <_malloc_r>
 801243a:	6028      	str	r0, [r5, #0]
 801243c:	6128      	str	r0, [r5, #16]
 801243e:	b920      	cbnz	r0, 801244a <_svfiprintf_r+0x2e>
 8012440:	230c      	movs	r3, #12
 8012442:	603b      	str	r3, [r7, #0]
 8012444:	f04f 30ff 	mov.w	r0, #4294967295
 8012448:	e0d1      	b.n	80125ee <_svfiprintf_r+0x1d2>
 801244a:	2340      	movs	r3, #64	; 0x40
 801244c:	616b      	str	r3, [r5, #20]
 801244e:	2300      	movs	r3, #0
 8012450:	9309      	str	r3, [sp, #36]	; 0x24
 8012452:	2320      	movs	r3, #32
 8012454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012458:	f8cd 800c 	str.w	r8, [sp, #12]
 801245c:	2330      	movs	r3, #48	; 0x30
 801245e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012608 <_svfiprintf_r+0x1ec>
 8012462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012466:	f04f 0901 	mov.w	r9, #1
 801246a:	4623      	mov	r3, r4
 801246c:	469a      	mov	sl, r3
 801246e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012472:	b10a      	cbz	r2, 8012478 <_svfiprintf_r+0x5c>
 8012474:	2a25      	cmp	r2, #37	; 0x25
 8012476:	d1f9      	bne.n	801246c <_svfiprintf_r+0x50>
 8012478:	ebba 0b04 	subs.w	fp, sl, r4
 801247c:	d00b      	beq.n	8012496 <_svfiprintf_r+0x7a>
 801247e:	465b      	mov	r3, fp
 8012480:	4622      	mov	r2, r4
 8012482:	4629      	mov	r1, r5
 8012484:	4638      	mov	r0, r7
 8012486:	f7ff ff6e 	bl	8012366 <__ssputs_r>
 801248a:	3001      	adds	r0, #1
 801248c:	f000 80aa 	beq.w	80125e4 <_svfiprintf_r+0x1c8>
 8012490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012492:	445a      	add	r2, fp
 8012494:	9209      	str	r2, [sp, #36]	; 0x24
 8012496:	f89a 3000 	ldrb.w	r3, [sl]
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 80a2 	beq.w	80125e4 <_svfiprintf_r+0x1c8>
 80124a0:	2300      	movs	r3, #0
 80124a2:	f04f 32ff 	mov.w	r2, #4294967295
 80124a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124aa:	f10a 0a01 	add.w	sl, sl, #1
 80124ae:	9304      	str	r3, [sp, #16]
 80124b0:	9307      	str	r3, [sp, #28]
 80124b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124b6:	931a      	str	r3, [sp, #104]	; 0x68
 80124b8:	4654      	mov	r4, sl
 80124ba:	2205      	movs	r2, #5
 80124bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c0:	4851      	ldr	r0, [pc, #324]	; (8012608 <_svfiprintf_r+0x1ec>)
 80124c2:	f7ed fe9d 	bl	8000200 <memchr>
 80124c6:	9a04      	ldr	r2, [sp, #16]
 80124c8:	b9d8      	cbnz	r0, 8012502 <_svfiprintf_r+0xe6>
 80124ca:	06d0      	lsls	r0, r2, #27
 80124cc:	bf44      	itt	mi
 80124ce:	2320      	movmi	r3, #32
 80124d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124d4:	0711      	lsls	r1, r2, #28
 80124d6:	bf44      	itt	mi
 80124d8:	232b      	movmi	r3, #43	; 0x2b
 80124da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124de:	f89a 3000 	ldrb.w	r3, [sl]
 80124e2:	2b2a      	cmp	r3, #42	; 0x2a
 80124e4:	d015      	beq.n	8012512 <_svfiprintf_r+0xf6>
 80124e6:	9a07      	ldr	r2, [sp, #28]
 80124e8:	4654      	mov	r4, sl
 80124ea:	2000      	movs	r0, #0
 80124ec:	f04f 0c0a 	mov.w	ip, #10
 80124f0:	4621      	mov	r1, r4
 80124f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f6:	3b30      	subs	r3, #48	; 0x30
 80124f8:	2b09      	cmp	r3, #9
 80124fa:	d94e      	bls.n	801259a <_svfiprintf_r+0x17e>
 80124fc:	b1b0      	cbz	r0, 801252c <_svfiprintf_r+0x110>
 80124fe:	9207      	str	r2, [sp, #28]
 8012500:	e014      	b.n	801252c <_svfiprintf_r+0x110>
 8012502:	eba0 0308 	sub.w	r3, r0, r8
 8012506:	fa09 f303 	lsl.w	r3, r9, r3
 801250a:	4313      	orrs	r3, r2
 801250c:	9304      	str	r3, [sp, #16]
 801250e:	46a2      	mov	sl, r4
 8012510:	e7d2      	b.n	80124b8 <_svfiprintf_r+0x9c>
 8012512:	9b03      	ldr	r3, [sp, #12]
 8012514:	1d19      	adds	r1, r3, #4
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	9103      	str	r1, [sp, #12]
 801251a:	2b00      	cmp	r3, #0
 801251c:	bfbb      	ittet	lt
 801251e:	425b      	neglt	r3, r3
 8012520:	f042 0202 	orrlt.w	r2, r2, #2
 8012524:	9307      	strge	r3, [sp, #28]
 8012526:	9307      	strlt	r3, [sp, #28]
 8012528:	bfb8      	it	lt
 801252a:	9204      	strlt	r2, [sp, #16]
 801252c:	7823      	ldrb	r3, [r4, #0]
 801252e:	2b2e      	cmp	r3, #46	; 0x2e
 8012530:	d10c      	bne.n	801254c <_svfiprintf_r+0x130>
 8012532:	7863      	ldrb	r3, [r4, #1]
 8012534:	2b2a      	cmp	r3, #42	; 0x2a
 8012536:	d135      	bne.n	80125a4 <_svfiprintf_r+0x188>
 8012538:	9b03      	ldr	r3, [sp, #12]
 801253a:	1d1a      	adds	r2, r3, #4
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	9203      	str	r2, [sp, #12]
 8012540:	2b00      	cmp	r3, #0
 8012542:	bfb8      	it	lt
 8012544:	f04f 33ff 	movlt.w	r3, #4294967295
 8012548:	3402      	adds	r4, #2
 801254a:	9305      	str	r3, [sp, #20]
 801254c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012618 <_svfiprintf_r+0x1fc>
 8012550:	7821      	ldrb	r1, [r4, #0]
 8012552:	2203      	movs	r2, #3
 8012554:	4650      	mov	r0, sl
 8012556:	f7ed fe53 	bl	8000200 <memchr>
 801255a:	b140      	cbz	r0, 801256e <_svfiprintf_r+0x152>
 801255c:	2340      	movs	r3, #64	; 0x40
 801255e:	eba0 000a 	sub.w	r0, r0, sl
 8012562:	fa03 f000 	lsl.w	r0, r3, r0
 8012566:	9b04      	ldr	r3, [sp, #16]
 8012568:	4303      	orrs	r3, r0
 801256a:	3401      	adds	r4, #1
 801256c:	9304      	str	r3, [sp, #16]
 801256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012572:	4826      	ldr	r0, [pc, #152]	; (801260c <_svfiprintf_r+0x1f0>)
 8012574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012578:	2206      	movs	r2, #6
 801257a:	f7ed fe41 	bl	8000200 <memchr>
 801257e:	2800      	cmp	r0, #0
 8012580:	d038      	beq.n	80125f4 <_svfiprintf_r+0x1d8>
 8012582:	4b23      	ldr	r3, [pc, #140]	; (8012610 <_svfiprintf_r+0x1f4>)
 8012584:	bb1b      	cbnz	r3, 80125ce <_svfiprintf_r+0x1b2>
 8012586:	9b03      	ldr	r3, [sp, #12]
 8012588:	3307      	adds	r3, #7
 801258a:	f023 0307 	bic.w	r3, r3, #7
 801258e:	3308      	adds	r3, #8
 8012590:	9303      	str	r3, [sp, #12]
 8012592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012594:	4433      	add	r3, r6
 8012596:	9309      	str	r3, [sp, #36]	; 0x24
 8012598:	e767      	b.n	801246a <_svfiprintf_r+0x4e>
 801259a:	fb0c 3202 	mla	r2, ip, r2, r3
 801259e:	460c      	mov	r4, r1
 80125a0:	2001      	movs	r0, #1
 80125a2:	e7a5      	b.n	80124f0 <_svfiprintf_r+0xd4>
 80125a4:	2300      	movs	r3, #0
 80125a6:	3401      	adds	r4, #1
 80125a8:	9305      	str	r3, [sp, #20]
 80125aa:	4619      	mov	r1, r3
 80125ac:	f04f 0c0a 	mov.w	ip, #10
 80125b0:	4620      	mov	r0, r4
 80125b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125b6:	3a30      	subs	r2, #48	; 0x30
 80125b8:	2a09      	cmp	r2, #9
 80125ba:	d903      	bls.n	80125c4 <_svfiprintf_r+0x1a8>
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d0c5      	beq.n	801254c <_svfiprintf_r+0x130>
 80125c0:	9105      	str	r1, [sp, #20]
 80125c2:	e7c3      	b.n	801254c <_svfiprintf_r+0x130>
 80125c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80125c8:	4604      	mov	r4, r0
 80125ca:	2301      	movs	r3, #1
 80125cc:	e7f0      	b.n	80125b0 <_svfiprintf_r+0x194>
 80125ce:	ab03      	add	r3, sp, #12
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	462a      	mov	r2, r5
 80125d4:	4b0f      	ldr	r3, [pc, #60]	; (8012614 <_svfiprintf_r+0x1f8>)
 80125d6:	a904      	add	r1, sp, #16
 80125d8:	4638      	mov	r0, r7
 80125da:	f7fd fcd7 	bl	800ff8c <_printf_float>
 80125de:	1c42      	adds	r2, r0, #1
 80125e0:	4606      	mov	r6, r0
 80125e2:	d1d6      	bne.n	8012592 <_svfiprintf_r+0x176>
 80125e4:	89ab      	ldrh	r3, [r5, #12]
 80125e6:	065b      	lsls	r3, r3, #25
 80125e8:	f53f af2c 	bmi.w	8012444 <_svfiprintf_r+0x28>
 80125ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125ee:	b01d      	add	sp, #116	; 0x74
 80125f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125f4:	ab03      	add	r3, sp, #12
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	462a      	mov	r2, r5
 80125fa:	4b06      	ldr	r3, [pc, #24]	; (8012614 <_svfiprintf_r+0x1f8>)
 80125fc:	a904      	add	r1, sp, #16
 80125fe:	4638      	mov	r0, r7
 8012600:	f7fd ff68 	bl	80104d4 <_printf_i>
 8012604:	e7eb      	b.n	80125de <_svfiprintf_r+0x1c2>
 8012606:	bf00      	nop
 8012608:	0802e590 	.word	0x0802e590
 801260c:	0802e59a 	.word	0x0802e59a
 8012610:	0800ff8d 	.word	0x0800ff8d
 8012614:	08012367 	.word	0x08012367
 8012618:	0802e596 	.word	0x0802e596

0801261c <_read_r>:
 801261c:	b538      	push	{r3, r4, r5, lr}
 801261e:	4d07      	ldr	r5, [pc, #28]	; (801263c <_read_r+0x20>)
 8012620:	4604      	mov	r4, r0
 8012622:	4608      	mov	r0, r1
 8012624:	4611      	mov	r1, r2
 8012626:	2200      	movs	r2, #0
 8012628:	602a      	str	r2, [r5, #0]
 801262a:	461a      	mov	r2, r3
 801262c:	f7f2 fac0 	bl	8004bb0 <_read>
 8012630:	1c43      	adds	r3, r0, #1
 8012632:	d102      	bne.n	801263a <_read_r+0x1e>
 8012634:	682b      	ldr	r3, [r5, #0]
 8012636:	b103      	cbz	r3, 801263a <_read_r+0x1e>
 8012638:	6023      	str	r3, [r4, #0]
 801263a:	bd38      	pop	{r3, r4, r5, pc}
 801263c:	20005c88 	.word	0x20005c88

08012640 <_raise_r>:
 8012640:	291f      	cmp	r1, #31
 8012642:	b538      	push	{r3, r4, r5, lr}
 8012644:	4604      	mov	r4, r0
 8012646:	460d      	mov	r5, r1
 8012648:	d904      	bls.n	8012654 <_raise_r+0x14>
 801264a:	2316      	movs	r3, #22
 801264c:	6003      	str	r3, [r0, #0]
 801264e:	f04f 30ff 	mov.w	r0, #4294967295
 8012652:	bd38      	pop	{r3, r4, r5, pc}
 8012654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012656:	b112      	cbz	r2, 801265e <_raise_r+0x1e>
 8012658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801265c:	b94b      	cbnz	r3, 8012672 <_raise_r+0x32>
 801265e:	4620      	mov	r0, r4
 8012660:	f000 f830 	bl	80126c4 <_getpid_r>
 8012664:	462a      	mov	r2, r5
 8012666:	4601      	mov	r1, r0
 8012668:	4620      	mov	r0, r4
 801266a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801266e:	f000 b817 	b.w	80126a0 <_kill_r>
 8012672:	2b01      	cmp	r3, #1
 8012674:	d00a      	beq.n	801268c <_raise_r+0x4c>
 8012676:	1c59      	adds	r1, r3, #1
 8012678:	d103      	bne.n	8012682 <_raise_r+0x42>
 801267a:	2316      	movs	r3, #22
 801267c:	6003      	str	r3, [r0, #0]
 801267e:	2001      	movs	r0, #1
 8012680:	e7e7      	b.n	8012652 <_raise_r+0x12>
 8012682:	2400      	movs	r4, #0
 8012684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012688:	4628      	mov	r0, r5
 801268a:	4798      	blx	r3
 801268c:	2000      	movs	r0, #0
 801268e:	e7e0      	b.n	8012652 <_raise_r+0x12>

08012690 <raise>:
 8012690:	4b02      	ldr	r3, [pc, #8]	; (801269c <raise+0xc>)
 8012692:	4601      	mov	r1, r0
 8012694:	6818      	ldr	r0, [r3, #0]
 8012696:	f7ff bfd3 	b.w	8012640 <_raise_r>
 801269a:	bf00      	nop
 801269c:	200000f8 	.word	0x200000f8

080126a0 <_kill_r>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4d07      	ldr	r5, [pc, #28]	; (80126c0 <_kill_r+0x20>)
 80126a4:	2300      	movs	r3, #0
 80126a6:	4604      	mov	r4, r0
 80126a8:	4608      	mov	r0, r1
 80126aa:	4611      	mov	r1, r2
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	f7f2 fa65 	bl	8004b7c <_kill>
 80126b2:	1c43      	adds	r3, r0, #1
 80126b4:	d102      	bne.n	80126bc <_kill_r+0x1c>
 80126b6:	682b      	ldr	r3, [r5, #0]
 80126b8:	b103      	cbz	r3, 80126bc <_kill_r+0x1c>
 80126ba:	6023      	str	r3, [r4, #0]
 80126bc:	bd38      	pop	{r3, r4, r5, pc}
 80126be:	bf00      	nop
 80126c0:	20005c88 	.word	0x20005c88

080126c4 <_getpid_r>:
 80126c4:	f7f2 ba52 	b.w	8004b6c <_getpid>

080126c8 <__ascii_wctomb>:
 80126c8:	b149      	cbz	r1, 80126de <__ascii_wctomb+0x16>
 80126ca:	2aff      	cmp	r2, #255	; 0xff
 80126cc:	bf85      	ittet	hi
 80126ce:	238a      	movhi	r3, #138	; 0x8a
 80126d0:	6003      	strhi	r3, [r0, #0]
 80126d2:	700a      	strbls	r2, [r1, #0]
 80126d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80126d8:	bf98      	it	ls
 80126da:	2001      	movls	r0, #1
 80126dc:	4770      	bx	lr
 80126de:	4608      	mov	r0, r1
 80126e0:	4770      	bx	lr
	...

080126e4 <_fstat_r>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	4d07      	ldr	r5, [pc, #28]	; (8012704 <_fstat_r+0x20>)
 80126e8:	2300      	movs	r3, #0
 80126ea:	4604      	mov	r4, r0
 80126ec:	4608      	mov	r0, r1
 80126ee:	4611      	mov	r1, r2
 80126f0:	602b      	str	r3, [r5, #0]
 80126f2:	f7f2 faa2 	bl	8004c3a <_fstat>
 80126f6:	1c43      	adds	r3, r0, #1
 80126f8:	d102      	bne.n	8012700 <_fstat_r+0x1c>
 80126fa:	682b      	ldr	r3, [r5, #0]
 80126fc:	b103      	cbz	r3, 8012700 <_fstat_r+0x1c>
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	bd38      	pop	{r3, r4, r5, pc}
 8012702:	bf00      	nop
 8012704:	20005c88 	.word	0x20005c88

08012708 <_isatty_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4d06      	ldr	r5, [pc, #24]	; (8012724 <_isatty_r+0x1c>)
 801270c:	2300      	movs	r3, #0
 801270e:	4604      	mov	r4, r0
 8012710:	4608      	mov	r0, r1
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	f7f2 faa1 	bl	8004c5a <_isatty>
 8012718:	1c43      	adds	r3, r0, #1
 801271a:	d102      	bne.n	8012722 <_isatty_r+0x1a>
 801271c:	682b      	ldr	r3, [r5, #0]
 801271e:	b103      	cbz	r3, 8012722 <_isatty_r+0x1a>
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	bd38      	pop	{r3, r4, r5, pc}
 8012724:	20005c88 	.word	0x20005c88

08012728 <_malloc_usable_size_r>:
 8012728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801272c:	1f18      	subs	r0, r3, #4
 801272e:	2b00      	cmp	r3, #0
 8012730:	bfbc      	itt	lt
 8012732:	580b      	ldrlt	r3, [r1, r0]
 8012734:	18c0      	addlt	r0, r0, r3
 8012736:	4770      	bx	lr

08012738 <pow>:
 8012738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801273a:	ed2d 8b02 	vpush	{d8}
 801273e:	eeb0 8a40 	vmov.f32	s16, s0
 8012742:	eef0 8a60 	vmov.f32	s17, s1
 8012746:	ec55 4b11 	vmov	r4, r5, d1
 801274a:	f000 f891 	bl	8012870 <__ieee754_pow>
 801274e:	4622      	mov	r2, r4
 8012750:	462b      	mov	r3, r5
 8012752:	4620      	mov	r0, r4
 8012754:	4629      	mov	r1, r5
 8012756:	ec57 6b10 	vmov	r6, r7, d0
 801275a:	f7ee f9f7 	bl	8000b4c <__aeabi_dcmpun>
 801275e:	2800      	cmp	r0, #0
 8012760:	d13b      	bne.n	80127da <pow+0xa2>
 8012762:	ec51 0b18 	vmov	r0, r1, d8
 8012766:	2200      	movs	r2, #0
 8012768:	2300      	movs	r3, #0
 801276a:	f7ee f9bd 	bl	8000ae8 <__aeabi_dcmpeq>
 801276e:	b1b8      	cbz	r0, 80127a0 <pow+0x68>
 8012770:	2200      	movs	r2, #0
 8012772:	2300      	movs	r3, #0
 8012774:	4620      	mov	r0, r4
 8012776:	4629      	mov	r1, r5
 8012778:	f7ee f9b6 	bl	8000ae8 <__aeabi_dcmpeq>
 801277c:	2800      	cmp	r0, #0
 801277e:	d146      	bne.n	801280e <pow+0xd6>
 8012780:	ec45 4b10 	vmov	d0, r4, r5
 8012784:	f000 fe8d 	bl	80134a2 <finite>
 8012788:	b338      	cbz	r0, 80127da <pow+0xa2>
 801278a:	2200      	movs	r2, #0
 801278c:	2300      	movs	r3, #0
 801278e:	4620      	mov	r0, r4
 8012790:	4629      	mov	r1, r5
 8012792:	f7ee f9b3 	bl	8000afc <__aeabi_dcmplt>
 8012796:	b300      	cbz	r0, 80127da <pow+0xa2>
 8012798:	f7fd f8bc 	bl	800f914 <__errno>
 801279c:	2322      	movs	r3, #34	; 0x22
 801279e:	e01b      	b.n	80127d8 <pow+0xa0>
 80127a0:	ec47 6b10 	vmov	d0, r6, r7
 80127a4:	f000 fe7d 	bl	80134a2 <finite>
 80127a8:	b9e0      	cbnz	r0, 80127e4 <pow+0xac>
 80127aa:	eeb0 0a48 	vmov.f32	s0, s16
 80127ae:	eef0 0a68 	vmov.f32	s1, s17
 80127b2:	f000 fe76 	bl	80134a2 <finite>
 80127b6:	b1a8      	cbz	r0, 80127e4 <pow+0xac>
 80127b8:	ec45 4b10 	vmov	d0, r4, r5
 80127bc:	f000 fe71 	bl	80134a2 <finite>
 80127c0:	b180      	cbz	r0, 80127e4 <pow+0xac>
 80127c2:	4632      	mov	r2, r6
 80127c4:	463b      	mov	r3, r7
 80127c6:	4630      	mov	r0, r6
 80127c8:	4639      	mov	r1, r7
 80127ca:	f7ee f9bf 	bl	8000b4c <__aeabi_dcmpun>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0e2      	beq.n	8012798 <pow+0x60>
 80127d2:	f7fd f89f 	bl	800f914 <__errno>
 80127d6:	2321      	movs	r3, #33	; 0x21
 80127d8:	6003      	str	r3, [r0, #0]
 80127da:	ecbd 8b02 	vpop	{d8}
 80127de:	ec47 6b10 	vmov	d0, r6, r7
 80127e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127e4:	2200      	movs	r2, #0
 80127e6:	2300      	movs	r3, #0
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7ee f97c 	bl	8000ae8 <__aeabi_dcmpeq>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	d0f2      	beq.n	80127da <pow+0xa2>
 80127f4:	eeb0 0a48 	vmov.f32	s0, s16
 80127f8:	eef0 0a68 	vmov.f32	s1, s17
 80127fc:	f000 fe51 	bl	80134a2 <finite>
 8012800:	2800      	cmp	r0, #0
 8012802:	d0ea      	beq.n	80127da <pow+0xa2>
 8012804:	ec45 4b10 	vmov	d0, r4, r5
 8012808:	f000 fe4b 	bl	80134a2 <finite>
 801280c:	e7c3      	b.n	8012796 <pow+0x5e>
 801280e:	4f01      	ldr	r7, [pc, #4]	; (8012814 <pow+0xdc>)
 8012810:	2600      	movs	r6, #0
 8012812:	e7e2      	b.n	80127da <pow+0xa2>
 8012814:	3ff00000 	.word	0x3ff00000

08012818 <sqrt>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	ed2d 8b02 	vpush	{d8}
 801281e:	ec55 4b10 	vmov	r4, r5, d0
 8012822:	f000 fd53 	bl	80132cc <__ieee754_sqrt>
 8012826:	4622      	mov	r2, r4
 8012828:	462b      	mov	r3, r5
 801282a:	4620      	mov	r0, r4
 801282c:	4629      	mov	r1, r5
 801282e:	eeb0 8a40 	vmov.f32	s16, s0
 8012832:	eef0 8a60 	vmov.f32	s17, s1
 8012836:	f7ee f989 	bl	8000b4c <__aeabi_dcmpun>
 801283a:	b990      	cbnz	r0, 8012862 <sqrt+0x4a>
 801283c:	2200      	movs	r2, #0
 801283e:	2300      	movs	r3, #0
 8012840:	4620      	mov	r0, r4
 8012842:	4629      	mov	r1, r5
 8012844:	f7ee f95a 	bl	8000afc <__aeabi_dcmplt>
 8012848:	b158      	cbz	r0, 8012862 <sqrt+0x4a>
 801284a:	f7fd f863 	bl	800f914 <__errno>
 801284e:	2321      	movs	r3, #33	; 0x21
 8012850:	6003      	str	r3, [r0, #0]
 8012852:	2200      	movs	r2, #0
 8012854:	2300      	movs	r3, #0
 8012856:	4610      	mov	r0, r2
 8012858:	4619      	mov	r1, r3
 801285a:	f7ee f807 	bl	800086c <__aeabi_ddiv>
 801285e:	ec41 0b18 	vmov	d8, r0, r1
 8012862:	eeb0 0a48 	vmov.f32	s0, s16
 8012866:	eef0 0a68 	vmov.f32	s1, s17
 801286a:	ecbd 8b02 	vpop	{d8}
 801286e:	bd38      	pop	{r3, r4, r5, pc}

08012870 <__ieee754_pow>:
 8012870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012874:	ed2d 8b06 	vpush	{d8-d10}
 8012878:	b089      	sub	sp, #36	; 0x24
 801287a:	ed8d 1b00 	vstr	d1, [sp]
 801287e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012882:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012886:	ea58 0102 	orrs.w	r1, r8, r2
 801288a:	ec57 6b10 	vmov	r6, r7, d0
 801288e:	d115      	bne.n	80128bc <__ieee754_pow+0x4c>
 8012890:	19b3      	adds	r3, r6, r6
 8012892:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012896:	4152      	adcs	r2, r2
 8012898:	4299      	cmp	r1, r3
 801289a:	4b89      	ldr	r3, [pc, #548]	; (8012ac0 <__ieee754_pow+0x250>)
 801289c:	4193      	sbcs	r3, r2
 801289e:	f080 84d2 	bcs.w	8013246 <__ieee754_pow+0x9d6>
 80128a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128a6:	4630      	mov	r0, r6
 80128a8:	4639      	mov	r1, r7
 80128aa:	f7ed fcff 	bl	80002ac <__adddf3>
 80128ae:	ec41 0b10 	vmov	d0, r0, r1
 80128b2:	b009      	add	sp, #36	; 0x24
 80128b4:	ecbd 8b06 	vpop	{d8-d10}
 80128b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128bc:	4b81      	ldr	r3, [pc, #516]	; (8012ac4 <__ieee754_pow+0x254>)
 80128be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80128c2:	429c      	cmp	r4, r3
 80128c4:	ee10 aa10 	vmov	sl, s0
 80128c8:	463d      	mov	r5, r7
 80128ca:	dc06      	bgt.n	80128da <__ieee754_pow+0x6a>
 80128cc:	d101      	bne.n	80128d2 <__ieee754_pow+0x62>
 80128ce:	2e00      	cmp	r6, #0
 80128d0:	d1e7      	bne.n	80128a2 <__ieee754_pow+0x32>
 80128d2:	4598      	cmp	r8, r3
 80128d4:	dc01      	bgt.n	80128da <__ieee754_pow+0x6a>
 80128d6:	d10f      	bne.n	80128f8 <__ieee754_pow+0x88>
 80128d8:	b172      	cbz	r2, 80128f8 <__ieee754_pow+0x88>
 80128da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80128de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80128e2:	ea55 050a 	orrs.w	r5, r5, sl
 80128e6:	d1dc      	bne.n	80128a2 <__ieee754_pow+0x32>
 80128e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80128ec:	18db      	adds	r3, r3, r3
 80128ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80128f2:	4152      	adcs	r2, r2
 80128f4:	429d      	cmp	r5, r3
 80128f6:	e7d0      	b.n	801289a <__ieee754_pow+0x2a>
 80128f8:	2d00      	cmp	r5, #0
 80128fa:	da3b      	bge.n	8012974 <__ieee754_pow+0x104>
 80128fc:	4b72      	ldr	r3, [pc, #456]	; (8012ac8 <__ieee754_pow+0x258>)
 80128fe:	4598      	cmp	r8, r3
 8012900:	dc51      	bgt.n	80129a6 <__ieee754_pow+0x136>
 8012902:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012906:	4598      	cmp	r8, r3
 8012908:	f340 84ac 	ble.w	8013264 <__ieee754_pow+0x9f4>
 801290c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012910:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012914:	2b14      	cmp	r3, #20
 8012916:	dd0f      	ble.n	8012938 <__ieee754_pow+0xc8>
 8012918:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801291c:	fa22 f103 	lsr.w	r1, r2, r3
 8012920:	fa01 f303 	lsl.w	r3, r1, r3
 8012924:	4293      	cmp	r3, r2
 8012926:	f040 849d 	bne.w	8013264 <__ieee754_pow+0x9f4>
 801292a:	f001 0101 	and.w	r1, r1, #1
 801292e:	f1c1 0302 	rsb	r3, r1, #2
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	b182      	cbz	r2, 8012958 <__ieee754_pow+0xe8>
 8012936:	e05f      	b.n	80129f8 <__ieee754_pow+0x188>
 8012938:	2a00      	cmp	r2, #0
 801293a:	d15b      	bne.n	80129f4 <__ieee754_pow+0x184>
 801293c:	f1c3 0314 	rsb	r3, r3, #20
 8012940:	fa48 f103 	asr.w	r1, r8, r3
 8012944:	fa01 f303 	lsl.w	r3, r1, r3
 8012948:	4543      	cmp	r3, r8
 801294a:	f040 8488 	bne.w	801325e <__ieee754_pow+0x9ee>
 801294e:	f001 0101 	and.w	r1, r1, #1
 8012952:	f1c1 0302 	rsb	r3, r1, #2
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	4b5c      	ldr	r3, [pc, #368]	; (8012acc <__ieee754_pow+0x25c>)
 801295a:	4598      	cmp	r8, r3
 801295c:	d132      	bne.n	80129c4 <__ieee754_pow+0x154>
 801295e:	f1b9 0f00 	cmp.w	r9, #0
 8012962:	f280 8478 	bge.w	8013256 <__ieee754_pow+0x9e6>
 8012966:	4959      	ldr	r1, [pc, #356]	; (8012acc <__ieee754_pow+0x25c>)
 8012968:	4632      	mov	r2, r6
 801296a:	463b      	mov	r3, r7
 801296c:	2000      	movs	r0, #0
 801296e:	f7ed ff7d 	bl	800086c <__aeabi_ddiv>
 8012972:	e79c      	b.n	80128ae <__ieee754_pow+0x3e>
 8012974:	2300      	movs	r3, #0
 8012976:	9304      	str	r3, [sp, #16]
 8012978:	2a00      	cmp	r2, #0
 801297a:	d13d      	bne.n	80129f8 <__ieee754_pow+0x188>
 801297c:	4b51      	ldr	r3, [pc, #324]	; (8012ac4 <__ieee754_pow+0x254>)
 801297e:	4598      	cmp	r8, r3
 8012980:	d1ea      	bne.n	8012958 <__ieee754_pow+0xe8>
 8012982:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012986:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801298a:	ea53 030a 	orrs.w	r3, r3, sl
 801298e:	f000 845a 	beq.w	8013246 <__ieee754_pow+0x9d6>
 8012992:	4b4f      	ldr	r3, [pc, #316]	; (8012ad0 <__ieee754_pow+0x260>)
 8012994:	429c      	cmp	r4, r3
 8012996:	dd08      	ble.n	80129aa <__ieee754_pow+0x13a>
 8012998:	f1b9 0f00 	cmp.w	r9, #0
 801299c:	f2c0 8457 	blt.w	801324e <__ieee754_pow+0x9de>
 80129a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129a4:	e783      	b.n	80128ae <__ieee754_pow+0x3e>
 80129a6:	2302      	movs	r3, #2
 80129a8:	e7e5      	b.n	8012976 <__ieee754_pow+0x106>
 80129aa:	f1b9 0f00 	cmp.w	r9, #0
 80129ae:	f04f 0000 	mov.w	r0, #0
 80129b2:	f04f 0100 	mov.w	r1, #0
 80129b6:	f6bf af7a 	bge.w	80128ae <__ieee754_pow+0x3e>
 80129ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80129be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129c2:	e774      	b.n	80128ae <__ieee754_pow+0x3e>
 80129c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80129c8:	d106      	bne.n	80129d8 <__ieee754_pow+0x168>
 80129ca:	4632      	mov	r2, r6
 80129cc:	463b      	mov	r3, r7
 80129ce:	4630      	mov	r0, r6
 80129d0:	4639      	mov	r1, r7
 80129d2:	f7ed fe21 	bl	8000618 <__aeabi_dmul>
 80129d6:	e76a      	b.n	80128ae <__ieee754_pow+0x3e>
 80129d8:	4b3e      	ldr	r3, [pc, #248]	; (8012ad4 <__ieee754_pow+0x264>)
 80129da:	4599      	cmp	r9, r3
 80129dc:	d10c      	bne.n	80129f8 <__ieee754_pow+0x188>
 80129de:	2d00      	cmp	r5, #0
 80129e0:	db0a      	blt.n	80129f8 <__ieee754_pow+0x188>
 80129e2:	ec47 6b10 	vmov	d0, r6, r7
 80129e6:	b009      	add	sp, #36	; 0x24
 80129e8:	ecbd 8b06 	vpop	{d8-d10}
 80129ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	f000 bc6c 	b.w	80132cc <__ieee754_sqrt>
 80129f4:	2300      	movs	r3, #0
 80129f6:	9304      	str	r3, [sp, #16]
 80129f8:	ec47 6b10 	vmov	d0, r6, r7
 80129fc:	f000 fd48 	bl	8013490 <fabs>
 8012a00:	ec51 0b10 	vmov	r0, r1, d0
 8012a04:	f1ba 0f00 	cmp.w	sl, #0
 8012a08:	d129      	bne.n	8012a5e <__ieee754_pow+0x1ee>
 8012a0a:	b124      	cbz	r4, 8012a16 <__ieee754_pow+0x1a6>
 8012a0c:	4b2f      	ldr	r3, [pc, #188]	; (8012acc <__ieee754_pow+0x25c>)
 8012a0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d123      	bne.n	8012a5e <__ieee754_pow+0x1ee>
 8012a16:	f1b9 0f00 	cmp.w	r9, #0
 8012a1a:	da05      	bge.n	8012a28 <__ieee754_pow+0x1b8>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	2000      	movs	r0, #0
 8012a22:	492a      	ldr	r1, [pc, #168]	; (8012acc <__ieee754_pow+0x25c>)
 8012a24:	f7ed ff22 	bl	800086c <__aeabi_ddiv>
 8012a28:	2d00      	cmp	r5, #0
 8012a2a:	f6bf af40 	bge.w	80128ae <__ieee754_pow+0x3e>
 8012a2e:	9b04      	ldr	r3, [sp, #16]
 8012a30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a38:	4323      	orrs	r3, r4
 8012a3a:	d108      	bne.n	8012a4e <__ieee754_pow+0x1de>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	4610      	mov	r0, r2
 8012a42:	4619      	mov	r1, r3
 8012a44:	f7ed fc30 	bl	80002a8 <__aeabi_dsub>
 8012a48:	4602      	mov	r2, r0
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	e78f      	b.n	801296e <__ieee754_pow+0xfe>
 8012a4e:	9b04      	ldr	r3, [sp, #16]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	f47f af2c 	bne.w	80128ae <__ieee754_pow+0x3e>
 8012a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	e727      	b.n	80128ae <__ieee754_pow+0x3e>
 8012a5e:	0feb      	lsrs	r3, r5, #31
 8012a60:	3b01      	subs	r3, #1
 8012a62:	9306      	str	r3, [sp, #24]
 8012a64:	9a06      	ldr	r2, [sp, #24]
 8012a66:	9b04      	ldr	r3, [sp, #16]
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	d102      	bne.n	8012a72 <__ieee754_pow+0x202>
 8012a6c:	4632      	mov	r2, r6
 8012a6e:	463b      	mov	r3, r7
 8012a70:	e7e6      	b.n	8012a40 <__ieee754_pow+0x1d0>
 8012a72:	4b19      	ldr	r3, [pc, #100]	; (8012ad8 <__ieee754_pow+0x268>)
 8012a74:	4598      	cmp	r8, r3
 8012a76:	f340 80fb 	ble.w	8012c70 <__ieee754_pow+0x400>
 8012a7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012a7e:	4598      	cmp	r8, r3
 8012a80:	4b13      	ldr	r3, [pc, #76]	; (8012ad0 <__ieee754_pow+0x260>)
 8012a82:	dd0c      	ble.n	8012a9e <__ieee754_pow+0x22e>
 8012a84:	429c      	cmp	r4, r3
 8012a86:	dc0f      	bgt.n	8012aa8 <__ieee754_pow+0x238>
 8012a88:	f1b9 0f00 	cmp.w	r9, #0
 8012a8c:	da0f      	bge.n	8012aae <__ieee754_pow+0x23e>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	b009      	add	sp, #36	; 0x24
 8012a92:	ecbd 8b06 	vpop	{d8-d10}
 8012a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a9a:	f000 bcf0 	b.w	801347e <__math_oflow>
 8012a9e:	429c      	cmp	r4, r3
 8012aa0:	dbf2      	blt.n	8012a88 <__ieee754_pow+0x218>
 8012aa2:	4b0a      	ldr	r3, [pc, #40]	; (8012acc <__ieee754_pow+0x25c>)
 8012aa4:	429c      	cmp	r4, r3
 8012aa6:	dd19      	ble.n	8012adc <__ieee754_pow+0x26c>
 8012aa8:	f1b9 0f00 	cmp.w	r9, #0
 8012aac:	dcef      	bgt.n	8012a8e <__ieee754_pow+0x21e>
 8012aae:	2000      	movs	r0, #0
 8012ab0:	b009      	add	sp, #36	; 0x24
 8012ab2:	ecbd 8b06 	vpop	{d8-d10}
 8012ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aba:	f000 bcd7 	b.w	801346c <__math_uflow>
 8012abe:	bf00      	nop
 8012ac0:	fff00000 	.word	0xfff00000
 8012ac4:	7ff00000 	.word	0x7ff00000
 8012ac8:	433fffff 	.word	0x433fffff
 8012acc:	3ff00000 	.word	0x3ff00000
 8012ad0:	3fefffff 	.word	0x3fefffff
 8012ad4:	3fe00000 	.word	0x3fe00000
 8012ad8:	41e00000 	.word	0x41e00000
 8012adc:	4b60      	ldr	r3, [pc, #384]	; (8012c60 <__ieee754_pow+0x3f0>)
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f7ed fbe2 	bl	80002a8 <__aeabi_dsub>
 8012ae4:	a354      	add	r3, pc, #336	; (adr r3, 8012c38 <__ieee754_pow+0x3c8>)
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	4604      	mov	r4, r0
 8012aec:	460d      	mov	r5, r1
 8012aee:	f7ed fd93 	bl	8000618 <__aeabi_dmul>
 8012af2:	a353      	add	r3, pc, #332	; (adr r3, 8012c40 <__ieee754_pow+0x3d0>)
 8012af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af8:	4606      	mov	r6, r0
 8012afa:	460f      	mov	r7, r1
 8012afc:	4620      	mov	r0, r4
 8012afe:	4629      	mov	r1, r5
 8012b00:	f7ed fd8a 	bl	8000618 <__aeabi_dmul>
 8012b04:	4b57      	ldr	r3, [pc, #348]	; (8012c64 <__ieee754_pow+0x3f4>)
 8012b06:	4682      	mov	sl, r0
 8012b08:	468b      	mov	fp, r1
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	4629      	mov	r1, r5
 8012b10:	f7ed fd82 	bl	8000618 <__aeabi_dmul>
 8012b14:	4602      	mov	r2, r0
 8012b16:	460b      	mov	r3, r1
 8012b18:	a14b      	add	r1, pc, #300	; (adr r1, 8012c48 <__ieee754_pow+0x3d8>)
 8012b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b1e:	f7ed fbc3 	bl	80002a8 <__aeabi_dsub>
 8012b22:	4622      	mov	r2, r4
 8012b24:	462b      	mov	r3, r5
 8012b26:	f7ed fd77 	bl	8000618 <__aeabi_dmul>
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	2000      	movs	r0, #0
 8012b30:	494d      	ldr	r1, [pc, #308]	; (8012c68 <__ieee754_pow+0x3f8>)
 8012b32:	f7ed fbb9 	bl	80002a8 <__aeabi_dsub>
 8012b36:	4622      	mov	r2, r4
 8012b38:	4680      	mov	r8, r0
 8012b3a:	4689      	mov	r9, r1
 8012b3c:	462b      	mov	r3, r5
 8012b3e:	4620      	mov	r0, r4
 8012b40:	4629      	mov	r1, r5
 8012b42:	f7ed fd69 	bl	8000618 <__aeabi_dmul>
 8012b46:	4602      	mov	r2, r0
 8012b48:	460b      	mov	r3, r1
 8012b4a:	4640      	mov	r0, r8
 8012b4c:	4649      	mov	r1, r9
 8012b4e:	f7ed fd63 	bl	8000618 <__aeabi_dmul>
 8012b52:	a33f      	add	r3, pc, #252	; (adr r3, 8012c50 <__ieee754_pow+0x3e0>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fd5e 	bl	8000618 <__aeabi_dmul>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4650      	mov	r0, sl
 8012b62:	4659      	mov	r1, fp
 8012b64:	f7ed fba0 	bl	80002a8 <__aeabi_dsub>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	4680      	mov	r8, r0
 8012b6e:	4689      	mov	r9, r1
 8012b70:	4630      	mov	r0, r6
 8012b72:	4639      	mov	r1, r7
 8012b74:	f7ed fb9a 	bl	80002ac <__adddf3>
 8012b78:	2000      	movs	r0, #0
 8012b7a:	4632      	mov	r2, r6
 8012b7c:	463b      	mov	r3, r7
 8012b7e:	4604      	mov	r4, r0
 8012b80:	460d      	mov	r5, r1
 8012b82:	f7ed fb91 	bl	80002a8 <__aeabi_dsub>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed fb8b 	bl	80002a8 <__aeabi_dsub>
 8012b92:	9b04      	ldr	r3, [sp, #16]
 8012b94:	9a06      	ldr	r2, [sp, #24]
 8012b96:	3b01      	subs	r3, #1
 8012b98:	4313      	orrs	r3, r2
 8012b9a:	4682      	mov	sl, r0
 8012b9c:	468b      	mov	fp, r1
 8012b9e:	f040 81e7 	bne.w	8012f70 <__ieee754_pow+0x700>
 8012ba2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012c58 <__ieee754_pow+0x3e8>
 8012ba6:	eeb0 8a47 	vmov.f32	s16, s14
 8012baa:	eef0 8a67 	vmov.f32	s17, s15
 8012bae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012bb2:	2600      	movs	r6, #0
 8012bb4:	4632      	mov	r2, r6
 8012bb6:	463b      	mov	r3, r7
 8012bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bbc:	f7ed fb74 	bl	80002a8 <__aeabi_dsub>
 8012bc0:	4622      	mov	r2, r4
 8012bc2:	462b      	mov	r3, r5
 8012bc4:	f7ed fd28 	bl	8000618 <__aeabi_dmul>
 8012bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bcc:	4680      	mov	r8, r0
 8012bce:	4689      	mov	r9, r1
 8012bd0:	4650      	mov	r0, sl
 8012bd2:	4659      	mov	r1, fp
 8012bd4:	f7ed fd20 	bl	8000618 <__aeabi_dmul>
 8012bd8:	4602      	mov	r2, r0
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4640      	mov	r0, r8
 8012bde:	4649      	mov	r1, r9
 8012be0:	f7ed fb64 	bl	80002ac <__adddf3>
 8012be4:	4632      	mov	r2, r6
 8012be6:	463b      	mov	r3, r7
 8012be8:	4680      	mov	r8, r0
 8012bea:	4689      	mov	r9, r1
 8012bec:	4620      	mov	r0, r4
 8012bee:	4629      	mov	r1, r5
 8012bf0:	f7ed fd12 	bl	8000618 <__aeabi_dmul>
 8012bf4:	460b      	mov	r3, r1
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	4649      	mov	r1, r9
 8012bfe:	4640      	mov	r0, r8
 8012c00:	f7ed fb54 	bl	80002ac <__adddf3>
 8012c04:	4b19      	ldr	r3, [pc, #100]	; (8012c6c <__ieee754_pow+0x3fc>)
 8012c06:	4299      	cmp	r1, r3
 8012c08:	ec45 4b19 	vmov	d9, r4, r5
 8012c0c:	4606      	mov	r6, r0
 8012c0e:	460f      	mov	r7, r1
 8012c10:	468b      	mov	fp, r1
 8012c12:	f340 82f1 	ble.w	80131f8 <__ieee754_pow+0x988>
 8012c16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012c1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012c1e:	4303      	orrs	r3, r0
 8012c20:	f000 81e4 	beq.w	8012fec <__ieee754_pow+0x77c>
 8012c24:	ec51 0b18 	vmov	r0, r1, d8
 8012c28:	2200      	movs	r2, #0
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	f7ed ff66 	bl	8000afc <__aeabi_dcmplt>
 8012c30:	3800      	subs	r0, #0
 8012c32:	bf18      	it	ne
 8012c34:	2001      	movne	r0, #1
 8012c36:	e72b      	b.n	8012a90 <__ieee754_pow+0x220>
 8012c38:	60000000 	.word	0x60000000
 8012c3c:	3ff71547 	.word	0x3ff71547
 8012c40:	f85ddf44 	.word	0xf85ddf44
 8012c44:	3e54ae0b 	.word	0x3e54ae0b
 8012c48:	55555555 	.word	0x55555555
 8012c4c:	3fd55555 	.word	0x3fd55555
 8012c50:	652b82fe 	.word	0x652b82fe
 8012c54:	3ff71547 	.word	0x3ff71547
 8012c58:	00000000 	.word	0x00000000
 8012c5c:	bff00000 	.word	0xbff00000
 8012c60:	3ff00000 	.word	0x3ff00000
 8012c64:	3fd00000 	.word	0x3fd00000
 8012c68:	3fe00000 	.word	0x3fe00000
 8012c6c:	408fffff 	.word	0x408fffff
 8012c70:	4bd5      	ldr	r3, [pc, #852]	; (8012fc8 <__ieee754_pow+0x758>)
 8012c72:	402b      	ands	r3, r5
 8012c74:	2200      	movs	r2, #0
 8012c76:	b92b      	cbnz	r3, 8012c84 <__ieee754_pow+0x414>
 8012c78:	4bd4      	ldr	r3, [pc, #848]	; (8012fcc <__ieee754_pow+0x75c>)
 8012c7a:	f7ed fccd 	bl	8000618 <__aeabi_dmul>
 8012c7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012c82:	460c      	mov	r4, r1
 8012c84:	1523      	asrs	r3, r4, #20
 8012c86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012c8a:	4413      	add	r3, r2
 8012c8c:	9305      	str	r3, [sp, #20]
 8012c8e:	4bd0      	ldr	r3, [pc, #832]	; (8012fd0 <__ieee754_pow+0x760>)
 8012c90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012c94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012c98:	429c      	cmp	r4, r3
 8012c9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012c9e:	dd08      	ble.n	8012cb2 <__ieee754_pow+0x442>
 8012ca0:	4bcc      	ldr	r3, [pc, #816]	; (8012fd4 <__ieee754_pow+0x764>)
 8012ca2:	429c      	cmp	r4, r3
 8012ca4:	f340 8162 	ble.w	8012f6c <__ieee754_pow+0x6fc>
 8012ca8:	9b05      	ldr	r3, [sp, #20]
 8012caa:	3301      	adds	r3, #1
 8012cac:	9305      	str	r3, [sp, #20]
 8012cae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012cb2:	2400      	movs	r4, #0
 8012cb4:	00e3      	lsls	r3, r4, #3
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	4bc7      	ldr	r3, [pc, #796]	; (8012fd8 <__ieee754_pow+0x768>)
 8012cba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012cbe:	ed93 7b00 	vldr	d7, [r3]
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	ec53 2b17 	vmov	r2, r3, d7
 8012cc8:	eeb0 9a47 	vmov.f32	s18, s14
 8012ccc:	eef0 9a67 	vmov.f32	s19, s15
 8012cd0:	4682      	mov	sl, r0
 8012cd2:	f7ed fae9 	bl	80002a8 <__aeabi_dsub>
 8012cd6:	4652      	mov	r2, sl
 8012cd8:	4606      	mov	r6, r0
 8012cda:	460f      	mov	r7, r1
 8012cdc:	462b      	mov	r3, r5
 8012cde:	ec51 0b19 	vmov	r0, r1, d9
 8012ce2:	f7ed fae3 	bl	80002ac <__adddf3>
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	2000      	movs	r0, #0
 8012cec:	49bb      	ldr	r1, [pc, #748]	; (8012fdc <__ieee754_pow+0x76c>)
 8012cee:	f7ed fdbd 	bl	800086c <__aeabi_ddiv>
 8012cf2:	ec41 0b1a 	vmov	d10, r0, r1
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	4630      	mov	r0, r6
 8012cfc:	4639      	mov	r1, r7
 8012cfe:	f7ed fc8b 	bl	8000618 <__aeabi_dmul>
 8012d02:	2300      	movs	r3, #0
 8012d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d08:	9302      	str	r3, [sp, #8]
 8012d0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012d0e:	46ab      	mov	fp, r5
 8012d10:	106d      	asrs	r5, r5, #1
 8012d12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012d16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012d1a:	ec41 0b18 	vmov	d8, r0, r1
 8012d1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012d22:	2200      	movs	r2, #0
 8012d24:	4640      	mov	r0, r8
 8012d26:	4649      	mov	r1, r9
 8012d28:	4614      	mov	r4, r2
 8012d2a:	461d      	mov	r5, r3
 8012d2c:	f7ed fc74 	bl	8000618 <__aeabi_dmul>
 8012d30:	4602      	mov	r2, r0
 8012d32:	460b      	mov	r3, r1
 8012d34:	4630      	mov	r0, r6
 8012d36:	4639      	mov	r1, r7
 8012d38:	f7ed fab6 	bl	80002a8 <__aeabi_dsub>
 8012d3c:	ec53 2b19 	vmov	r2, r3, d9
 8012d40:	4606      	mov	r6, r0
 8012d42:	460f      	mov	r7, r1
 8012d44:	4620      	mov	r0, r4
 8012d46:	4629      	mov	r1, r5
 8012d48:	f7ed faae 	bl	80002a8 <__aeabi_dsub>
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	460b      	mov	r3, r1
 8012d50:	4650      	mov	r0, sl
 8012d52:	4659      	mov	r1, fp
 8012d54:	f7ed faa8 	bl	80002a8 <__aeabi_dsub>
 8012d58:	4642      	mov	r2, r8
 8012d5a:	464b      	mov	r3, r9
 8012d5c:	f7ed fc5c 	bl	8000618 <__aeabi_dmul>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4630      	mov	r0, r6
 8012d66:	4639      	mov	r1, r7
 8012d68:	f7ed fa9e 	bl	80002a8 <__aeabi_dsub>
 8012d6c:	ec53 2b1a 	vmov	r2, r3, d10
 8012d70:	f7ed fc52 	bl	8000618 <__aeabi_dmul>
 8012d74:	ec53 2b18 	vmov	r2, r3, d8
 8012d78:	ec41 0b19 	vmov	d9, r0, r1
 8012d7c:	ec51 0b18 	vmov	r0, r1, d8
 8012d80:	f7ed fc4a 	bl	8000618 <__aeabi_dmul>
 8012d84:	a37c      	add	r3, pc, #496	; (adr r3, 8012f78 <__ieee754_pow+0x708>)
 8012d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	f7ed fc43 	bl	8000618 <__aeabi_dmul>
 8012d92:	a37b      	add	r3, pc, #492	; (adr r3, 8012f80 <__ieee754_pow+0x710>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed fa88 	bl	80002ac <__adddf3>
 8012d9c:	4622      	mov	r2, r4
 8012d9e:	462b      	mov	r3, r5
 8012da0:	f7ed fc3a 	bl	8000618 <__aeabi_dmul>
 8012da4:	a378      	add	r3, pc, #480	; (adr r3, 8012f88 <__ieee754_pow+0x718>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	f7ed fa7f 	bl	80002ac <__adddf3>
 8012dae:	4622      	mov	r2, r4
 8012db0:	462b      	mov	r3, r5
 8012db2:	f7ed fc31 	bl	8000618 <__aeabi_dmul>
 8012db6:	a376      	add	r3, pc, #472	; (adr r3, 8012f90 <__ieee754_pow+0x720>)
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	f7ed fa76 	bl	80002ac <__adddf3>
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	f7ed fc28 	bl	8000618 <__aeabi_dmul>
 8012dc8:	a373      	add	r3, pc, #460	; (adr r3, 8012f98 <__ieee754_pow+0x728>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fa6d 	bl	80002ac <__adddf3>
 8012dd2:	4622      	mov	r2, r4
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	f7ed fc1f 	bl	8000618 <__aeabi_dmul>
 8012dda:	a371      	add	r3, pc, #452	; (adr r3, 8012fa0 <__ieee754_pow+0x730>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	f7ed fa64 	bl	80002ac <__adddf3>
 8012de4:	4622      	mov	r2, r4
 8012de6:	4606      	mov	r6, r0
 8012de8:	460f      	mov	r7, r1
 8012dea:	462b      	mov	r3, r5
 8012dec:	4620      	mov	r0, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fc12 	bl	8000618 <__aeabi_dmul>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	4630      	mov	r0, r6
 8012dfa:	4639      	mov	r1, r7
 8012dfc:	f7ed fc0c 	bl	8000618 <__aeabi_dmul>
 8012e00:	4642      	mov	r2, r8
 8012e02:	4604      	mov	r4, r0
 8012e04:	460d      	mov	r5, r1
 8012e06:	464b      	mov	r3, r9
 8012e08:	ec51 0b18 	vmov	r0, r1, d8
 8012e0c:	f7ed fa4e 	bl	80002ac <__adddf3>
 8012e10:	ec53 2b19 	vmov	r2, r3, d9
 8012e14:	f7ed fc00 	bl	8000618 <__aeabi_dmul>
 8012e18:	4622      	mov	r2, r4
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	f7ed fa46 	bl	80002ac <__adddf3>
 8012e20:	4642      	mov	r2, r8
 8012e22:	4682      	mov	sl, r0
 8012e24:	468b      	mov	fp, r1
 8012e26:	464b      	mov	r3, r9
 8012e28:	4640      	mov	r0, r8
 8012e2a:	4649      	mov	r1, r9
 8012e2c:	f7ed fbf4 	bl	8000618 <__aeabi_dmul>
 8012e30:	4b6b      	ldr	r3, [pc, #428]	; (8012fe0 <__ieee754_pow+0x770>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	4606      	mov	r6, r0
 8012e36:	460f      	mov	r7, r1
 8012e38:	f7ed fa38 	bl	80002ac <__adddf3>
 8012e3c:	4652      	mov	r2, sl
 8012e3e:	465b      	mov	r3, fp
 8012e40:	f7ed fa34 	bl	80002ac <__adddf3>
 8012e44:	2000      	movs	r0, #0
 8012e46:	4604      	mov	r4, r0
 8012e48:	460d      	mov	r5, r1
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4640      	mov	r0, r8
 8012e50:	4649      	mov	r1, r9
 8012e52:	f7ed fbe1 	bl	8000618 <__aeabi_dmul>
 8012e56:	4b62      	ldr	r3, [pc, #392]	; (8012fe0 <__ieee754_pow+0x770>)
 8012e58:	4680      	mov	r8, r0
 8012e5a:	4689      	mov	r9, r1
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	4620      	mov	r0, r4
 8012e60:	4629      	mov	r1, r5
 8012e62:	f7ed fa21 	bl	80002a8 <__aeabi_dsub>
 8012e66:	4632      	mov	r2, r6
 8012e68:	463b      	mov	r3, r7
 8012e6a:	f7ed fa1d 	bl	80002a8 <__aeabi_dsub>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	460b      	mov	r3, r1
 8012e72:	4650      	mov	r0, sl
 8012e74:	4659      	mov	r1, fp
 8012e76:	f7ed fa17 	bl	80002a8 <__aeabi_dsub>
 8012e7a:	ec53 2b18 	vmov	r2, r3, d8
 8012e7e:	f7ed fbcb 	bl	8000618 <__aeabi_dmul>
 8012e82:	4622      	mov	r2, r4
 8012e84:	4606      	mov	r6, r0
 8012e86:	460f      	mov	r7, r1
 8012e88:	462b      	mov	r3, r5
 8012e8a:	ec51 0b19 	vmov	r0, r1, d9
 8012e8e:	f7ed fbc3 	bl	8000618 <__aeabi_dmul>
 8012e92:	4602      	mov	r2, r0
 8012e94:	460b      	mov	r3, r1
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed fa07 	bl	80002ac <__adddf3>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	460f      	mov	r7, r1
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	f7ed f9ff 	bl	80002ac <__adddf3>
 8012eae:	a33e      	add	r3, pc, #248	; (adr r3, 8012fa8 <__ieee754_pow+0x738>)
 8012eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb4:	2000      	movs	r0, #0
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	460d      	mov	r5, r1
 8012eba:	f7ed fbad 	bl	8000618 <__aeabi_dmul>
 8012ebe:	4642      	mov	r2, r8
 8012ec0:	ec41 0b18 	vmov	d8, r0, r1
 8012ec4:	464b      	mov	r3, r9
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	4629      	mov	r1, r5
 8012eca:	f7ed f9ed 	bl	80002a8 <__aeabi_dsub>
 8012ece:	4602      	mov	r2, r0
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	4630      	mov	r0, r6
 8012ed4:	4639      	mov	r1, r7
 8012ed6:	f7ed f9e7 	bl	80002a8 <__aeabi_dsub>
 8012eda:	a335      	add	r3, pc, #212	; (adr r3, 8012fb0 <__ieee754_pow+0x740>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f7ed fb9a 	bl	8000618 <__aeabi_dmul>
 8012ee4:	a334      	add	r3, pc, #208	; (adr r3, 8012fb8 <__ieee754_pow+0x748>)
 8012ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eea:	4606      	mov	r6, r0
 8012eec:	460f      	mov	r7, r1
 8012eee:	4620      	mov	r0, r4
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	f7ed fb91 	bl	8000618 <__aeabi_dmul>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	460b      	mov	r3, r1
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	f7ed f9d5 	bl	80002ac <__adddf3>
 8012f02:	9a07      	ldr	r2, [sp, #28]
 8012f04:	4b37      	ldr	r3, [pc, #220]	; (8012fe4 <__ieee754_pow+0x774>)
 8012f06:	4413      	add	r3, r2
 8012f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0c:	f7ed f9ce 	bl	80002ac <__adddf3>
 8012f10:	4682      	mov	sl, r0
 8012f12:	9805      	ldr	r0, [sp, #20]
 8012f14:	468b      	mov	fp, r1
 8012f16:	f7ed fb15 	bl	8000544 <__aeabi_i2d>
 8012f1a:	9a07      	ldr	r2, [sp, #28]
 8012f1c:	4b32      	ldr	r3, [pc, #200]	; (8012fe8 <__ieee754_pow+0x778>)
 8012f1e:	4413      	add	r3, r2
 8012f20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f24:	4606      	mov	r6, r0
 8012f26:	460f      	mov	r7, r1
 8012f28:	4652      	mov	r2, sl
 8012f2a:	465b      	mov	r3, fp
 8012f2c:	ec51 0b18 	vmov	r0, r1, d8
 8012f30:	f7ed f9bc 	bl	80002ac <__adddf3>
 8012f34:	4642      	mov	r2, r8
 8012f36:	464b      	mov	r3, r9
 8012f38:	f7ed f9b8 	bl	80002ac <__adddf3>
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	463b      	mov	r3, r7
 8012f40:	f7ed f9b4 	bl	80002ac <__adddf3>
 8012f44:	2000      	movs	r0, #0
 8012f46:	4632      	mov	r2, r6
 8012f48:	463b      	mov	r3, r7
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	460d      	mov	r5, r1
 8012f4e:	f7ed f9ab 	bl	80002a8 <__aeabi_dsub>
 8012f52:	4642      	mov	r2, r8
 8012f54:	464b      	mov	r3, r9
 8012f56:	f7ed f9a7 	bl	80002a8 <__aeabi_dsub>
 8012f5a:	ec53 2b18 	vmov	r2, r3, d8
 8012f5e:	f7ed f9a3 	bl	80002a8 <__aeabi_dsub>
 8012f62:	4602      	mov	r2, r0
 8012f64:	460b      	mov	r3, r1
 8012f66:	4650      	mov	r0, sl
 8012f68:	4659      	mov	r1, fp
 8012f6a:	e610      	b.n	8012b8e <__ieee754_pow+0x31e>
 8012f6c:	2401      	movs	r4, #1
 8012f6e:	e6a1      	b.n	8012cb4 <__ieee754_pow+0x444>
 8012f70:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012fc0 <__ieee754_pow+0x750>
 8012f74:	e617      	b.n	8012ba6 <__ieee754_pow+0x336>
 8012f76:	bf00      	nop
 8012f78:	4a454eef 	.word	0x4a454eef
 8012f7c:	3fca7e28 	.word	0x3fca7e28
 8012f80:	93c9db65 	.word	0x93c9db65
 8012f84:	3fcd864a 	.word	0x3fcd864a
 8012f88:	a91d4101 	.word	0xa91d4101
 8012f8c:	3fd17460 	.word	0x3fd17460
 8012f90:	518f264d 	.word	0x518f264d
 8012f94:	3fd55555 	.word	0x3fd55555
 8012f98:	db6fabff 	.word	0xdb6fabff
 8012f9c:	3fdb6db6 	.word	0x3fdb6db6
 8012fa0:	33333303 	.word	0x33333303
 8012fa4:	3fe33333 	.word	0x3fe33333
 8012fa8:	e0000000 	.word	0xe0000000
 8012fac:	3feec709 	.word	0x3feec709
 8012fb0:	dc3a03fd 	.word	0xdc3a03fd
 8012fb4:	3feec709 	.word	0x3feec709
 8012fb8:	145b01f5 	.word	0x145b01f5
 8012fbc:	be3e2fe0 	.word	0xbe3e2fe0
 8012fc0:	00000000 	.word	0x00000000
 8012fc4:	3ff00000 	.word	0x3ff00000
 8012fc8:	7ff00000 	.word	0x7ff00000
 8012fcc:	43400000 	.word	0x43400000
 8012fd0:	0003988e 	.word	0x0003988e
 8012fd4:	000bb679 	.word	0x000bb679
 8012fd8:	0802e930 	.word	0x0802e930
 8012fdc:	3ff00000 	.word	0x3ff00000
 8012fe0:	40080000 	.word	0x40080000
 8012fe4:	0802e950 	.word	0x0802e950
 8012fe8:	0802e940 	.word	0x0802e940
 8012fec:	a3b5      	add	r3, pc, #724	; (adr r3, 80132c4 <__ieee754_pow+0xa54>)
 8012fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff2:	4640      	mov	r0, r8
 8012ff4:	4649      	mov	r1, r9
 8012ff6:	f7ed f959 	bl	80002ac <__adddf3>
 8012ffa:	4622      	mov	r2, r4
 8012ffc:	ec41 0b1a 	vmov	d10, r0, r1
 8013000:	462b      	mov	r3, r5
 8013002:	4630      	mov	r0, r6
 8013004:	4639      	mov	r1, r7
 8013006:	f7ed f94f 	bl	80002a8 <__aeabi_dsub>
 801300a:	4602      	mov	r2, r0
 801300c:	460b      	mov	r3, r1
 801300e:	ec51 0b1a 	vmov	r0, r1, d10
 8013012:	f7ed fd91 	bl	8000b38 <__aeabi_dcmpgt>
 8013016:	2800      	cmp	r0, #0
 8013018:	f47f ae04 	bne.w	8012c24 <__ieee754_pow+0x3b4>
 801301c:	4aa4      	ldr	r2, [pc, #656]	; (80132b0 <__ieee754_pow+0xa40>)
 801301e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013022:	4293      	cmp	r3, r2
 8013024:	f340 8108 	ble.w	8013238 <__ieee754_pow+0x9c8>
 8013028:	151b      	asrs	r3, r3, #20
 801302a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801302e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013032:	fa4a f303 	asr.w	r3, sl, r3
 8013036:	445b      	add	r3, fp
 8013038:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801303c:	4e9d      	ldr	r6, [pc, #628]	; (80132b4 <__ieee754_pow+0xa44>)
 801303e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013042:	4116      	asrs	r6, r2
 8013044:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013048:	2000      	movs	r0, #0
 801304a:	ea23 0106 	bic.w	r1, r3, r6
 801304e:	f1c2 0214 	rsb	r2, r2, #20
 8013052:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013056:	fa4a fa02 	asr.w	sl, sl, r2
 801305a:	f1bb 0f00 	cmp.w	fp, #0
 801305e:	4602      	mov	r2, r0
 8013060:	460b      	mov	r3, r1
 8013062:	4620      	mov	r0, r4
 8013064:	4629      	mov	r1, r5
 8013066:	bfb8      	it	lt
 8013068:	f1ca 0a00 	rsblt	sl, sl, #0
 801306c:	f7ed f91c 	bl	80002a8 <__aeabi_dsub>
 8013070:	ec41 0b19 	vmov	d9, r0, r1
 8013074:	4642      	mov	r2, r8
 8013076:	464b      	mov	r3, r9
 8013078:	ec51 0b19 	vmov	r0, r1, d9
 801307c:	f7ed f916 	bl	80002ac <__adddf3>
 8013080:	a37b      	add	r3, pc, #492	; (adr r3, 8013270 <__ieee754_pow+0xa00>)
 8013082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013086:	2000      	movs	r0, #0
 8013088:	4604      	mov	r4, r0
 801308a:	460d      	mov	r5, r1
 801308c:	f7ed fac4 	bl	8000618 <__aeabi_dmul>
 8013090:	ec53 2b19 	vmov	r2, r3, d9
 8013094:	4606      	mov	r6, r0
 8013096:	460f      	mov	r7, r1
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed f904 	bl	80002a8 <__aeabi_dsub>
 80130a0:	4602      	mov	r2, r0
 80130a2:	460b      	mov	r3, r1
 80130a4:	4640      	mov	r0, r8
 80130a6:	4649      	mov	r1, r9
 80130a8:	f7ed f8fe 	bl	80002a8 <__aeabi_dsub>
 80130ac:	a372      	add	r3, pc, #456	; (adr r3, 8013278 <__ieee754_pow+0xa08>)
 80130ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b2:	f7ed fab1 	bl	8000618 <__aeabi_dmul>
 80130b6:	a372      	add	r3, pc, #456	; (adr r3, 8013280 <__ieee754_pow+0xa10>)
 80130b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130bc:	4680      	mov	r8, r0
 80130be:	4689      	mov	r9, r1
 80130c0:	4620      	mov	r0, r4
 80130c2:	4629      	mov	r1, r5
 80130c4:	f7ed faa8 	bl	8000618 <__aeabi_dmul>
 80130c8:	4602      	mov	r2, r0
 80130ca:	460b      	mov	r3, r1
 80130cc:	4640      	mov	r0, r8
 80130ce:	4649      	mov	r1, r9
 80130d0:	f7ed f8ec 	bl	80002ac <__adddf3>
 80130d4:	4604      	mov	r4, r0
 80130d6:	460d      	mov	r5, r1
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	4630      	mov	r0, r6
 80130de:	4639      	mov	r1, r7
 80130e0:	f7ed f8e4 	bl	80002ac <__adddf3>
 80130e4:	4632      	mov	r2, r6
 80130e6:	463b      	mov	r3, r7
 80130e8:	4680      	mov	r8, r0
 80130ea:	4689      	mov	r9, r1
 80130ec:	f7ed f8dc 	bl	80002a8 <__aeabi_dsub>
 80130f0:	4602      	mov	r2, r0
 80130f2:	460b      	mov	r3, r1
 80130f4:	4620      	mov	r0, r4
 80130f6:	4629      	mov	r1, r5
 80130f8:	f7ed f8d6 	bl	80002a8 <__aeabi_dsub>
 80130fc:	4642      	mov	r2, r8
 80130fe:	4606      	mov	r6, r0
 8013100:	460f      	mov	r7, r1
 8013102:	464b      	mov	r3, r9
 8013104:	4640      	mov	r0, r8
 8013106:	4649      	mov	r1, r9
 8013108:	f7ed fa86 	bl	8000618 <__aeabi_dmul>
 801310c:	a35e      	add	r3, pc, #376	; (adr r3, 8013288 <__ieee754_pow+0xa18>)
 801310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013112:	4604      	mov	r4, r0
 8013114:	460d      	mov	r5, r1
 8013116:	f7ed fa7f 	bl	8000618 <__aeabi_dmul>
 801311a:	a35d      	add	r3, pc, #372	; (adr r3, 8013290 <__ieee754_pow+0xa20>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	f7ed f8c2 	bl	80002a8 <__aeabi_dsub>
 8013124:	4622      	mov	r2, r4
 8013126:	462b      	mov	r3, r5
 8013128:	f7ed fa76 	bl	8000618 <__aeabi_dmul>
 801312c:	a35a      	add	r3, pc, #360	; (adr r3, 8013298 <__ieee754_pow+0xa28>)
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	f7ed f8bb 	bl	80002ac <__adddf3>
 8013136:	4622      	mov	r2, r4
 8013138:	462b      	mov	r3, r5
 801313a:	f7ed fa6d 	bl	8000618 <__aeabi_dmul>
 801313e:	a358      	add	r3, pc, #352	; (adr r3, 80132a0 <__ieee754_pow+0xa30>)
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f7ed f8b0 	bl	80002a8 <__aeabi_dsub>
 8013148:	4622      	mov	r2, r4
 801314a:	462b      	mov	r3, r5
 801314c:	f7ed fa64 	bl	8000618 <__aeabi_dmul>
 8013150:	a355      	add	r3, pc, #340	; (adr r3, 80132a8 <__ieee754_pow+0xa38>)
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	f7ed f8a9 	bl	80002ac <__adddf3>
 801315a:	4622      	mov	r2, r4
 801315c:	462b      	mov	r3, r5
 801315e:	f7ed fa5b 	bl	8000618 <__aeabi_dmul>
 8013162:	4602      	mov	r2, r0
 8013164:	460b      	mov	r3, r1
 8013166:	4640      	mov	r0, r8
 8013168:	4649      	mov	r1, r9
 801316a:	f7ed f89d 	bl	80002a8 <__aeabi_dsub>
 801316e:	4604      	mov	r4, r0
 8013170:	460d      	mov	r5, r1
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4640      	mov	r0, r8
 8013178:	4649      	mov	r1, r9
 801317a:	f7ed fa4d 	bl	8000618 <__aeabi_dmul>
 801317e:	2200      	movs	r2, #0
 8013180:	ec41 0b19 	vmov	d9, r0, r1
 8013184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013188:	4620      	mov	r0, r4
 801318a:	4629      	mov	r1, r5
 801318c:	f7ed f88c 	bl	80002a8 <__aeabi_dsub>
 8013190:	4602      	mov	r2, r0
 8013192:	460b      	mov	r3, r1
 8013194:	ec51 0b19 	vmov	r0, r1, d9
 8013198:	f7ed fb68 	bl	800086c <__aeabi_ddiv>
 801319c:	4632      	mov	r2, r6
 801319e:	4604      	mov	r4, r0
 80131a0:	460d      	mov	r5, r1
 80131a2:	463b      	mov	r3, r7
 80131a4:	4640      	mov	r0, r8
 80131a6:	4649      	mov	r1, r9
 80131a8:	f7ed fa36 	bl	8000618 <__aeabi_dmul>
 80131ac:	4632      	mov	r2, r6
 80131ae:	463b      	mov	r3, r7
 80131b0:	f7ed f87c 	bl	80002ac <__adddf3>
 80131b4:	4602      	mov	r2, r0
 80131b6:	460b      	mov	r3, r1
 80131b8:	4620      	mov	r0, r4
 80131ba:	4629      	mov	r1, r5
 80131bc:	f7ed f874 	bl	80002a8 <__aeabi_dsub>
 80131c0:	4642      	mov	r2, r8
 80131c2:	464b      	mov	r3, r9
 80131c4:	f7ed f870 	bl	80002a8 <__aeabi_dsub>
 80131c8:	460b      	mov	r3, r1
 80131ca:	4602      	mov	r2, r0
 80131cc:	493a      	ldr	r1, [pc, #232]	; (80132b8 <__ieee754_pow+0xa48>)
 80131ce:	2000      	movs	r0, #0
 80131d0:	f7ed f86a 	bl	80002a8 <__aeabi_dsub>
 80131d4:	ec41 0b10 	vmov	d0, r0, r1
 80131d8:	ee10 3a90 	vmov	r3, s1
 80131dc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80131e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131e4:	da2b      	bge.n	801323e <__ieee754_pow+0x9ce>
 80131e6:	4650      	mov	r0, sl
 80131e8:	f000 f966 	bl	80134b8 <scalbn>
 80131ec:	ec51 0b10 	vmov	r0, r1, d0
 80131f0:	ec53 2b18 	vmov	r2, r3, d8
 80131f4:	f7ff bbed 	b.w	80129d2 <__ieee754_pow+0x162>
 80131f8:	4b30      	ldr	r3, [pc, #192]	; (80132bc <__ieee754_pow+0xa4c>)
 80131fa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80131fe:	429e      	cmp	r6, r3
 8013200:	f77f af0c 	ble.w	801301c <__ieee754_pow+0x7ac>
 8013204:	4b2e      	ldr	r3, [pc, #184]	; (80132c0 <__ieee754_pow+0xa50>)
 8013206:	440b      	add	r3, r1
 8013208:	4303      	orrs	r3, r0
 801320a:	d009      	beq.n	8013220 <__ieee754_pow+0x9b0>
 801320c:	ec51 0b18 	vmov	r0, r1, d8
 8013210:	2200      	movs	r2, #0
 8013212:	2300      	movs	r3, #0
 8013214:	f7ed fc72 	bl	8000afc <__aeabi_dcmplt>
 8013218:	3800      	subs	r0, #0
 801321a:	bf18      	it	ne
 801321c:	2001      	movne	r0, #1
 801321e:	e447      	b.n	8012ab0 <__ieee754_pow+0x240>
 8013220:	4622      	mov	r2, r4
 8013222:	462b      	mov	r3, r5
 8013224:	f7ed f840 	bl	80002a8 <__aeabi_dsub>
 8013228:	4642      	mov	r2, r8
 801322a:	464b      	mov	r3, r9
 801322c:	f7ed fc7a 	bl	8000b24 <__aeabi_dcmpge>
 8013230:	2800      	cmp	r0, #0
 8013232:	f43f aef3 	beq.w	801301c <__ieee754_pow+0x7ac>
 8013236:	e7e9      	b.n	801320c <__ieee754_pow+0x99c>
 8013238:	f04f 0a00 	mov.w	sl, #0
 801323c:	e71a      	b.n	8013074 <__ieee754_pow+0x804>
 801323e:	ec51 0b10 	vmov	r0, r1, d0
 8013242:	4619      	mov	r1, r3
 8013244:	e7d4      	b.n	80131f0 <__ieee754_pow+0x980>
 8013246:	491c      	ldr	r1, [pc, #112]	; (80132b8 <__ieee754_pow+0xa48>)
 8013248:	2000      	movs	r0, #0
 801324a:	f7ff bb30 	b.w	80128ae <__ieee754_pow+0x3e>
 801324e:	2000      	movs	r0, #0
 8013250:	2100      	movs	r1, #0
 8013252:	f7ff bb2c 	b.w	80128ae <__ieee754_pow+0x3e>
 8013256:	4630      	mov	r0, r6
 8013258:	4639      	mov	r1, r7
 801325a:	f7ff bb28 	b.w	80128ae <__ieee754_pow+0x3e>
 801325e:	9204      	str	r2, [sp, #16]
 8013260:	f7ff bb7a 	b.w	8012958 <__ieee754_pow+0xe8>
 8013264:	2300      	movs	r3, #0
 8013266:	f7ff bb64 	b.w	8012932 <__ieee754_pow+0xc2>
 801326a:	bf00      	nop
 801326c:	f3af 8000 	nop.w
 8013270:	00000000 	.word	0x00000000
 8013274:	3fe62e43 	.word	0x3fe62e43
 8013278:	fefa39ef 	.word	0xfefa39ef
 801327c:	3fe62e42 	.word	0x3fe62e42
 8013280:	0ca86c39 	.word	0x0ca86c39
 8013284:	be205c61 	.word	0xbe205c61
 8013288:	72bea4d0 	.word	0x72bea4d0
 801328c:	3e663769 	.word	0x3e663769
 8013290:	c5d26bf1 	.word	0xc5d26bf1
 8013294:	3ebbbd41 	.word	0x3ebbbd41
 8013298:	af25de2c 	.word	0xaf25de2c
 801329c:	3f11566a 	.word	0x3f11566a
 80132a0:	16bebd93 	.word	0x16bebd93
 80132a4:	3f66c16c 	.word	0x3f66c16c
 80132a8:	5555553e 	.word	0x5555553e
 80132ac:	3fc55555 	.word	0x3fc55555
 80132b0:	3fe00000 	.word	0x3fe00000
 80132b4:	000fffff 	.word	0x000fffff
 80132b8:	3ff00000 	.word	0x3ff00000
 80132bc:	4090cbff 	.word	0x4090cbff
 80132c0:	3f6f3400 	.word	0x3f6f3400
 80132c4:	652b82fe 	.word	0x652b82fe
 80132c8:	3c971547 	.word	0x3c971547

080132cc <__ieee754_sqrt>:
 80132cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132d0:	ec55 4b10 	vmov	r4, r5, d0
 80132d4:	4e55      	ldr	r6, [pc, #340]	; (801342c <__ieee754_sqrt+0x160>)
 80132d6:	43ae      	bics	r6, r5
 80132d8:	ee10 0a10 	vmov	r0, s0
 80132dc:	ee10 3a10 	vmov	r3, s0
 80132e0:	462a      	mov	r2, r5
 80132e2:	4629      	mov	r1, r5
 80132e4:	d110      	bne.n	8013308 <__ieee754_sqrt+0x3c>
 80132e6:	ee10 2a10 	vmov	r2, s0
 80132ea:	462b      	mov	r3, r5
 80132ec:	f7ed f994 	bl	8000618 <__aeabi_dmul>
 80132f0:	4602      	mov	r2, r0
 80132f2:	460b      	mov	r3, r1
 80132f4:	4620      	mov	r0, r4
 80132f6:	4629      	mov	r1, r5
 80132f8:	f7ec ffd8 	bl	80002ac <__adddf3>
 80132fc:	4604      	mov	r4, r0
 80132fe:	460d      	mov	r5, r1
 8013300:	ec45 4b10 	vmov	d0, r4, r5
 8013304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013308:	2d00      	cmp	r5, #0
 801330a:	dc10      	bgt.n	801332e <__ieee754_sqrt+0x62>
 801330c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013310:	4330      	orrs	r0, r6
 8013312:	d0f5      	beq.n	8013300 <__ieee754_sqrt+0x34>
 8013314:	b15d      	cbz	r5, 801332e <__ieee754_sqrt+0x62>
 8013316:	ee10 2a10 	vmov	r2, s0
 801331a:	462b      	mov	r3, r5
 801331c:	ee10 0a10 	vmov	r0, s0
 8013320:	f7ec ffc2 	bl	80002a8 <__aeabi_dsub>
 8013324:	4602      	mov	r2, r0
 8013326:	460b      	mov	r3, r1
 8013328:	f7ed faa0 	bl	800086c <__aeabi_ddiv>
 801332c:	e7e6      	b.n	80132fc <__ieee754_sqrt+0x30>
 801332e:	1512      	asrs	r2, r2, #20
 8013330:	d074      	beq.n	801341c <__ieee754_sqrt+0x150>
 8013332:	07d4      	lsls	r4, r2, #31
 8013334:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013338:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801333c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013340:	bf5e      	ittt	pl
 8013342:	0fda      	lsrpl	r2, r3, #31
 8013344:	005b      	lslpl	r3, r3, #1
 8013346:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801334a:	2400      	movs	r4, #0
 801334c:	0fda      	lsrs	r2, r3, #31
 801334e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013352:	107f      	asrs	r7, r7, #1
 8013354:	005b      	lsls	r3, r3, #1
 8013356:	2516      	movs	r5, #22
 8013358:	4620      	mov	r0, r4
 801335a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801335e:	1886      	adds	r6, r0, r2
 8013360:	428e      	cmp	r6, r1
 8013362:	bfde      	ittt	le
 8013364:	1b89      	suble	r1, r1, r6
 8013366:	18b0      	addle	r0, r6, r2
 8013368:	18a4      	addle	r4, r4, r2
 801336a:	0049      	lsls	r1, r1, #1
 801336c:	3d01      	subs	r5, #1
 801336e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013372:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013376:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801337a:	d1f0      	bne.n	801335e <__ieee754_sqrt+0x92>
 801337c:	462a      	mov	r2, r5
 801337e:	f04f 0e20 	mov.w	lr, #32
 8013382:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013386:	4281      	cmp	r1, r0
 8013388:	eb06 0c05 	add.w	ip, r6, r5
 801338c:	dc02      	bgt.n	8013394 <__ieee754_sqrt+0xc8>
 801338e:	d113      	bne.n	80133b8 <__ieee754_sqrt+0xec>
 8013390:	459c      	cmp	ip, r3
 8013392:	d811      	bhi.n	80133b8 <__ieee754_sqrt+0xec>
 8013394:	f1bc 0f00 	cmp.w	ip, #0
 8013398:	eb0c 0506 	add.w	r5, ip, r6
 801339c:	da43      	bge.n	8013426 <__ieee754_sqrt+0x15a>
 801339e:	2d00      	cmp	r5, #0
 80133a0:	db41      	blt.n	8013426 <__ieee754_sqrt+0x15a>
 80133a2:	f100 0801 	add.w	r8, r0, #1
 80133a6:	1a09      	subs	r1, r1, r0
 80133a8:	459c      	cmp	ip, r3
 80133aa:	bf88      	it	hi
 80133ac:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80133b0:	eba3 030c 	sub.w	r3, r3, ip
 80133b4:	4432      	add	r2, r6
 80133b6:	4640      	mov	r0, r8
 80133b8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80133bc:	f1be 0e01 	subs.w	lr, lr, #1
 80133c0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80133c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80133c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80133cc:	d1db      	bne.n	8013386 <__ieee754_sqrt+0xba>
 80133ce:	430b      	orrs	r3, r1
 80133d0:	d006      	beq.n	80133e0 <__ieee754_sqrt+0x114>
 80133d2:	1c50      	adds	r0, r2, #1
 80133d4:	bf13      	iteet	ne
 80133d6:	3201      	addne	r2, #1
 80133d8:	3401      	addeq	r4, #1
 80133da:	4672      	moveq	r2, lr
 80133dc:	f022 0201 	bicne.w	r2, r2, #1
 80133e0:	1063      	asrs	r3, r4, #1
 80133e2:	0852      	lsrs	r2, r2, #1
 80133e4:	07e1      	lsls	r1, r4, #31
 80133e6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80133ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80133ee:	bf48      	it	mi
 80133f0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80133f4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80133f8:	4614      	mov	r4, r2
 80133fa:	e781      	b.n	8013300 <__ieee754_sqrt+0x34>
 80133fc:	0ad9      	lsrs	r1, r3, #11
 80133fe:	3815      	subs	r0, #21
 8013400:	055b      	lsls	r3, r3, #21
 8013402:	2900      	cmp	r1, #0
 8013404:	d0fa      	beq.n	80133fc <__ieee754_sqrt+0x130>
 8013406:	02cd      	lsls	r5, r1, #11
 8013408:	d50a      	bpl.n	8013420 <__ieee754_sqrt+0x154>
 801340a:	f1c2 0420 	rsb	r4, r2, #32
 801340e:	fa23 f404 	lsr.w	r4, r3, r4
 8013412:	1e55      	subs	r5, r2, #1
 8013414:	4093      	lsls	r3, r2
 8013416:	4321      	orrs	r1, r4
 8013418:	1b42      	subs	r2, r0, r5
 801341a:	e78a      	b.n	8013332 <__ieee754_sqrt+0x66>
 801341c:	4610      	mov	r0, r2
 801341e:	e7f0      	b.n	8013402 <__ieee754_sqrt+0x136>
 8013420:	0049      	lsls	r1, r1, #1
 8013422:	3201      	adds	r2, #1
 8013424:	e7ef      	b.n	8013406 <__ieee754_sqrt+0x13a>
 8013426:	4680      	mov	r8, r0
 8013428:	e7bd      	b.n	80133a6 <__ieee754_sqrt+0xda>
 801342a:	bf00      	nop
 801342c:	7ff00000 	.word	0x7ff00000

08013430 <with_errno>:
 8013430:	b570      	push	{r4, r5, r6, lr}
 8013432:	4604      	mov	r4, r0
 8013434:	460d      	mov	r5, r1
 8013436:	4616      	mov	r6, r2
 8013438:	f7fc fa6c 	bl	800f914 <__errno>
 801343c:	4629      	mov	r1, r5
 801343e:	6006      	str	r6, [r0, #0]
 8013440:	4620      	mov	r0, r4
 8013442:	bd70      	pop	{r4, r5, r6, pc}

08013444 <xflow>:
 8013444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013446:	4614      	mov	r4, r2
 8013448:	461d      	mov	r5, r3
 801344a:	b108      	cbz	r0, 8013450 <xflow+0xc>
 801344c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013450:	e9cd 2300 	strd	r2, r3, [sp]
 8013454:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013458:	4620      	mov	r0, r4
 801345a:	4629      	mov	r1, r5
 801345c:	f7ed f8dc 	bl	8000618 <__aeabi_dmul>
 8013460:	2222      	movs	r2, #34	; 0x22
 8013462:	b003      	add	sp, #12
 8013464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013468:	f7ff bfe2 	b.w	8013430 <with_errno>

0801346c <__math_uflow>:
 801346c:	b508      	push	{r3, lr}
 801346e:	2200      	movs	r2, #0
 8013470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013474:	f7ff ffe6 	bl	8013444 <xflow>
 8013478:	ec41 0b10 	vmov	d0, r0, r1
 801347c:	bd08      	pop	{r3, pc}

0801347e <__math_oflow>:
 801347e:	b508      	push	{r3, lr}
 8013480:	2200      	movs	r2, #0
 8013482:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8013486:	f7ff ffdd 	bl	8013444 <xflow>
 801348a:	ec41 0b10 	vmov	d0, r0, r1
 801348e:	bd08      	pop	{r3, pc}

08013490 <fabs>:
 8013490:	ec51 0b10 	vmov	r0, r1, d0
 8013494:	ee10 2a10 	vmov	r2, s0
 8013498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801349c:	ec43 2b10 	vmov	d0, r2, r3
 80134a0:	4770      	bx	lr

080134a2 <finite>:
 80134a2:	b082      	sub	sp, #8
 80134a4:	ed8d 0b00 	vstr	d0, [sp]
 80134a8:	9801      	ldr	r0, [sp, #4]
 80134aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80134ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80134b2:	0fc0      	lsrs	r0, r0, #31
 80134b4:	b002      	add	sp, #8
 80134b6:	4770      	bx	lr

080134b8 <scalbn>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	ec55 4b10 	vmov	r4, r5, d0
 80134be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80134c2:	4606      	mov	r6, r0
 80134c4:	462b      	mov	r3, r5
 80134c6:	b99a      	cbnz	r2, 80134f0 <scalbn+0x38>
 80134c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80134cc:	4323      	orrs	r3, r4
 80134ce:	d036      	beq.n	801353e <scalbn+0x86>
 80134d0:	4b39      	ldr	r3, [pc, #228]	; (80135b8 <scalbn+0x100>)
 80134d2:	4629      	mov	r1, r5
 80134d4:	ee10 0a10 	vmov	r0, s0
 80134d8:	2200      	movs	r2, #0
 80134da:	f7ed f89d 	bl	8000618 <__aeabi_dmul>
 80134de:	4b37      	ldr	r3, [pc, #220]	; (80135bc <scalbn+0x104>)
 80134e0:	429e      	cmp	r6, r3
 80134e2:	4604      	mov	r4, r0
 80134e4:	460d      	mov	r5, r1
 80134e6:	da10      	bge.n	801350a <scalbn+0x52>
 80134e8:	a32b      	add	r3, pc, #172	; (adr r3, 8013598 <scalbn+0xe0>)
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	e03a      	b.n	8013566 <scalbn+0xae>
 80134f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80134f4:	428a      	cmp	r2, r1
 80134f6:	d10c      	bne.n	8013512 <scalbn+0x5a>
 80134f8:	ee10 2a10 	vmov	r2, s0
 80134fc:	4620      	mov	r0, r4
 80134fe:	4629      	mov	r1, r5
 8013500:	f7ec fed4 	bl	80002ac <__adddf3>
 8013504:	4604      	mov	r4, r0
 8013506:	460d      	mov	r5, r1
 8013508:	e019      	b.n	801353e <scalbn+0x86>
 801350a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801350e:	460b      	mov	r3, r1
 8013510:	3a36      	subs	r2, #54	; 0x36
 8013512:	4432      	add	r2, r6
 8013514:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013518:	428a      	cmp	r2, r1
 801351a:	dd08      	ble.n	801352e <scalbn+0x76>
 801351c:	2d00      	cmp	r5, #0
 801351e:	a120      	add	r1, pc, #128	; (adr r1, 80135a0 <scalbn+0xe8>)
 8013520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013524:	da1c      	bge.n	8013560 <scalbn+0xa8>
 8013526:	a120      	add	r1, pc, #128	; (adr r1, 80135a8 <scalbn+0xf0>)
 8013528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801352c:	e018      	b.n	8013560 <scalbn+0xa8>
 801352e:	2a00      	cmp	r2, #0
 8013530:	dd08      	ble.n	8013544 <scalbn+0x8c>
 8013532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801353a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801353e:	ec45 4b10 	vmov	d0, r4, r5
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013548:	da19      	bge.n	801357e <scalbn+0xc6>
 801354a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801354e:	429e      	cmp	r6, r3
 8013550:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013554:	dd0a      	ble.n	801356c <scalbn+0xb4>
 8013556:	a112      	add	r1, pc, #72	; (adr r1, 80135a0 <scalbn+0xe8>)
 8013558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d1e2      	bne.n	8013526 <scalbn+0x6e>
 8013560:	a30f      	add	r3, pc, #60	; (adr r3, 80135a0 <scalbn+0xe8>)
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f7ed f857 	bl	8000618 <__aeabi_dmul>
 801356a:	e7cb      	b.n	8013504 <scalbn+0x4c>
 801356c:	a10a      	add	r1, pc, #40	; (adr r1, 8013598 <scalbn+0xe0>)
 801356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d0b8      	beq.n	80134e8 <scalbn+0x30>
 8013576:	a10e      	add	r1, pc, #56	; (adr r1, 80135b0 <scalbn+0xf8>)
 8013578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801357c:	e7b4      	b.n	80134e8 <scalbn+0x30>
 801357e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013582:	3236      	adds	r2, #54	; 0x36
 8013584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801358c:	4620      	mov	r0, r4
 801358e:	4b0c      	ldr	r3, [pc, #48]	; (80135c0 <scalbn+0x108>)
 8013590:	2200      	movs	r2, #0
 8013592:	e7e8      	b.n	8013566 <scalbn+0xae>
 8013594:	f3af 8000 	nop.w
 8013598:	c2f8f359 	.word	0xc2f8f359
 801359c:	01a56e1f 	.word	0x01a56e1f
 80135a0:	8800759c 	.word	0x8800759c
 80135a4:	7e37e43c 	.word	0x7e37e43c
 80135a8:	8800759c 	.word	0x8800759c
 80135ac:	fe37e43c 	.word	0xfe37e43c
 80135b0:	c2f8f359 	.word	0xc2f8f359
 80135b4:	81a56e1f 	.word	0x81a56e1f
 80135b8:	43500000 	.word	0x43500000
 80135bc:	ffff3cb0 	.word	0xffff3cb0
 80135c0:	3c900000 	.word	0x3c900000

080135c4 <_init>:
 80135c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135c6:	bf00      	nop
 80135c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ca:	bc08      	pop	{r3}
 80135cc:	469e      	mov	lr, r3
 80135ce:	4770      	bx	lr

080135d0 <_fini>:
 80135d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d2:	bf00      	nop
 80135d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135d6:	bc08      	pop	{r3}
 80135d8:	469e      	mov	lr, r3
 80135da:	4770      	bx	lr
